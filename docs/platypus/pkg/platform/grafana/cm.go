// Copyright (c) 2023 Volvo Car Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package grafana

import (
	"github.com/golingon/lingon/pkg/kubeutil"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func Config(opts KubeOpts) *corev1.ConfigMap {
	data := map[string]string{
		"grafana.ini":             ConfigINI,
		"download_dashboards.sh":  DownloadDashboardsSh,
		"dashboardproviders.yaml": DashboardProviders,
		"datasources.yaml":        DataSources,
	}
	return &corev1.ConfigMap{
		TypeMeta: kubeutil.TypeConfigMapV1,
		ObjectMeta: metav1.ObjectMeta{
			Labels:    opts.CommonLabels,
			Name:      AppName,
			Namespace: opts.Namespace,
		},
		Data: data,
	}
}

var ConfigINI = `
[analytics]
check_for_updates = true
[log]
mode = console
[paths]
data = /var/lib/grafana/
logs = /var/log/grafana
plugins = /var/lib/grafana/plugins
provisioning = /etc/grafana/provisioning
`

var DownloadDashboardsSh = `
#!/usr/bin/env sh
set -euf
mkdir -p /var/lib/grafana/dashboards/default

curl -skf \
--connect-timeout 60 \
--max-time 60 \
-H "Accept: application/json" \
-H "Content-Type: application/json;charset=UTF-8" \
  "https://karpenter.sh/v0.24.0/getting-started/getting-started-with-eksctl/karpenter-capacity-dashboard.json" \
> "/var/lib/grafana/dashboards/default/capacity-dashboard.json"

curl -skf \
--connect-timeout 60 \
--max-time 60 \
-H "Accept: application/json" \
-H "Content-Type: application/json;charset=UTF-8" \
  "https://karpenter.sh/v0.24.0/getting-started/getting-started-with-eksctl/karpenter-performance-dashboard.json" \
> "/var/lib/grafana/dashboards/default/performance-dashboard.json"
`

var DashboardProviders = `
apiVersion: 1
providers:
  - disableDeletion: false
    editable: true
    folder: ""
    name: default
    options:
      path: /var/lib/grafana/dashboards/default
    orgId: 1
    type: file
`

var DataSources = `
apiVersion: 1
datasources:
  - access: proxy
    name: Prometheus
    type: prometheus
    url: http://prometheus-server:80
    version: 1
`

// var GrafanaCm = &corev1.ConfigMap{
// 	Data: map[string]string{
// 		"dashboardproviders.yaml": "apiVersion: 1\nproviders:\n- disableDeletion: false\n  editable: true\n  folder: \"\"\n  name: default\n  options:\n    path: /var/lib/grafana/dashboards/default\n  orgId: 1\n  type: file\n",
// 		"datasources.yaml":        "apiVersion: 1\ndatasources:\n- access: proxy\n  name: Prometheus\n  type: prometheus\n  url: http://prometheus-server:80\n  version: 1\n",
// 		"download_dashboards.sh":  "#!/usr/bin/env sh\nset -euf\nmkdir -p /var/lib/grafana/dashboards/default\n\ncurl -skf \\\n--connect-timeout 60 \\\n--max-time 60 \\\n-H \"Accept: application/json\" \\\n-H \"Content-Type: application/json;charset=UTF-8\" \\\n  \"https://karpenter.sh/v0.24.0/getting-started/getting-started-with-eksctl/karpenter-capacity-dashboard.json\" \\\n> \"/var/lib/grafana/dashboards/default/capacity-dashboard.json\"\n  \ncurl -skf \\\n--connect-timeout 60 \\\n--max-time 60 \\\n-H \"Accept: application/json\" \\\n-H \"Content-Type: application/json;charset=UTF-8\" \\\n  \"https://karpenter.sh/v0.24.0/getting-started/getting-started-with-eksctl/karpenter-performance-dashboard.json\" \\\n> \"/var/lib/grafana/dashboards/default/performance-dashboard.json\"\n",
// 		"grafana.ini":             "[analytics]\ncheck_for_updates = true\n[grafana_net]\nurl = https://grafana.net\n[log]\nmode = console\n[paths]\ndata = /var/lib/grafana/\nlogs = /var/log/grafana\nplugins = /var/lib/grafana/plugins\nprovisioning = /etc/grafana/provisioning\n[server]\ndomain = ''\n",
// 	},
// 	ObjectMeta: metav1.ObjectMeta{
// 		Labels: map[string]string{
// 			"app.kubernetes.io/instance":   "grafana",
// 			"app.kubernetes.io/managed-by": "Helm",
// 			"app.kubernetes.io/name":       "grafana",
// 			"app.kubernetes.io/version":    "9.3.6",
// 			"helm.sh/chart":                "grafana-6.50.7",
// 		},
// 		Name:      "grafana",
// 		Namespace: "monitoring",
// 	},
// 	TypeMeta: metav1.TypeMeta{
// 		APIVersion: "v1",
// 		Kind:       "ConfigMap",
// 	},
// }
