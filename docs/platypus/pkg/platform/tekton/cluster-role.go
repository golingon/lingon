// Copyright (c) 2023 Volvo Car Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package tekton

import (
	"github.com/golingon/lingon/pkg/kubeutil"
	rbacv1 "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var PipelinesControllerClusterAccessCR = &rbacv1.ClusterRole{
	ObjectMeta: metav1.ObjectMeta{
		Labels: labelsController,
		Name:   "tekton-pipelines-controller-cluster-access",
	},
	Rules: []rbacv1.PolicyRule{
		{
			APIGroups: []string{},
			Resources: []string{"pods"},
			Verbs:     []string{"list", "watch"},
		}, {
			APIGroups: []string{"tekton.dev"},
			Resources: []string{
				"tasks",
				"clustertasks",
				"taskruns",
				"pipelines",
				"pipelineruns",
				"pipelineresources",
				"runs",
				"customruns",
			},
			Verbs: []string{
				"get",
				"list",
				"create",
				"update",
				"delete",
				"patch",
				"watch",
			},
		}, {
			APIGroups: []string{"tekton.dev"},
			Resources: []string{"verificationpolicies"},
			Verbs:     []string{"get", "list", "watch"},
		}, {
			APIGroups: []string{"tekton.dev"},
			Resources: []string{
				"taskruns/finalizers",
				"pipelineruns/finalizers",
				"runs/finalizers",
				"customruns/finalizers",
			},
			Verbs: []string{
				"get",
				"list",
				"create",
				"update",
				"delete",
				"patch",
				"watch",
			},
		}, {
			APIGroups: []string{"tekton.dev"},
			Resources: []string{
				"tasks/status",
				"clustertasks/status",
				"taskruns/status",
				"pipelines/status",
				"pipelineruns/status",
				"pipelineresources/status",
				"runs/status",
				"customruns/status",
				"verificationpolicies/status",
			},
			Verbs: []string{
				"get",
				"list",
				"create",
				"update",
				"delete",
				"patch",
				"watch",
			},
		}, {
			APIGroups: []string{"resolution.tekton.dev"},
			Resources: []string{
				"resolutionrequests",
				"resolutionrequests/status",
			},
			Verbs: []string{
				"get",
				"list",
				"create",
				"update",
				"delete",
				"patch",
				"watch",
			},
		},
	},
	TypeMeta: kubeutil.TypeClusterRoleV1,
}

var PipelinesResolversResolutionRequestUpdatesCR = &rbacv1.ClusterRole{
	ObjectMeta: metav1.ObjectMeta{
		Labels: labelsResolvers,
		Name:   "tekton-pipelines-resolvers-resolution-request-updates",
	},
	Rules: []rbacv1.PolicyRule{
		{
			APIGroups: []string{"resolution.tekton.dev"},
			Resources: []string{
				"resolutionrequests",
				"resolutionrequests/status",
			},
			Verbs: []string{"get", "list", "watch", "update", "patch"},
		}, {
			APIGroups: []string{"tekton.dev"},
			Resources: []string{"tasks", "pipelines"},
			Verbs:     []string{"get", "list"},
		}, {
			APIGroups: []string{},
			Resources: []string{"secrets"},
			Verbs:     []string{"get", "list", "watch"},
		},
	},
	TypeMeta: kubeutil.TypeClusterRoleV1,
}

var PipelinesWebhookClusterAccessCR = &rbacv1.ClusterRole{
	ObjectMeta: metav1.ObjectMeta{
		Labels: labelsWebhook,
		Name:   "tekton-pipelines-webhook-cluster-access",
	},
	Rules: []rbacv1.PolicyRule{
		{
			APIGroups: []string{"apiextensions.k8s.io"},
			ResourceNames: []string{
				PipelinesDevCRD.Name,
				// "pipelineruns.tekton.dev",
				RunsDevCRD.Name,
				// "runs.tekton.dev",
				TasksDevCRD.Name,
				// "tasks.tekton.dev",
				ClusterTasksDevCRD.Name,
				// "clustertasks.tekton.dev",
				TaskRunsDevCRD.Name,
				// "taskruns.tekton.dev",
				PipelineResourcesDevCRD.Name,
				// "pipelineresources.tekton.dev",
				ResolutionRequestsCRD.Name,
				// "resolutionrequests.resolution.tekton.dev",
				CustomRunsDevCRD.Name,
				// "customruns.tekton.dev",
				VerificationPoliciesDevCRD.Name,
				// "verificationpolicies.tekton.dev",
			},
			Resources: []string{
				"customresourcedefinitions",
				"customresourcedefinitions/status",
			},
			Verbs: []string{"get", "update", "patch"},
		}, {
			APIGroups: []string{"apiextensions.k8s.io"},
			Resources: []string{"customresourcedefinitions"},
			Verbs:     []string{"list", "watch"},
		}, {
			APIGroups: []string{"admissionregistration.k8s.io"},
			Resources: []string{
				"mutatingwebhookconfigurations",
				"validatingwebhookconfigurations",
			},
			Verbs: []string{"list", "watch"},
		}, {
			APIGroups:     []string{"admissionregistration.k8s.io"},
			ResourceNames: []string{"webhook.pipeline.tekton.dev"},
			Resources:     []string{"mutatingwebhookconfigurations"},
			Verbs:         []string{"get", "update", "delete"},
		}, {
			APIGroups: []string{"admissionregistration.k8s.io"},
			ResourceNames: []string{
				"validation.webhook.pipeline.tekton.dev",
				"config.webhook.pipeline.tekton.dev",
			},
			Resources: []string{"validatingwebhookconfigurations"},
			Verbs:     []string{"get", "update", "delete"},
		}, {
			APIGroups:     []string{},
			ResourceNames: []string{"tekton-pipelines"},
			Resources:     []string{"namespaces"},
			Verbs:         []string{"get"},
		}, {
			APIGroups:     []string{},
			ResourceNames: []string{"tekton-pipelines"},
			Resources:     []string{"namespaces/finalizers"},
			Verbs:         []string{"update"},
		},
	},
	TypeMeta: kubeutil.TypeClusterRoleV1,
}

var PipelinesControllerTenantAccessCR = &rbacv1.ClusterRole{
	ObjectMeta: metav1.ObjectMeta{
		Labels: labelsController,
		Name:   "tekton-pipelines-controller-tenant-access",
	},
	Rules: []rbacv1.PolicyRule{
		{
			APIGroups: []string{},
			Resources: []string{"pods", "persistentvolumeclaims"},
			Verbs: []string{
				"get",
				"list",
				"create",
				"update",
				"delete",
				"patch",
				"watch",
			},
		}, {
			APIGroups: []string{},
			Resources: []string{"events"},
			Verbs:     []string{"create", "update", "patch"},
		}, {
			APIGroups: []string{},
			Resources: []string{
				"configmaps",
				"limitranges",
				"secrets",
				"serviceaccounts",
			},
			Verbs: []string{"get", "list", "watch"},
		}, {
			APIGroups: []string{"apps"},
			Resources: []string{"statefulsets"},
			Verbs: []string{
				"get",
				"list",
				"create",
				"update",
				"delete",
				"patch",
				"watch",
			},
		},
	},
	TypeMeta: kubeutil.TypeClusterRoleV1,
}

var AggregateEditCR = &rbacv1.ClusterRole{
	ObjectMeta: metav1.ObjectMeta{
		Labels: kubeutil.MergeLabels(
			labelsPipelines, map[string]string{
				kubeutil.LabelRbacAggregateToAdmin: "true",
				kubeutil.LabelRbacAggregateToEdit:  "true",
			},
		),
		Name: "tekton-aggregate-edit",
	},
	Rules: []rbacv1.PolicyRule{
		{
			APIGroups: []string{"tekton.dev"},
			Resources: []string{
				"tasks",
				"taskruns",
				"pipelines",
				"pipelineruns",
				"pipelineresources",
				"runs",
				"customruns",
			},
			Verbs: []string{
				"create",
				"delete",
				"deletecollection",
				"get",
				"list",
				"patch",
				"update",
				"watch",
			},
		},
	},
	TypeMeta: kubeutil.TypeClusterRoleV1,
}

var AggregateViewCR = &rbacv1.ClusterRole{
	ObjectMeta: metav1.ObjectMeta{
		Labels: kubeutil.MergeLabels(
			labelsPipelines, map[string]string{
				kubeutil.LabelRbacAggregateToView: "true",
			},
		),
		Name: "tekton-aggregate-view",
	},
	Rules: []rbacv1.PolicyRule{
		{
			APIGroups: []string{"tekton.dev"},
			Resources: []string{
				"tasks",
				"taskruns",
				"pipelines",
				"pipelineruns",
				"pipelineresources",
				"runs",
				"customruns",
			},
			Verbs: []string{"get", "list", "watch"},
		},
	},
	TypeMeta: kubeutil.TypeClusterRoleV1,
}
