-- out/provider.go --
// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"github.com/golingon/lingon/pkg/terra"
	provider "test/out/provider"
)

func NewProvider(args ProviderArgs) *Provider {
	return &Provider{Args: args}
}

var _ terra.Provider = (*Provider)(nil)

type Provider struct {
	Args ProviderArgs
}

// LocalName returns the provider local name for [Provider].
func (p *Provider) LocalName() string {
	return "aws"
}

// Source returns the provider source for [Provider].
func (p *Provider) Source() string {
	return "hashicorp/aws"
}

// Version returns the provider version for [Provider].
func (p *Provider) Version() string {
	return "5.44.0"
}

// Configuration returns the configuration (args) for [Provider].
func (p *Provider) Configuration() interface{} {
	return p.Args
}

// ProviderArgs contains the configurations for provider.
type ProviderArgs struct {
	// AccessKey: string, optional
	AccessKey terra.StringValue `hcl:"access_key,attr"`
	// AllowedAccountIds: set of string, optional
	AllowedAccountIds terra.SetValue[terra.StringValue] `hcl:"allowed_account_ids,attr"`
	// CustomCaBundle: string, optional
	CustomCaBundle terra.StringValue `hcl:"custom_ca_bundle,attr"`
	// Ec2MetadataServiceEndpoint: string, optional
	Ec2MetadataServiceEndpoint terra.StringValue `hcl:"ec2_metadata_service_endpoint,attr"`
	// Ec2MetadataServiceEndpointMode: string, optional
	Ec2MetadataServiceEndpointMode terra.StringValue `hcl:"ec2_metadata_service_endpoint_mode,attr"`
	// ForbiddenAccountIds: set of string, optional
	ForbiddenAccountIds terra.SetValue[terra.StringValue] `hcl:"forbidden_account_ids,attr"`
	// HttpProxy: string, optional
	HttpProxy terra.StringValue `hcl:"http_proxy,attr"`
	// HttpsProxy: string, optional
	HttpsProxy terra.StringValue `hcl:"https_proxy,attr"`
	// Insecure: bool, optional
	Insecure terra.BoolValue `hcl:"insecure,attr"`
	// MaxRetries: number, optional
	MaxRetries terra.NumberValue `hcl:"max_retries,attr"`
	// NoProxy: string, optional
	NoProxy terra.StringValue `hcl:"no_proxy,attr"`
	// Profile: string, optional
	Profile terra.StringValue `hcl:"profile,attr"`
	// Region: string, optional
	Region terra.StringValue `hcl:"region,attr"`
	// RetryMode: string, optional
	RetryMode terra.StringValue `hcl:"retry_mode,attr"`
	// S3UsEast1RegionalEndpoint: string, optional
	S3UsEast1RegionalEndpoint terra.StringValue `hcl:"s3_us_east_1_regional_endpoint,attr"`
	// S3UsePathStyle: bool, optional
	S3UsePathStyle terra.BoolValue `hcl:"s3_use_path_style,attr"`
	// SecretKey: string, optional
	SecretKey terra.StringValue `hcl:"secret_key,attr"`
	// SharedConfigFiles: list of string, optional
	SharedConfigFiles terra.ListValue[terra.StringValue] `hcl:"shared_config_files,attr"`
	// SharedCredentialsFiles: list of string, optional
	SharedCredentialsFiles terra.ListValue[terra.StringValue] `hcl:"shared_credentials_files,attr"`
	// SkipCredentialsValidation: bool, optional
	SkipCredentialsValidation terra.BoolValue `hcl:"skip_credentials_validation,attr"`
	// SkipMetadataApiCheck: string, optional
	SkipMetadataApiCheck terra.StringValue `hcl:"skip_metadata_api_check,attr"`
	// SkipRegionValidation: bool, optional
	SkipRegionValidation terra.BoolValue `hcl:"skip_region_validation,attr"`
	// SkipRequestingAccountId: bool, optional
	SkipRequestingAccountId terra.BoolValue `hcl:"skip_requesting_account_id,attr"`
	// StsRegion: string, optional
	StsRegion terra.StringValue `hcl:"sts_region,attr"`
	// Token: string, optional
	Token terra.StringValue `hcl:"token,attr"`
	// TokenBucketRateLimiterCapacity: number, optional
	TokenBucketRateLimiterCapacity terra.NumberValue `hcl:"token_bucket_rate_limiter_capacity,attr"`
	// UseDualstackEndpoint: bool, optional
	UseDualstackEndpoint terra.BoolValue `hcl:"use_dualstack_endpoint,attr"`
	// UseFipsEndpoint: bool, optional
	UseFipsEndpoint terra.BoolValue `hcl:"use_fips_endpoint,attr"`
	// AssumeRole: min=0
	AssumeRole []provider.AssumeRole `hcl:"assume_role,block" validate:"min=0"`
	// AssumeRoleWithWebIdentity: min=0
	AssumeRoleWithWebIdentity []provider.AssumeRoleWithWebIdentity `hcl:"assume_role_with_web_identity,block" validate:"min=0"`
	// DefaultTags: min=0
	DefaultTags []provider.DefaultTags `hcl:"default_tags,block" validate:"min=0"`
	// Endpoints: min=0
	Endpoints []provider.Endpoints `hcl:"endpoints,block" validate:"min=0"`
	// IgnoreTags: min=0
	IgnoreTags []provider.IgnoreTags `hcl:"ignore_tags,block" validate:"min=0"`
}
-- out/provider/provider.go --
// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package provider

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AssumeRole struct {
	// Duration: string, optional
	Duration terra.StringValue `hcl:"duration,attr"`
	// ExternalId: string, optional
	ExternalId terra.StringValue `hcl:"external_id,attr"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// PolicyArns: set of string, optional
	PolicyArns terra.SetValue[terra.StringValue] `hcl:"policy_arns,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// SessionName: string, optional
	SessionName terra.StringValue `hcl:"session_name,attr"`
	// SourceIdentity: string, optional
	SourceIdentity terra.StringValue `hcl:"source_identity,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TransitiveTagKeys: set of string, optional
	TransitiveTagKeys terra.SetValue[terra.StringValue] `hcl:"transitive_tag_keys,attr"`
}

type AssumeRoleWithWebIdentity struct {
	// Duration: string, optional
	Duration terra.StringValue `hcl:"duration,attr"`
	// Policy: string, optional
	Policy terra.StringValue `hcl:"policy,attr"`
	// PolicyArns: set of string, optional
	PolicyArns terra.SetValue[terra.StringValue] `hcl:"policy_arns,attr"`
	// RoleArn: string, optional
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// SessionName: string, optional
	SessionName terra.StringValue `hcl:"session_name,attr"`
	// WebIdentityToken: string, optional
	WebIdentityToken terra.StringValue `hcl:"web_identity_token,attr"`
	// WebIdentityTokenFile: string, optional
	WebIdentityTokenFile terra.StringValue `hcl:"web_identity_token_file,attr"`
}

type DefaultTags struct {
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type Endpoints struct {
	// Accessanalyzer: string, optional
	Accessanalyzer terra.StringValue `hcl:"accessanalyzer,attr"`
	// Account: string, optional
	Account terra.StringValue `hcl:"account,attr"`
	// Acm: string, optional
	Acm terra.StringValue `hcl:"acm,attr"`
	// Acmpca: string, optional
	Acmpca terra.StringValue `hcl:"acmpca,attr"`
	// Amg: string, optional
	Amg terra.StringValue `hcl:"amg,attr"`
	// Amp: string, optional
	Amp terra.StringValue `hcl:"amp,attr"`
	// Amplify: string, optional
	Amplify terra.StringValue `hcl:"amplify,attr"`
	// Apigateway: string, optional
	Apigateway terra.StringValue `hcl:"apigateway,attr"`
	// Apigatewayv2: string, optional
	Apigatewayv2 terra.StringValue `hcl:"apigatewayv2,attr"`
	// Appautoscaling: string, optional
	Appautoscaling terra.StringValue `hcl:"appautoscaling,attr"`
	// Appconfig: string, optional
	Appconfig terra.StringValue `hcl:"appconfig,attr"`
	// Appfabric: string, optional
	Appfabric terra.StringValue `hcl:"appfabric,attr"`
	// Appflow: string, optional
	Appflow terra.StringValue `hcl:"appflow,attr"`
	// Appintegrations: string, optional
	Appintegrations terra.StringValue `hcl:"appintegrations,attr"`
	// Appintegrationsservice: string, optional
	Appintegrationsservice terra.StringValue `hcl:"appintegrationsservice,attr"`
	// Applicationautoscaling: string, optional
	Applicationautoscaling terra.StringValue `hcl:"applicationautoscaling,attr"`
	// Applicationinsights: string, optional
	Applicationinsights terra.StringValue `hcl:"applicationinsights,attr"`
	// Appmesh: string, optional
	Appmesh terra.StringValue `hcl:"appmesh,attr"`
	// Appregistry: string, optional
	Appregistry terra.StringValue `hcl:"appregistry,attr"`
	// Apprunner: string, optional
	Apprunner terra.StringValue `hcl:"apprunner,attr"`
	// Appstream: string, optional
	Appstream terra.StringValue `hcl:"appstream,attr"`
	// Appsync: string, optional
	Appsync terra.StringValue `hcl:"appsync,attr"`
	// Athena: string, optional
	Athena terra.StringValue `hcl:"athena,attr"`
	// Auditmanager: string, optional
	Auditmanager terra.StringValue `hcl:"auditmanager,attr"`
	// Autoscaling: string, optional
	Autoscaling terra.StringValue `hcl:"autoscaling,attr"`
	// Autoscalingplans: string, optional
	Autoscalingplans terra.StringValue `hcl:"autoscalingplans,attr"`
	// Backup: string, optional
	Backup terra.StringValue `hcl:"backup,attr"`
	// Batch: string, optional
	Batch terra.StringValue `hcl:"batch,attr"`
	// Beanstalk: string, optional
	Beanstalk terra.StringValue `hcl:"beanstalk,attr"`
	// Bedrock: string, optional
	Bedrock terra.StringValue `hcl:"bedrock,attr"`
	// Bedrockagent: string, optional
	Bedrockagent terra.StringValue `hcl:"bedrockagent,attr"`
	// Budgets: string, optional
	Budgets terra.StringValue `hcl:"budgets,attr"`
	// Ce: string, optional
	Ce terra.StringValue `hcl:"ce,attr"`
	// Chime: string, optional
	Chime terra.StringValue `hcl:"chime,attr"`
	// Chimesdkmediapipelines: string, optional
	Chimesdkmediapipelines terra.StringValue `hcl:"chimesdkmediapipelines,attr"`
	// Chimesdkvoice: string, optional
	Chimesdkvoice terra.StringValue `hcl:"chimesdkvoice,attr"`
	// Cleanrooms: string, optional
	Cleanrooms terra.StringValue `hcl:"cleanrooms,attr"`
	// Cloud9: string, optional
	Cloud9 terra.StringValue `hcl:"cloud9,attr"`
	// Cloudcontrol: string, optional
	Cloudcontrol terra.StringValue `hcl:"cloudcontrol,attr"`
	// Cloudcontrolapi: string, optional
	Cloudcontrolapi terra.StringValue `hcl:"cloudcontrolapi,attr"`
	// Cloudformation: string, optional
	Cloudformation terra.StringValue `hcl:"cloudformation,attr"`
	// Cloudfront: string, optional
	Cloudfront terra.StringValue `hcl:"cloudfront,attr"`
	// Cloudfrontkeyvaluestore: string, optional
	Cloudfrontkeyvaluestore terra.StringValue `hcl:"cloudfrontkeyvaluestore,attr"`
	// Cloudhsm: string, optional
	Cloudhsm terra.StringValue `hcl:"cloudhsm,attr"`
	// Cloudhsmv2: string, optional
	Cloudhsmv2 terra.StringValue `hcl:"cloudhsmv2,attr"`
	// Cloudsearch: string, optional
	Cloudsearch terra.StringValue `hcl:"cloudsearch,attr"`
	// Cloudtrail: string, optional
	Cloudtrail terra.StringValue `hcl:"cloudtrail,attr"`
	// Cloudwatch: string, optional
	Cloudwatch terra.StringValue `hcl:"cloudwatch,attr"`
	// Cloudwatchevents: string, optional
	Cloudwatchevents terra.StringValue `hcl:"cloudwatchevents,attr"`
	// Cloudwatchevidently: string, optional
	Cloudwatchevidently terra.StringValue `hcl:"cloudwatchevidently,attr"`
	// Cloudwatchlog: string, optional
	Cloudwatchlog terra.StringValue `hcl:"cloudwatchlog,attr"`
	// Cloudwatchlogs: string, optional
	Cloudwatchlogs terra.StringValue `hcl:"cloudwatchlogs,attr"`
	// Cloudwatchobservabilityaccessmanager: string, optional
	Cloudwatchobservabilityaccessmanager terra.StringValue `hcl:"cloudwatchobservabilityaccessmanager,attr"`
	// Cloudwatchrum: string, optional
	Cloudwatchrum terra.StringValue `hcl:"cloudwatchrum,attr"`
	// Codeartifact: string, optional
	Codeartifact terra.StringValue `hcl:"codeartifact,attr"`
	// Codebuild: string, optional
	Codebuild terra.StringValue `hcl:"codebuild,attr"`
	// Codecatalyst: string, optional
	Codecatalyst terra.StringValue `hcl:"codecatalyst,attr"`
	// Codecommit: string, optional
	Codecommit terra.StringValue `hcl:"codecommit,attr"`
	// Codedeploy: string, optional
	Codedeploy terra.StringValue `hcl:"codedeploy,attr"`
	// Codeguruprofiler: string, optional
	Codeguruprofiler terra.StringValue `hcl:"codeguruprofiler,attr"`
	// Codegurureviewer: string, optional
	Codegurureviewer terra.StringValue `hcl:"codegurureviewer,attr"`
	// Codepipeline: string, optional
	Codepipeline terra.StringValue `hcl:"codepipeline,attr"`
	// Codestarconnections: string, optional
	Codestarconnections terra.StringValue `hcl:"codestarconnections,attr"`
	// Codestarnotifications: string, optional
	Codestarnotifications terra.StringValue `hcl:"codestarnotifications,attr"`
	// Cognitoidentity: string, optional
	Cognitoidentity terra.StringValue `hcl:"cognitoidentity,attr"`
	// Cognitoidentityprovider: string, optional
	Cognitoidentityprovider terra.StringValue `hcl:"cognitoidentityprovider,attr"`
	// Cognitoidp: string, optional
	Cognitoidp terra.StringValue `hcl:"cognitoidp,attr"`
	// Comprehend: string, optional
	Comprehend terra.StringValue `hcl:"comprehend,attr"`
	// Computeoptimizer: string, optional
	Computeoptimizer terra.StringValue `hcl:"computeoptimizer,attr"`
	// Config: string, optional
	Config terra.StringValue `hcl:"config,attr"`
	// Configservice: string, optional
	Configservice terra.StringValue `hcl:"configservice,attr"`
	// Connect: string, optional
	Connect terra.StringValue `hcl:"connect,attr"`
	// Connectcases: string, optional
	Connectcases terra.StringValue `hcl:"connectcases,attr"`
	// Controltower: string, optional
	Controltower terra.StringValue `hcl:"controltower,attr"`
	// Costandusagereportservice: string, optional
	Costandusagereportservice terra.StringValue `hcl:"costandusagereportservice,attr"`
	// Costexplorer: string, optional
	Costexplorer terra.StringValue `hcl:"costexplorer,attr"`
	// Costoptimizationhub: string, optional
	Costoptimizationhub terra.StringValue `hcl:"costoptimizationhub,attr"`
	// Cur: string, optional
	Cur terra.StringValue `hcl:"cur,attr"`
	// Customerprofiles: string, optional
	Customerprofiles terra.StringValue `hcl:"customerprofiles,attr"`
	// Databasemigration: string, optional
	Databasemigration terra.StringValue `hcl:"databasemigration,attr"`
	// Databasemigrationservice: string, optional
	Databasemigrationservice terra.StringValue `hcl:"databasemigrationservice,attr"`
	// Dataexchange: string, optional
	Dataexchange terra.StringValue `hcl:"dataexchange,attr"`
	// Datapipeline: string, optional
	Datapipeline terra.StringValue `hcl:"datapipeline,attr"`
	// Datasync: string, optional
	Datasync terra.StringValue `hcl:"datasync,attr"`
	// Datazone: string, optional
	Datazone terra.StringValue `hcl:"datazone,attr"`
	// Dax: string, optional
	Dax terra.StringValue `hcl:"dax,attr"`
	// Deploy: string, optional
	Deploy terra.StringValue `hcl:"deploy,attr"`
	// Detective: string, optional
	Detective terra.StringValue `hcl:"detective,attr"`
	// Devicefarm: string, optional
	Devicefarm terra.StringValue `hcl:"devicefarm,attr"`
	// Devopsguru: string, optional
	Devopsguru terra.StringValue `hcl:"devopsguru,attr"`
	// Directconnect: string, optional
	Directconnect terra.StringValue `hcl:"directconnect,attr"`
	// Directoryservice: string, optional
	Directoryservice terra.StringValue `hcl:"directoryservice,attr"`
	// Dlm: string, optional
	Dlm terra.StringValue `hcl:"dlm,attr"`
	// Dms: string, optional
	Dms terra.StringValue `hcl:"dms,attr"`
	// Docdb: string, optional
	Docdb terra.StringValue `hcl:"docdb,attr"`
	// Docdbelastic: string, optional
	Docdbelastic terra.StringValue `hcl:"docdbelastic,attr"`
	// Ds: string, optional
	Ds terra.StringValue `hcl:"ds,attr"`
	// Dynamodb: string, optional
	Dynamodb terra.StringValue `hcl:"dynamodb,attr"`
	// Ec2: string, optional
	Ec2 terra.StringValue `hcl:"ec2,attr"`
	// Ecr: string, optional
	Ecr terra.StringValue `hcl:"ecr,attr"`
	// Ecrpublic: string, optional
	Ecrpublic terra.StringValue `hcl:"ecrpublic,attr"`
	// Ecs: string, optional
	Ecs terra.StringValue `hcl:"ecs,attr"`
	// Efs: string, optional
	Efs terra.StringValue `hcl:"efs,attr"`
	// Eks: string, optional
	Eks terra.StringValue `hcl:"eks,attr"`
	// Elasticache: string, optional
	Elasticache terra.StringValue `hcl:"elasticache,attr"`
	// Elasticbeanstalk: string, optional
	Elasticbeanstalk terra.StringValue `hcl:"elasticbeanstalk,attr"`
	// Elasticloadbalancing: string, optional
	Elasticloadbalancing terra.StringValue `hcl:"elasticloadbalancing,attr"`
	// Elasticloadbalancingv2: string, optional
	Elasticloadbalancingv2 terra.StringValue `hcl:"elasticloadbalancingv2,attr"`
	// Elasticsearch: string, optional
	Elasticsearch terra.StringValue `hcl:"elasticsearch,attr"`
	// Elasticsearchservice: string, optional
	Elasticsearchservice terra.StringValue `hcl:"elasticsearchservice,attr"`
	// Elastictranscoder: string, optional
	Elastictranscoder terra.StringValue `hcl:"elastictranscoder,attr"`
	// Elb: string, optional
	Elb terra.StringValue `hcl:"elb,attr"`
	// Elbv2: string, optional
	Elbv2 terra.StringValue `hcl:"elbv2,attr"`
	// Emr: string, optional
	Emr terra.StringValue `hcl:"emr,attr"`
	// Emrcontainers: string, optional
	Emrcontainers terra.StringValue `hcl:"emrcontainers,attr"`
	// Emrserverless: string, optional
	Emrserverless terra.StringValue `hcl:"emrserverless,attr"`
	// Es: string, optional
	Es terra.StringValue `hcl:"es,attr"`
	// Eventbridge: string, optional
	Eventbridge terra.StringValue `hcl:"eventbridge,attr"`
	// Events: string, optional
	Events terra.StringValue `hcl:"events,attr"`
	// Evidently: string, optional
	Evidently terra.StringValue `hcl:"evidently,attr"`
	// Finspace: string, optional
	Finspace terra.StringValue `hcl:"finspace,attr"`
	// Firehose: string, optional
	Firehose terra.StringValue `hcl:"firehose,attr"`
	// Fis: string, optional
	Fis terra.StringValue `hcl:"fis,attr"`
	// Fms: string, optional
	Fms terra.StringValue `hcl:"fms,attr"`
	// Fsx: string, optional
	Fsx terra.StringValue `hcl:"fsx,attr"`
	// Gamelift: string, optional
	Gamelift terra.StringValue `hcl:"gamelift,attr"`
	// Glacier: string, optional
	Glacier terra.StringValue `hcl:"glacier,attr"`
	// Globalaccelerator: string, optional
	Globalaccelerator terra.StringValue `hcl:"globalaccelerator,attr"`
	// Glue: string, optional
	Glue terra.StringValue `hcl:"glue,attr"`
	// Grafana: string, optional
	Grafana terra.StringValue `hcl:"grafana,attr"`
	// Greengrass: string, optional
	Greengrass terra.StringValue `hcl:"greengrass,attr"`
	// Groundstation: string, optional
	Groundstation terra.StringValue `hcl:"groundstation,attr"`
	// Guardduty: string, optional
	Guardduty terra.StringValue `hcl:"guardduty,attr"`
	// Healthlake: string, optional
	Healthlake terra.StringValue `hcl:"healthlake,attr"`
	// Iam: string, optional
	Iam terra.StringValue `hcl:"iam,attr"`
	// Identitystore: string, optional
	Identitystore terra.StringValue `hcl:"identitystore,attr"`
	// Imagebuilder: string, optional
	Imagebuilder terra.StringValue `hcl:"imagebuilder,attr"`
	// Inspector: string, optional
	Inspector terra.StringValue `hcl:"inspector,attr"`
	// Inspector2: string, optional
	Inspector2 terra.StringValue `hcl:"inspector2,attr"`
	// Inspectorv2: string, optional
	Inspectorv2 terra.StringValue `hcl:"inspectorv2,attr"`
	// Internetmonitor: string, optional
	Internetmonitor terra.StringValue `hcl:"internetmonitor,attr"`
	// Iot: string, optional
	Iot terra.StringValue `hcl:"iot,attr"`
	// Iotanalytics: string, optional
	Iotanalytics terra.StringValue `hcl:"iotanalytics,attr"`
	// Iotevents: string, optional
	Iotevents terra.StringValue `hcl:"iotevents,attr"`
	// Ivs: string, optional
	Ivs terra.StringValue `hcl:"ivs,attr"`
	// Ivschat: string, optional
	Ivschat terra.StringValue `hcl:"ivschat,attr"`
	// Kafka: string, optional
	Kafka terra.StringValue `hcl:"kafka,attr"`
	// Kafkaconnect: string, optional
	Kafkaconnect terra.StringValue `hcl:"kafkaconnect,attr"`
	// Kendra: string, optional
	Kendra terra.StringValue `hcl:"kendra,attr"`
	// Keyspaces: string, optional
	Keyspaces terra.StringValue `hcl:"keyspaces,attr"`
	// Kinesis: string, optional
	Kinesis terra.StringValue `hcl:"kinesis,attr"`
	// Kinesisanalytics: string, optional
	Kinesisanalytics terra.StringValue `hcl:"kinesisanalytics,attr"`
	// Kinesisanalyticsv2: string, optional
	Kinesisanalyticsv2 terra.StringValue `hcl:"kinesisanalyticsv2,attr"`
	// Kinesisvideo: string, optional
	Kinesisvideo terra.StringValue `hcl:"kinesisvideo,attr"`
	// Kms: string, optional
	Kms terra.StringValue `hcl:"kms,attr"`
	// Lakeformation: string, optional
	Lakeformation terra.StringValue `hcl:"lakeformation,attr"`
	// Lambda: string, optional
	Lambda terra.StringValue `hcl:"lambda,attr"`
	// Launchwizard: string, optional
	Launchwizard terra.StringValue `hcl:"launchwizard,attr"`
	// Lex: string, optional
	Lex terra.StringValue `hcl:"lex,attr"`
	// Lexmodelbuilding: string, optional
	Lexmodelbuilding terra.StringValue `hcl:"lexmodelbuilding,attr"`
	// Lexmodelbuildingservice: string, optional
	Lexmodelbuildingservice terra.StringValue `hcl:"lexmodelbuildingservice,attr"`
	// Lexmodels: string, optional
	Lexmodels terra.StringValue `hcl:"lexmodels,attr"`
	// Lexmodelsv2: string, optional
	Lexmodelsv2 terra.StringValue `hcl:"lexmodelsv2,attr"`
	// Lexv2Models: string, optional
	Lexv2Models terra.StringValue `hcl:"lexv2models,attr"`
	// Licensemanager: string, optional
	Licensemanager terra.StringValue `hcl:"licensemanager,attr"`
	// Lightsail: string, optional
	Lightsail terra.StringValue `hcl:"lightsail,attr"`
	// Location: string, optional
	Location terra.StringValue `hcl:"location,attr"`
	// Locationservice: string, optional
	Locationservice terra.StringValue `hcl:"locationservice,attr"`
	// Logs: string, optional
	Logs terra.StringValue `hcl:"logs,attr"`
	// Lookoutmetrics: string, optional
	Lookoutmetrics terra.StringValue `hcl:"lookoutmetrics,attr"`
	// M2: string, optional
	M2 terra.StringValue `hcl:"m2,attr"`
	// Macie2: string, optional
	Macie2 terra.StringValue `hcl:"macie2,attr"`
	// Managedgrafana: string, optional
	Managedgrafana terra.StringValue `hcl:"managedgrafana,attr"`
	// Mediaconnect: string, optional
	Mediaconnect terra.StringValue `hcl:"mediaconnect,attr"`
	// Mediaconvert: string, optional
	Mediaconvert terra.StringValue `hcl:"mediaconvert,attr"`
	// Medialive: string, optional
	Medialive terra.StringValue `hcl:"medialive,attr"`
	// Mediapackage: string, optional
	Mediapackage terra.StringValue `hcl:"mediapackage,attr"`
	// Mediapackagev2: string, optional
	Mediapackagev2 terra.StringValue `hcl:"mediapackagev2,attr"`
	// Mediastore: string, optional
	Mediastore terra.StringValue `hcl:"mediastore,attr"`
	// Memorydb: string, optional
	Memorydb terra.StringValue `hcl:"memorydb,attr"`
	// Mq: string, optional
	Mq terra.StringValue `hcl:"mq,attr"`
	// Msk: string, optional
	Msk terra.StringValue `hcl:"msk,attr"`
	// Mwaa: string, optional
	Mwaa terra.StringValue `hcl:"mwaa,attr"`
	// Neptune: string, optional
	Neptune terra.StringValue `hcl:"neptune,attr"`
	// Networkfirewall: string, optional
	Networkfirewall terra.StringValue `hcl:"networkfirewall,attr"`
	// Networkmanager: string, optional
	Networkmanager terra.StringValue `hcl:"networkmanager,attr"`
	// Oam: string, optional
	Oam terra.StringValue `hcl:"oam,attr"`
	// Opensearch: string, optional
	Opensearch terra.StringValue `hcl:"opensearch,attr"`
	// Opensearchingestion: string, optional
	Opensearchingestion terra.StringValue `hcl:"opensearchingestion,attr"`
	// Opensearchserverless: string, optional
	Opensearchserverless terra.StringValue `hcl:"opensearchserverless,attr"`
	// Opensearchservice: string, optional
	Opensearchservice terra.StringValue `hcl:"opensearchservice,attr"`
	// Opsworks: string, optional
	Opsworks terra.StringValue `hcl:"opsworks,attr"`
	// Organizations: string, optional
	Organizations terra.StringValue `hcl:"organizations,attr"`
	// Osis: string, optional
	Osis terra.StringValue `hcl:"osis,attr"`
	// Outposts: string, optional
	Outposts terra.StringValue `hcl:"outposts,attr"`
	// Paymentcryptography: string, optional
	Paymentcryptography terra.StringValue `hcl:"paymentcryptography,attr"`
	// Pcaconnectorad: string, optional
	Pcaconnectorad terra.StringValue `hcl:"pcaconnectorad,attr"`
	// Pinpoint: string, optional
	Pinpoint terra.StringValue `hcl:"pinpoint,attr"`
	// Pipes: string, optional
	Pipes terra.StringValue `hcl:"pipes,attr"`
	// Polly: string, optional
	Polly terra.StringValue `hcl:"polly,attr"`
	// Pricing: string, optional
	Pricing terra.StringValue `hcl:"pricing,attr"`
	// Prometheus: string, optional
	Prometheus terra.StringValue `hcl:"prometheus,attr"`
	// Prometheusservice: string, optional
	Prometheusservice terra.StringValue `hcl:"prometheusservice,attr"`
	// Qbusiness: string, optional
	Qbusiness terra.StringValue `hcl:"qbusiness,attr"`
	// Qldb: string, optional
	Qldb terra.StringValue `hcl:"qldb,attr"`
	// Quicksight: string, optional
	Quicksight terra.StringValue `hcl:"quicksight,attr"`
	// Ram: string, optional
	Ram terra.StringValue `hcl:"ram,attr"`
	// Rbin: string, optional
	Rbin terra.StringValue `hcl:"rbin,attr"`
	// Rds: string, optional
	Rds terra.StringValue `hcl:"rds,attr"`
	// Recyclebin: string, optional
	Recyclebin terra.StringValue `hcl:"recyclebin,attr"`
	// Redshift: string, optional
	Redshift terra.StringValue `hcl:"redshift,attr"`
	// Redshiftdata: string, optional
	Redshiftdata terra.StringValue `hcl:"redshiftdata,attr"`
	// Redshiftdataapiservice: string, optional
	Redshiftdataapiservice terra.StringValue `hcl:"redshiftdataapiservice,attr"`
	// Redshiftserverless: string, optional
	Redshiftserverless terra.StringValue `hcl:"redshiftserverless,attr"`
	// Rekognition: string, optional
	Rekognition terra.StringValue `hcl:"rekognition,attr"`
	// Resourceexplorer2: string, optional
	Resourceexplorer2 terra.StringValue `hcl:"resourceexplorer2,attr"`
	// Resourcegroups: string, optional
	Resourcegroups terra.StringValue `hcl:"resourcegroups,attr"`
	// Resourcegroupstagging: string, optional
	Resourcegroupstagging terra.StringValue `hcl:"resourcegroupstagging,attr"`
	// Resourcegroupstaggingapi: string, optional
	Resourcegroupstaggingapi terra.StringValue `hcl:"resourcegroupstaggingapi,attr"`
	// Rolesanywhere: string, optional
	Rolesanywhere terra.StringValue `hcl:"rolesanywhere,attr"`
	// Route53: string, optional
	Route53 terra.StringValue `hcl:"route53,attr"`
	// Route53Domains: string, optional
	Route53Domains terra.StringValue `hcl:"route53domains,attr"`
	// Route53Recoverycontrolconfig: string, optional
	Route53Recoverycontrolconfig terra.StringValue `hcl:"route53recoverycontrolconfig,attr"`
	// Route53Recoveryreadiness: string, optional
	Route53Recoveryreadiness terra.StringValue `hcl:"route53recoveryreadiness,attr"`
	// Route53Resolver: string, optional
	Route53Resolver terra.StringValue `hcl:"route53resolver,attr"`
	// Rum: string, optional
	Rum terra.StringValue `hcl:"rum,attr"`
	// S3: string, optional
	S3 terra.StringValue `hcl:"s3,attr"`
	// S3Api: string, optional
	S3Api terra.StringValue `hcl:"s3api,attr"`
	// S3Control: string, optional
	S3Control terra.StringValue `hcl:"s3control,attr"`
	// S3Outposts: string, optional
	S3Outposts terra.StringValue `hcl:"s3outposts,attr"`
	// Sagemaker: string, optional
	Sagemaker terra.StringValue `hcl:"sagemaker,attr"`
	// Scheduler: string, optional
	Scheduler terra.StringValue `hcl:"scheduler,attr"`
	// Schemas: string, optional
	Schemas terra.StringValue `hcl:"schemas,attr"`
	// Sdb: string, optional
	Sdb terra.StringValue `hcl:"sdb,attr"`
	// Secretsmanager: string, optional
	Secretsmanager terra.StringValue `hcl:"secretsmanager,attr"`
	// Securityhub: string, optional
	Securityhub terra.StringValue `hcl:"securityhub,attr"`
	// Securitylake: string, optional
	Securitylake terra.StringValue `hcl:"securitylake,attr"`
	// Serverlessapplicationrepository: string, optional
	Serverlessapplicationrepository terra.StringValue `hcl:"serverlessapplicationrepository,attr"`
	// Serverlessapprepo: string, optional
	Serverlessapprepo terra.StringValue `hcl:"serverlessapprepo,attr"`
	// Serverlessrepo: string, optional
	Serverlessrepo terra.StringValue `hcl:"serverlessrepo,attr"`
	// Servicecatalog: string, optional
	Servicecatalog terra.StringValue `hcl:"servicecatalog,attr"`
	// Servicecatalogappregistry: string, optional
	Servicecatalogappregistry terra.StringValue `hcl:"servicecatalogappregistry,attr"`
	// Servicediscovery: string, optional
	Servicediscovery terra.StringValue `hcl:"servicediscovery,attr"`
	// Servicequotas: string, optional
	Servicequotas terra.StringValue `hcl:"servicequotas,attr"`
	// Ses: string, optional
	Ses terra.StringValue `hcl:"ses,attr"`
	// Sesv2: string, optional
	Sesv2 terra.StringValue `hcl:"sesv2,attr"`
	// Sfn: string, optional
	Sfn terra.StringValue `hcl:"sfn,attr"`
	// Shield: string, optional
	Shield terra.StringValue `hcl:"shield,attr"`
	// Signer: string, optional
	Signer terra.StringValue `hcl:"signer,attr"`
	// Simpledb: string, optional
	Simpledb terra.StringValue `hcl:"simpledb,attr"`
	// Sns: string, optional
	Sns terra.StringValue `hcl:"sns,attr"`
	// Sqs: string, optional
	Sqs terra.StringValue `hcl:"sqs,attr"`
	// Ssm: string, optional
	Ssm terra.StringValue `hcl:"ssm,attr"`
	// Ssmcontacts: string, optional
	Ssmcontacts terra.StringValue `hcl:"ssmcontacts,attr"`
	// Ssmincidents: string, optional
	Ssmincidents terra.StringValue `hcl:"ssmincidents,attr"`
	// Ssmsap: string, optional
	Ssmsap terra.StringValue `hcl:"ssmsap,attr"`
	// Sso: string, optional
	Sso terra.StringValue `hcl:"sso,attr"`
	// Ssoadmin: string, optional
	Ssoadmin terra.StringValue `hcl:"ssoadmin,attr"`
	// Stepfunctions: string, optional
	Stepfunctions terra.StringValue `hcl:"stepfunctions,attr"`
	// Storagegateway: string, optional
	Storagegateway terra.StringValue `hcl:"storagegateway,attr"`
	// Sts: string, optional
	Sts terra.StringValue `hcl:"sts,attr"`
	// Swf: string, optional
	Swf terra.StringValue `hcl:"swf,attr"`
	// Synthetics: string, optional
	Synthetics terra.StringValue `hcl:"synthetics,attr"`
	// Timestreamwrite: string, optional
	Timestreamwrite terra.StringValue `hcl:"timestreamwrite,attr"`
	// Transcribe: string, optional
	Transcribe terra.StringValue `hcl:"transcribe,attr"`
	// Transcribeservice: string, optional
	Transcribeservice terra.StringValue `hcl:"transcribeservice,attr"`
	// Transfer: string, optional
	Transfer terra.StringValue `hcl:"transfer,attr"`
	// Verifiedpermissions: string, optional
	Verifiedpermissions terra.StringValue `hcl:"verifiedpermissions,attr"`
	// Vpclattice: string, optional
	Vpclattice terra.StringValue `hcl:"vpclattice,attr"`
	// Waf: string, optional
	Waf terra.StringValue `hcl:"waf,attr"`
	// Wafregional: string, optional
	Wafregional terra.StringValue `hcl:"wafregional,attr"`
	// Wafv2: string, optional
	Wafv2 terra.StringValue `hcl:"wafv2,attr"`
	// Wellarchitected: string, optional
	Wellarchitected terra.StringValue `hcl:"wellarchitected,attr"`
	// Worklink: string, optional
	Worklink terra.StringValue `hcl:"worklink,attr"`
	// Workspaces: string, optional
	Workspaces terra.StringValue `hcl:"workspaces,attr"`
	// Xray: string, optional
	Xray terra.StringValue `hcl:"xray,attr"`
}

type IgnoreTags struct {
	// KeyPrefixes: set of string, optional
	KeyPrefixes terra.SetValue[terra.StringValue] `hcl:"key_prefixes,attr"`
	// Keys: set of string, optional
	Keys terra.SetValue[terra.StringValue] `hcl:"keys,attr"`
}

type AssumeRoleAttributes struct {
	ref terra.Reference
}

func (ar AssumeRoleAttributes) InternalRef() (terra.Reference, error) {
	return ar.ref, nil
}

func (ar AssumeRoleAttributes) InternalWithRef(ref terra.Reference) AssumeRoleAttributes {
	return AssumeRoleAttributes{ref: ref}
}

func (ar AssumeRoleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ar.ref.InternalTokens()
}

func (ar AssumeRoleAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("duration"))
}

func (ar AssumeRoleAttributes) ExternalId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("external_id"))
}

func (ar AssumeRoleAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("policy"))
}

func (ar AssumeRoleAttributes) PolicyArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ar.ref.Append("policy_arns"))
}

func (ar AssumeRoleAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("role_arn"))
}

func (ar AssumeRoleAttributes) SessionName() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("session_name"))
}

func (ar AssumeRoleAttributes) SourceIdentity() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("source_identity"))
}

func (ar AssumeRoleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ar.ref.Append("tags"))
}

func (ar AssumeRoleAttributes) TransitiveTagKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ar.ref.Append("transitive_tag_keys"))
}

type AssumeRoleWithWebIdentityAttributes struct {
	ref terra.Reference
}

func (arwwi AssumeRoleWithWebIdentityAttributes) InternalRef() (terra.Reference, error) {
	return arwwi.ref, nil
}

func (arwwi AssumeRoleWithWebIdentityAttributes) InternalWithRef(ref terra.Reference) AssumeRoleWithWebIdentityAttributes {
	return AssumeRoleWithWebIdentityAttributes{ref: ref}
}

func (arwwi AssumeRoleWithWebIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return arwwi.ref.InternalTokens()
}

func (arwwi AssumeRoleWithWebIdentityAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(arwwi.ref.Append("duration"))
}

func (arwwi AssumeRoleWithWebIdentityAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(arwwi.ref.Append("policy"))
}

func (arwwi AssumeRoleWithWebIdentityAttributes) PolicyArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arwwi.ref.Append("policy_arns"))
}

func (arwwi AssumeRoleWithWebIdentityAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(arwwi.ref.Append("role_arn"))
}

func (arwwi AssumeRoleWithWebIdentityAttributes) SessionName() terra.StringValue {
	return terra.ReferenceAsString(arwwi.ref.Append("session_name"))
}

func (arwwi AssumeRoleWithWebIdentityAttributes) WebIdentityToken() terra.StringValue {
	return terra.ReferenceAsString(arwwi.ref.Append("web_identity_token"))
}

func (arwwi AssumeRoleWithWebIdentityAttributes) WebIdentityTokenFile() terra.StringValue {
	return terra.ReferenceAsString(arwwi.ref.Append("web_identity_token_file"))
}

type DefaultTagsAttributes struct {
	ref terra.Reference
}

func (dt DefaultTagsAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt DefaultTagsAttributes) InternalWithRef(ref terra.Reference) DefaultTagsAttributes {
	return DefaultTagsAttributes{ref: ref}
}

func (dt DefaultTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt DefaultTagsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dt.ref.Append("tags"))
}

type EndpointsAttributes struct {
	ref terra.Reference
}

func (e EndpointsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e EndpointsAttributes) InternalWithRef(ref terra.Reference) EndpointsAttributes {
	return EndpointsAttributes{ref: ref}
}

func (e EndpointsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e EndpointsAttributes) Accessanalyzer() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("accessanalyzer"))
}

func (e EndpointsAttributes) Account() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("account"))
}

func (e EndpointsAttributes) Acm() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("acm"))
}

func (e EndpointsAttributes) Acmpca() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("acmpca"))
}

func (e EndpointsAttributes) Amg() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("amg"))
}

func (e EndpointsAttributes) Amp() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("amp"))
}

func (e EndpointsAttributes) Amplify() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("amplify"))
}

func (e EndpointsAttributes) Apigateway() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("apigateway"))
}

func (e EndpointsAttributes) Apigatewayv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("apigatewayv2"))
}

func (e EndpointsAttributes) Appautoscaling() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appautoscaling"))
}

func (e EndpointsAttributes) Appconfig() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appconfig"))
}

func (e EndpointsAttributes) Appfabric() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appfabric"))
}

func (e EndpointsAttributes) Appflow() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appflow"))
}

func (e EndpointsAttributes) Appintegrations() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appintegrations"))
}

func (e EndpointsAttributes) Appintegrationsservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appintegrationsservice"))
}

func (e EndpointsAttributes) Applicationautoscaling() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("applicationautoscaling"))
}

func (e EndpointsAttributes) Applicationinsights() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("applicationinsights"))
}

func (e EndpointsAttributes) Appmesh() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appmesh"))
}

func (e EndpointsAttributes) Appregistry() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appregistry"))
}

func (e EndpointsAttributes) Apprunner() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("apprunner"))
}

func (e EndpointsAttributes) Appstream() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appstream"))
}

func (e EndpointsAttributes) Appsync() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appsync"))
}

func (e EndpointsAttributes) Athena() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("athena"))
}

func (e EndpointsAttributes) Auditmanager() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("auditmanager"))
}

func (e EndpointsAttributes) Autoscaling() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("autoscaling"))
}

func (e EndpointsAttributes) Autoscalingplans() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("autoscalingplans"))
}

func (e EndpointsAttributes) Backup() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("backup"))
}

func (e EndpointsAttributes) Batch() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("batch"))
}

func (e EndpointsAttributes) Beanstalk() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("beanstalk"))
}

func (e EndpointsAttributes) Bedrock() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("bedrock"))
}

func (e EndpointsAttributes) Bedrockagent() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("bedrockagent"))
}

func (e EndpointsAttributes) Budgets() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("budgets"))
}

func (e EndpointsAttributes) Ce() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ce"))
}

func (e EndpointsAttributes) Chime() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("chime"))
}

func (e EndpointsAttributes) Chimesdkmediapipelines() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("chimesdkmediapipelines"))
}

func (e EndpointsAttributes) Chimesdkvoice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("chimesdkvoice"))
}

func (e EndpointsAttributes) Cleanrooms() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cleanrooms"))
}

func (e EndpointsAttributes) Cloud9() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloud9"))
}

func (e EndpointsAttributes) Cloudcontrol() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudcontrol"))
}

func (e EndpointsAttributes) Cloudcontrolapi() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudcontrolapi"))
}

func (e EndpointsAttributes) Cloudformation() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudformation"))
}

func (e EndpointsAttributes) Cloudfront() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudfront"))
}

func (e EndpointsAttributes) Cloudfrontkeyvaluestore() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudfrontkeyvaluestore"))
}

func (e EndpointsAttributes) Cloudhsm() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudhsm"))
}

func (e EndpointsAttributes) Cloudhsmv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudhsmv2"))
}

func (e EndpointsAttributes) Cloudsearch() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudsearch"))
}

func (e EndpointsAttributes) Cloudtrail() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudtrail"))
}

func (e EndpointsAttributes) Cloudwatch() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatch"))
}

func (e EndpointsAttributes) Cloudwatchevents() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatchevents"))
}

func (e EndpointsAttributes) Cloudwatchevidently() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatchevidently"))
}

func (e EndpointsAttributes) Cloudwatchlog() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatchlog"))
}

func (e EndpointsAttributes) Cloudwatchlogs() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatchlogs"))
}

func (e EndpointsAttributes) Cloudwatchobservabilityaccessmanager() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatchobservabilityaccessmanager"))
}

func (e EndpointsAttributes) Cloudwatchrum() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatchrum"))
}

func (e EndpointsAttributes) Codeartifact() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codeartifact"))
}

func (e EndpointsAttributes) Codebuild() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codebuild"))
}

func (e EndpointsAttributes) Codecatalyst() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codecatalyst"))
}

func (e EndpointsAttributes) Codecommit() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codecommit"))
}

func (e EndpointsAttributes) Codedeploy() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codedeploy"))
}

func (e EndpointsAttributes) Codeguruprofiler() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codeguruprofiler"))
}

func (e EndpointsAttributes) Codegurureviewer() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codegurureviewer"))
}

func (e EndpointsAttributes) Codepipeline() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codepipeline"))
}

func (e EndpointsAttributes) Codestarconnections() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codestarconnections"))
}

func (e EndpointsAttributes) Codestarnotifications() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codestarnotifications"))
}

func (e EndpointsAttributes) Cognitoidentity() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cognitoidentity"))
}

func (e EndpointsAttributes) Cognitoidentityprovider() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cognitoidentityprovider"))
}

func (e EndpointsAttributes) Cognitoidp() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cognitoidp"))
}

func (e EndpointsAttributes) Comprehend() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("comprehend"))
}

func (e EndpointsAttributes) Computeoptimizer() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("computeoptimizer"))
}

func (e EndpointsAttributes) Config() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("config"))
}

func (e EndpointsAttributes) Configservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("configservice"))
}

func (e EndpointsAttributes) Connect() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("connect"))
}

func (e EndpointsAttributes) Connectcases() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("connectcases"))
}

func (e EndpointsAttributes) Controltower() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("controltower"))
}

func (e EndpointsAttributes) Costandusagereportservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("costandusagereportservice"))
}

func (e EndpointsAttributes) Costexplorer() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("costexplorer"))
}

func (e EndpointsAttributes) Costoptimizationhub() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("costoptimizationhub"))
}

func (e EndpointsAttributes) Cur() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cur"))
}

func (e EndpointsAttributes) Customerprofiles() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("customerprofiles"))
}

func (e EndpointsAttributes) Databasemigration() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("databasemigration"))
}

func (e EndpointsAttributes) Databasemigrationservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("databasemigrationservice"))
}

func (e EndpointsAttributes) Dataexchange() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("dataexchange"))
}

func (e EndpointsAttributes) Datapipeline() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("datapipeline"))
}

func (e EndpointsAttributes) Datasync() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("datasync"))
}

func (e EndpointsAttributes) Datazone() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("datazone"))
}

func (e EndpointsAttributes) Dax() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("dax"))
}

func (e EndpointsAttributes) Deploy() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("deploy"))
}

func (e EndpointsAttributes) Detective() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("detective"))
}

func (e EndpointsAttributes) Devicefarm() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("devicefarm"))
}

func (e EndpointsAttributes) Devopsguru() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("devopsguru"))
}

func (e EndpointsAttributes) Directconnect() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("directconnect"))
}

func (e EndpointsAttributes) Directoryservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("directoryservice"))
}

func (e EndpointsAttributes) Dlm() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("dlm"))
}

func (e EndpointsAttributes) Dms() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("dms"))
}

func (e EndpointsAttributes) Docdb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("docdb"))
}

func (e EndpointsAttributes) Docdbelastic() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("docdbelastic"))
}

func (e EndpointsAttributes) Ds() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ds"))
}

func (e EndpointsAttributes) Dynamodb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("dynamodb"))
}

func (e EndpointsAttributes) Ec2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ec2"))
}

func (e EndpointsAttributes) Ecr() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ecr"))
}

func (e EndpointsAttributes) Ecrpublic() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ecrpublic"))
}

func (e EndpointsAttributes) Ecs() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ecs"))
}

func (e EndpointsAttributes) Efs() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("efs"))
}

func (e EndpointsAttributes) Eks() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("eks"))
}

func (e EndpointsAttributes) Elasticache() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elasticache"))
}

func (e EndpointsAttributes) Elasticbeanstalk() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elasticbeanstalk"))
}

func (e EndpointsAttributes) Elasticloadbalancing() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elasticloadbalancing"))
}

func (e EndpointsAttributes) Elasticloadbalancingv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elasticloadbalancingv2"))
}

func (e EndpointsAttributes) Elasticsearch() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elasticsearch"))
}

func (e EndpointsAttributes) Elasticsearchservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elasticsearchservice"))
}

func (e EndpointsAttributes) Elastictranscoder() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elastictranscoder"))
}

func (e EndpointsAttributes) Elb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elb"))
}

func (e EndpointsAttributes) Elbv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elbv2"))
}

func (e EndpointsAttributes) Emr() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("emr"))
}

func (e EndpointsAttributes) Emrcontainers() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("emrcontainers"))
}

func (e EndpointsAttributes) Emrserverless() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("emrserverless"))
}

func (e EndpointsAttributes) Es() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("es"))
}

func (e EndpointsAttributes) Eventbridge() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("eventbridge"))
}

func (e EndpointsAttributes) Events() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("events"))
}

func (e EndpointsAttributes) Evidently() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("evidently"))
}

func (e EndpointsAttributes) Finspace() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("finspace"))
}

func (e EndpointsAttributes) Firehose() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("firehose"))
}

func (e EndpointsAttributes) Fis() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("fis"))
}

func (e EndpointsAttributes) Fms() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("fms"))
}

func (e EndpointsAttributes) Fsx() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("fsx"))
}

func (e EndpointsAttributes) Gamelift() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("gamelift"))
}

func (e EndpointsAttributes) Glacier() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("glacier"))
}

func (e EndpointsAttributes) Globalaccelerator() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("globalaccelerator"))
}

func (e EndpointsAttributes) Glue() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("glue"))
}

func (e EndpointsAttributes) Grafana() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("grafana"))
}

func (e EndpointsAttributes) Greengrass() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("greengrass"))
}

func (e EndpointsAttributes) Groundstation() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("groundstation"))
}

func (e EndpointsAttributes) Guardduty() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("guardduty"))
}

func (e EndpointsAttributes) Healthlake() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("healthlake"))
}

func (e EndpointsAttributes) Iam() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("iam"))
}

func (e EndpointsAttributes) Identitystore() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("identitystore"))
}

func (e EndpointsAttributes) Imagebuilder() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("imagebuilder"))
}

func (e EndpointsAttributes) Inspector() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("inspector"))
}

func (e EndpointsAttributes) Inspector2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("inspector2"))
}

func (e EndpointsAttributes) Inspectorv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("inspectorv2"))
}

func (e EndpointsAttributes) Internetmonitor() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("internetmonitor"))
}

func (e EndpointsAttributes) Iot() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("iot"))
}

func (e EndpointsAttributes) Iotanalytics() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("iotanalytics"))
}

func (e EndpointsAttributes) Iotevents() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("iotevents"))
}

func (e EndpointsAttributes) Ivs() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ivs"))
}

func (e EndpointsAttributes) Ivschat() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ivschat"))
}

func (e EndpointsAttributes) Kafka() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kafka"))
}

func (e EndpointsAttributes) Kafkaconnect() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kafkaconnect"))
}

func (e EndpointsAttributes) Kendra() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kendra"))
}

func (e EndpointsAttributes) Keyspaces() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("keyspaces"))
}

func (e EndpointsAttributes) Kinesis() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kinesis"))
}

func (e EndpointsAttributes) Kinesisanalytics() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kinesisanalytics"))
}

func (e EndpointsAttributes) Kinesisanalyticsv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kinesisanalyticsv2"))
}

func (e EndpointsAttributes) Kinesisvideo() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kinesisvideo"))
}

func (e EndpointsAttributes) Kms() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kms"))
}

func (e EndpointsAttributes) Lakeformation() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lakeformation"))
}

func (e EndpointsAttributes) Lambda() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lambda"))
}

func (e EndpointsAttributes) Launchwizard() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("launchwizard"))
}

func (e EndpointsAttributes) Lex() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lex"))
}

func (e EndpointsAttributes) Lexmodelbuilding() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lexmodelbuilding"))
}

func (e EndpointsAttributes) Lexmodelbuildingservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lexmodelbuildingservice"))
}

func (e EndpointsAttributes) Lexmodels() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lexmodels"))
}

func (e EndpointsAttributes) Lexmodelsv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lexmodelsv2"))
}

func (e EndpointsAttributes) Lexv2Models() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lexv2models"))
}

func (e EndpointsAttributes) Licensemanager() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("licensemanager"))
}

func (e EndpointsAttributes) Lightsail() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lightsail"))
}

func (e EndpointsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("location"))
}

func (e EndpointsAttributes) Locationservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("locationservice"))
}

func (e EndpointsAttributes) Logs() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("logs"))
}

func (e EndpointsAttributes) Lookoutmetrics() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lookoutmetrics"))
}

func (e EndpointsAttributes) M2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("m2"))
}

func (e EndpointsAttributes) Macie2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("macie2"))
}

func (e EndpointsAttributes) Managedgrafana() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("managedgrafana"))
}

func (e EndpointsAttributes) Mediaconnect() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mediaconnect"))
}

func (e EndpointsAttributes) Mediaconvert() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mediaconvert"))
}

func (e EndpointsAttributes) Medialive() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("medialive"))
}

func (e EndpointsAttributes) Mediapackage() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mediapackage"))
}

func (e EndpointsAttributes) Mediapackagev2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mediapackagev2"))
}

func (e EndpointsAttributes) Mediastore() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mediastore"))
}

func (e EndpointsAttributes) Memorydb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("memorydb"))
}

func (e EndpointsAttributes) Mq() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mq"))
}

func (e EndpointsAttributes) Msk() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("msk"))
}

func (e EndpointsAttributes) Mwaa() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mwaa"))
}

func (e EndpointsAttributes) Neptune() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("neptune"))
}

func (e EndpointsAttributes) Networkfirewall() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("networkfirewall"))
}

func (e EndpointsAttributes) Networkmanager() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("networkmanager"))
}

func (e EndpointsAttributes) Oam() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("oam"))
}

func (e EndpointsAttributes) Opensearch() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("opensearch"))
}

func (e EndpointsAttributes) Opensearchingestion() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("opensearchingestion"))
}

func (e EndpointsAttributes) Opensearchserverless() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("opensearchserverless"))
}

func (e EndpointsAttributes) Opensearchservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("opensearchservice"))
}

func (e EndpointsAttributes) Opsworks() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("opsworks"))
}

func (e EndpointsAttributes) Organizations() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("organizations"))
}

func (e EndpointsAttributes) Osis() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("osis"))
}

func (e EndpointsAttributes) Outposts() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("outposts"))
}

func (e EndpointsAttributes) Paymentcryptography() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("paymentcryptography"))
}

func (e EndpointsAttributes) Pcaconnectorad() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("pcaconnectorad"))
}

func (e EndpointsAttributes) Pinpoint() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("pinpoint"))
}

func (e EndpointsAttributes) Pipes() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("pipes"))
}

func (e EndpointsAttributes) Polly() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("polly"))
}

func (e EndpointsAttributes) Pricing() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("pricing"))
}

func (e EndpointsAttributes) Prometheus() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("prometheus"))
}

func (e EndpointsAttributes) Prometheusservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("prometheusservice"))
}

func (e EndpointsAttributes) Qbusiness() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("qbusiness"))
}

func (e EndpointsAttributes) Qldb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("qldb"))
}

func (e EndpointsAttributes) Quicksight() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("quicksight"))
}

func (e EndpointsAttributes) Ram() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ram"))
}

func (e EndpointsAttributes) Rbin() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("rbin"))
}

func (e EndpointsAttributes) Rds() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("rds"))
}

func (e EndpointsAttributes) Recyclebin() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("recyclebin"))
}

func (e EndpointsAttributes) Redshift() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("redshift"))
}

func (e EndpointsAttributes) Redshiftdata() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("redshiftdata"))
}

func (e EndpointsAttributes) Redshiftdataapiservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("redshiftdataapiservice"))
}

func (e EndpointsAttributes) Redshiftserverless() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("redshiftserverless"))
}

func (e EndpointsAttributes) Rekognition() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("rekognition"))
}

func (e EndpointsAttributes) Resourceexplorer2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("resourceexplorer2"))
}

func (e EndpointsAttributes) Resourcegroups() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("resourcegroups"))
}

func (e EndpointsAttributes) Resourcegroupstagging() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("resourcegroupstagging"))
}

func (e EndpointsAttributes) Resourcegroupstaggingapi() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("resourcegroupstaggingapi"))
}

func (e EndpointsAttributes) Rolesanywhere() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("rolesanywhere"))
}

func (e EndpointsAttributes) Route53() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("route53"))
}

func (e EndpointsAttributes) Route53Domains() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("route53domains"))
}

func (e EndpointsAttributes) Route53Recoverycontrolconfig() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("route53recoverycontrolconfig"))
}

func (e EndpointsAttributes) Route53Recoveryreadiness() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("route53recoveryreadiness"))
}

func (e EndpointsAttributes) Route53Resolver() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("route53resolver"))
}

func (e EndpointsAttributes) Rum() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("rum"))
}

func (e EndpointsAttributes) S3() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("s3"))
}

func (e EndpointsAttributes) S3Api() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("s3api"))
}

func (e EndpointsAttributes) S3Control() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("s3control"))
}

func (e EndpointsAttributes) S3Outposts() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("s3outposts"))
}

func (e EndpointsAttributes) Sagemaker() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sagemaker"))
}

func (e EndpointsAttributes) Scheduler() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("scheduler"))
}

func (e EndpointsAttributes) Schemas() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("schemas"))
}

func (e EndpointsAttributes) Sdb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sdb"))
}

func (e EndpointsAttributes) Secretsmanager() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("secretsmanager"))
}

func (e EndpointsAttributes) Securityhub() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("securityhub"))
}

func (e EndpointsAttributes) Securitylake() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("securitylake"))
}

func (e EndpointsAttributes) Serverlessapplicationrepository() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("serverlessapplicationrepository"))
}

func (e EndpointsAttributes) Serverlessapprepo() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("serverlessapprepo"))
}

func (e EndpointsAttributes) Serverlessrepo() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("serverlessrepo"))
}

func (e EndpointsAttributes) Servicecatalog() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("servicecatalog"))
}

func (e EndpointsAttributes) Servicecatalogappregistry() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("servicecatalogappregistry"))
}

func (e EndpointsAttributes) Servicediscovery() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("servicediscovery"))
}

func (e EndpointsAttributes) Servicequotas() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("servicequotas"))
}

func (e EndpointsAttributes) Ses() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ses"))
}

func (e EndpointsAttributes) Sesv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sesv2"))
}

func (e EndpointsAttributes) Sfn() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sfn"))
}

func (e EndpointsAttributes) Shield() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("shield"))
}

func (e EndpointsAttributes) Signer() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("signer"))
}

func (e EndpointsAttributes) Simpledb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("simpledb"))
}

func (e EndpointsAttributes) Sns() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sns"))
}

func (e EndpointsAttributes) Sqs() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sqs"))
}

func (e EndpointsAttributes) Ssm() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ssm"))
}

func (e EndpointsAttributes) Ssmcontacts() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ssmcontacts"))
}

func (e EndpointsAttributes) Ssmincidents() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ssmincidents"))
}

func (e EndpointsAttributes) Ssmsap() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ssmsap"))
}

func (e EndpointsAttributes) Sso() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sso"))
}

func (e EndpointsAttributes) Ssoadmin() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ssoadmin"))
}

func (e EndpointsAttributes) Stepfunctions() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("stepfunctions"))
}

func (e EndpointsAttributes) Storagegateway() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("storagegateway"))
}

func (e EndpointsAttributes) Sts() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sts"))
}

func (e EndpointsAttributes) Swf() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("swf"))
}

func (e EndpointsAttributes) Synthetics() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("synthetics"))
}

func (e EndpointsAttributes) Timestreamwrite() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("timestreamwrite"))
}

func (e EndpointsAttributes) Transcribe() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("transcribe"))
}

func (e EndpointsAttributes) Transcribeservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("transcribeservice"))
}

func (e EndpointsAttributes) Transfer() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("transfer"))
}

func (e EndpointsAttributes) Verifiedpermissions() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("verifiedpermissions"))
}

func (e EndpointsAttributes) Vpclattice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("vpclattice"))
}

func (e EndpointsAttributes) Waf() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("waf"))
}

func (e EndpointsAttributes) Wafregional() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("wafregional"))
}

func (e EndpointsAttributes) Wafv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("wafv2"))
}

func (e EndpointsAttributes) Wellarchitected() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("wellarchitected"))
}

func (e EndpointsAttributes) Worklink() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("worklink"))
}

func (e EndpointsAttributes) Workspaces() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("workspaces"))
}

func (e EndpointsAttributes) Xray() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("xray"))
}

type IgnoreTagsAttributes struct {
	ref terra.Reference
}

func (it IgnoreTagsAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it IgnoreTagsAttributes) InternalWithRef(ref terra.Reference) IgnoreTagsAttributes {
	return IgnoreTagsAttributes{ref: ref}
}

func (it IgnoreTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it IgnoreTagsAttributes) KeyPrefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](it.ref.Append("key_prefixes"))
}

func (it IgnoreTagsAttributes) Keys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](it.ref.Append("keys"))
}

type AssumeRoleState struct {
	Duration          string            `json:"duration"`
	ExternalId        string            `json:"external_id"`
	Policy            string            `json:"policy"`
	PolicyArns        []string          `json:"policy_arns"`
	RoleArn           string            `json:"role_arn"`
	SessionName       string            `json:"session_name"`
	SourceIdentity    string            `json:"source_identity"`
	Tags              map[string]string `json:"tags"`
	TransitiveTagKeys []string          `json:"transitive_tag_keys"`
}

type AssumeRoleWithWebIdentityState struct {
	Duration             string   `json:"duration"`
	Policy               string   `json:"policy"`
	PolicyArns           []string `json:"policy_arns"`
	RoleArn              string   `json:"role_arn"`
	SessionName          string   `json:"session_name"`
	WebIdentityToken     string   `json:"web_identity_token"`
	WebIdentityTokenFile string   `json:"web_identity_token_file"`
}

type DefaultTagsState struct {
	Tags map[string]string `json:"tags"`
}

type EndpointsState struct {
	Accessanalyzer                       string `json:"accessanalyzer"`
	Account                              string `json:"account"`
	Acm                                  string `json:"acm"`
	Acmpca                               string `json:"acmpca"`
	Amg                                  string `json:"amg"`
	Amp                                  string `json:"amp"`
	Amplify                              string `json:"amplify"`
	Apigateway                           string `json:"apigateway"`
	Apigatewayv2                         string `json:"apigatewayv2"`
	Appautoscaling                       string `json:"appautoscaling"`
	Appconfig                            string `json:"appconfig"`
	Appfabric                            string `json:"appfabric"`
	Appflow                              string `json:"appflow"`
	Appintegrations                      string `json:"appintegrations"`
	Appintegrationsservice               string `json:"appintegrationsservice"`
	Applicationautoscaling               string `json:"applicationautoscaling"`
	Applicationinsights                  string `json:"applicationinsights"`
	Appmesh                              string `json:"appmesh"`
	Appregistry                          string `json:"appregistry"`
	Apprunner                            string `json:"apprunner"`
	Appstream                            string `json:"appstream"`
	Appsync                              string `json:"appsync"`
	Athena                               string `json:"athena"`
	Auditmanager                         string `json:"auditmanager"`
	Autoscaling                          string `json:"autoscaling"`
	Autoscalingplans                     string `json:"autoscalingplans"`
	Backup                               string `json:"backup"`
	Batch                                string `json:"batch"`
	Beanstalk                            string `json:"beanstalk"`
	Bedrock                              string `json:"bedrock"`
	Bedrockagent                         string `json:"bedrockagent"`
	Budgets                              string `json:"budgets"`
	Ce                                   string `json:"ce"`
	Chime                                string `json:"chime"`
	Chimesdkmediapipelines               string `json:"chimesdkmediapipelines"`
	Chimesdkvoice                        string `json:"chimesdkvoice"`
	Cleanrooms                           string `json:"cleanrooms"`
	Cloud9                               string `json:"cloud9"`
	Cloudcontrol                         string `json:"cloudcontrol"`
	Cloudcontrolapi                      string `json:"cloudcontrolapi"`
	Cloudformation                       string `json:"cloudformation"`
	Cloudfront                           string `json:"cloudfront"`
	Cloudfrontkeyvaluestore              string `json:"cloudfrontkeyvaluestore"`
	Cloudhsm                             string `json:"cloudhsm"`
	Cloudhsmv2                           string `json:"cloudhsmv2"`
	Cloudsearch                          string `json:"cloudsearch"`
	Cloudtrail                           string `json:"cloudtrail"`
	Cloudwatch                           string `json:"cloudwatch"`
	Cloudwatchevents                     string `json:"cloudwatchevents"`
	Cloudwatchevidently                  string `json:"cloudwatchevidently"`
	Cloudwatchlog                        string `json:"cloudwatchlog"`
	Cloudwatchlogs                       string `json:"cloudwatchlogs"`
	Cloudwatchobservabilityaccessmanager string `json:"cloudwatchobservabilityaccessmanager"`
	Cloudwatchrum                        string `json:"cloudwatchrum"`
	Codeartifact                         string `json:"codeartifact"`
	Codebuild                            string `json:"codebuild"`
	Codecatalyst                         string `json:"codecatalyst"`
	Codecommit                           string `json:"codecommit"`
	Codedeploy                           string `json:"codedeploy"`
	Codeguruprofiler                     string `json:"codeguruprofiler"`
	Codegurureviewer                     string `json:"codegurureviewer"`
	Codepipeline                         string `json:"codepipeline"`
	Codestarconnections                  string `json:"codestarconnections"`
	Codestarnotifications                string `json:"codestarnotifications"`
	Cognitoidentity                      string `json:"cognitoidentity"`
	Cognitoidentityprovider              string `json:"cognitoidentityprovider"`
	Cognitoidp                           string `json:"cognitoidp"`
	Comprehend                           string `json:"comprehend"`
	Computeoptimizer                     string `json:"computeoptimizer"`
	Config                               string `json:"config"`
	Configservice                        string `json:"configservice"`
	Connect                              string `json:"connect"`
	Connectcases                         string `json:"connectcases"`
	Controltower                         string `json:"controltower"`
	Costandusagereportservice            string `json:"costandusagereportservice"`
	Costexplorer                         string `json:"costexplorer"`
	Costoptimizationhub                  string `json:"costoptimizationhub"`
	Cur                                  string `json:"cur"`
	Customerprofiles                     string `json:"customerprofiles"`
	Databasemigration                    string `json:"databasemigration"`
	Databasemigrationservice             string `json:"databasemigrationservice"`
	Dataexchange                         string `json:"dataexchange"`
	Datapipeline                         string `json:"datapipeline"`
	Datasync                             string `json:"datasync"`
	Datazone                             string `json:"datazone"`
	Dax                                  string `json:"dax"`
	Deploy                               string `json:"deploy"`
	Detective                            string `json:"detective"`
	Devicefarm                           string `json:"devicefarm"`
	Devopsguru                           string `json:"devopsguru"`
	Directconnect                        string `json:"directconnect"`
	Directoryservice                     string `json:"directoryservice"`
	Dlm                                  string `json:"dlm"`
	Dms                                  string `json:"dms"`
	Docdb                                string `json:"docdb"`
	Docdbelastic                         string `json:"docdbelastic"`
	Ds                                   string `json:"ds"`
	Dynamodb                             string `json:"dynamodb"`
	Ec2                                  string `json:"ec2"`
	Ecr                                  string `json:"ecr"`
	Ecrpublic                            string `json:"ecrpublic"`
	Ecs                                  string `json:"ecs"`
	Efs                                  string `json:"efs"`
	Eks                                  string `json:"eks"`
	Elasticache                          string `json:"elasticache"`
	Elasticbeanstalk                     string `json:"elasticbeanstalk"`
	Elasticloadbalancing                 string `json:"elasticloadbalancing"`
	Elasticloadbalancingv2               string `json:"elasticloadbalancingv2"`
	Elasticsearch                        string `json:"elasticsearch"`
	Elasticsearchservice                 string `json:"elasticsearchservice"`
	Elastictranscoder                    string `json:"elastictranscoder"`
	Elb                                  string `json:"elb"`
	Elbv2                                string `json:"elbv2"`
	Emr                                  string `json:"emr"`
	Emrcontainers                        string `json:"emrcontainers"`
	Emrserverless                        string `json:"emrserverless"`
	Es                                   string `json:"es"`
	Eventbridge                          string `json:"eventbridge"`
	Events                               string `json:"events"`
	Evidently                            string `json:"evidently"`
	Finspace                             string `json:"finspace"`
	Firehose                             string `json:"firehose"`
	Fis                                  string `json:"fis"`
	Fms                                  string `json:"fms"`
	Fsx                                  string `json:"fsx"`
	Gamelift                             string `json:"gamelift"`
	Glacier                              string `json:"glacier"`
	Globalaccelerator                    string `json:"globalaccelerator"`
	Glue                                 string `json:"glue"`
	Grafana                              string `json:"grafana"`
	Greengrass                           string `json:"greengrass"`
	Groundstation                        string `json:"groundstation"`
	Guardduty                            string `json:"guardduty"`
	Healthlake                           string `json:"healthlake"`
	Iam                                  string `json:"iam"`
	Identitystore                        string `json:"identitystore"`
	Imagebuilder                         string `json:"imagebuilder"`
	Inspector                            string `json:"inspector"`
	Inspector2                           string `json:"inspector2"`
	Inspectorv2                          string `json:"inspectorv2"`
	Internetmonitor                      string `json:"internetmonitor"`
	Iot                                  string `json:"iot"`
	Iotanalytics                         string `json:"iotanalytics"`
	Iotevents                            string `json:"iotevents"`
	Ivs                                  string `json:"ivs"`
	Ivschat                              string `json:"ivschat"`
	Kafka                                string `json:"kafka"`
	Kafkaconnect                         string `json:"kafkaconnect"`
	Kendra                               string `json:"kendra"`
	Keyspaces                            string `json:"keyspaces"`
	Kinesis                              string `json:"kinesis"`
	Kinesisanalytics                     string `json:"kinesisanalytics"`
	Kinesisanalyticsv2                   string `json:"kinesisanalyticsv2"`
	Kinesisvideo                         string `json:"kinesisvideo"`
	Kms                                  string `json:"kms"`
	Lakeformation                        string `json:"lakeformation"`
	Lambda                               string `json:"lambda"`
	Launchwizard                         string `json:"launchwizard"`
	Lex                                  string `json:"lex"`
	Lexmodelbuilding                     string `json:"lexmodelbuilding"`
	Lexmodelbuildingservice              string `json:"lexmodelbuildingservice"`
	Lexmodels                            string `json:"lexmodels"`
	Lexmodelsv2                          string `json:"lexmodelsv2"`
	Lexv2Models                          string `json:"lexv2models"`
	Licensemanager                       string `json:"licensemanager"`
	Lightsail                            string `json:"lightsail"`
	Location                             string `json:"location"`
	Locationservice                      string `json:"locationservice"`
	Logs                                 string `json:"logs"`
	Lookoutmetrics                       string `json:"lookoutmetrics"`
	M2                                   string `json:"m2"`
	Macie2                               string `json:"macie2"`
	Managedgrafana                       string `json:"managedgrafana"`
	Mediaconnect                         string `json:"mediaconnect"`
	Mediaconvert                         string `json:"mediaconvert"`
	Medialive                            string `json:"medialive"`
	Mediapackage                         string `json:"mediapackage"`
	Mediapackagev2                       string `json:"mediapackagev2"`
	Mediastore                           string `json:"mediastore"`
	Memorydb                             string `json:"memorydb"`
	Mq                                   string `json:"mq"`
	Msk                                  string `json:"msk"`
	Mwaa                                 string `json:"mwaa"`
	Neptune                              string `json:"neptune"`
	Networkfirewall                      string `json:"networkfirewall"`
	Networkmanager                       string `json:"networkmanager"`
	Oam                                  string `json:"oam"`
	Opensearch                           string `json:"opensearch"`
	Opensearchingestion                  string `json:"opensearchingestion"`
	Opensearchserverless                 string `json:"opensearchserverless"`
	Opensearchservice                    string `json:"opensearchservice"`
	Opsworks                             string `json:"opsworks"`
	Organizations                        string `json:"organizations"`
	Osis                                 string `json:"osis"`
	Outposts                             string `json:"outposts"`
	Paymentcryptography                  string `json:"paymentcryptography"`
	Pcaconnectorad                       string `json:"pcaconnectorad"`
	Pinpoint                             string `json:"pinpoint"`
	Pipes                                string `json:"pipes"`
	Polly                                string `json:"polly"`
	Pricing                              string `json:"pricing"`
	Prometheus                           string `json:"prometheus"`
	Prometheusservice                    string `json:"prometheusservice"`
	Qbusiness                            string `json:"qbusiness"`
	Qldb                                 string `json:"qldb"`
	Quicksight                           string `json:"quicksight"`
	Ram                                  string `json:"ram"`
	Rbin                                 string `json:"rbin"`
	Rds                                  string `json:"rds"`
	Recyclebin                           string `json:"recyclebin"`
	Redshift                             string `json:"redshift"`
	Redshiftdata                         string `json:"redshiftdata"`
	Redshiftdataapiservice               string `json:"redshiftdataapiservice"`
	Redshiftserverless                   string `json:"redshiftserverless"`
	Rekognition                          string `json:"rekognition"`
	Resourceexplorer2                    string `json:"resourceexplorer2"`
	Resourcegroups                       string `json:"resourcegroups"`
	Resourcegroupstagging                string `json:"resourcegroupstagging"`
	Resourcegroupstaggingapi             string `json:"resourcegroupstaggingapi"`
	Rolesanywhere                        string `json:"rolesanywhere"`
	Route53                              string `json:"route53"`
	Route53Domains                       string `json:"route53domains"`
	Route53Recoverycontrolconfig         string `json:"route53recoverycontrolconfig"`
	Route53Recoveryreadiness             string `json:"route53recoveryreadiness"`
	Route53Resolver                      string `json:"route53resolver"`
	Rum                                  string `json:"rum"`
	S3                                   string `json:"s3"`
	S3Api                                string `json:"s3api"`
	S3Control                            string `json:"s3control"`
	S3Outposts                           string `json:"s3outposts"`
	Sagemaker                            string `json:"sagemaker"`
	Scheduler                            string `json:"scheduler"`
	Schemas                              string `json:"schemas"`
	Sdb                                  string `json:"sdb"`
	Secretsmanager                       string `json:"secretsmanager"`
	Securityhub                          string `json:"securityhub"`
	Securitylake                         string `json:"securitylake"`
	Serverlessapplicationrepository      string `json:"serverlessapplicationrepository"`
	Serverlessapprepo                    string `json:"serverlessapprepo"`
	Serverlessrepo                       string `json:"serverlessrepo"`
	Servicecatalog                       string `json:"servicecatalog"`
	Servicecatalogappregistry            string `json:"servicecatalogappregistry"`
	Servicediscovery                     string `json:"servicediscovery"`
	Servicequotas                        string `json:"servicequotas"`
	Ses                                  string `json:"ses"`
	Sesv2                                string `json:"sesv2"`
	Sfn                                  string `json:"sfn"`
	Shield                               string `json:"shield"`
	Signer                               string `json:"signer"`
	Simpledb                             string `json:"simpledb"`
	Sns                                  string `json:"sns"`
	Sqs                                  string `json:"sqs"`
	Ssm                                  string `json:"ssm"`
	Ssmcontacts                          string `json:"ssmcontacts"`
	Ssmincidents                         string `json:"ssmincidents"`
	Ssmsap                               string `json:"ssmsap"`
	Sso                                  string `json:"sso"`
	Ssoadmin                             string `json:"ssoadmin"`
	Stepfunctions                        string `json:"stepfunctions"`
	Storagegateway                       string `json:"storagegateway"`
	Sts                                  string `json:"sts"`
	Swf                                  string `json:"swf"`
	Synthetics                           string `json:"synthetics"`
	Timestreamwrite                      string `json:"timestreamwrite"`
	Transcribe                           string `json:"transcribe"`
	Transcribeservice                    string `json:"transcribeservice"`
	Transfer                             string `json:"transfer"`
	Verifiedpermissions                  string `json:"verifiedpermissions"`
	Vpclattice                           string `json:"vpclattice"`
	Waf                                  string `json:"waf"`
	Wafregional                          string `json:"wafregional"`
	Wafv2                                string `json:"wafv2"`
	Wellarchitected                      string `json:"wellarchitected"`
	Worklink                             string `json:"worklink"`
	Workspaces                           string `json:"workspaces"`
	Xray                                 string `json:"xray"`
}

type IgnoreTagsState struct {
	KeyPrefixes []string `json:"key_prefixes"`
	Keys        []string `json:"keys"`
}
-- out/emr_cluster.go --
// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
	emrcluster "test/out/emrcluster"
)

// NewEmrCluster creates a new instance of [EmrCluster].
func NewEmrCluster(name string, args EmrClusterArgs) *EmrCluster {
	return &EmrCluster{
		Args: args,
		Name: name,
	}
}

var _ terra.Resource = (*EmrCluster)(nil)

// EmrCluster represents the Terraform resource aws_emr_cluster.
type EmrCluster struct {
	Name      string
	Args      EmrClusterArgs
	state     *emrClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [EmrCluster].
func (ec *EmrCluster) Type() string {
	return "aws_emr_cluster"
}

// LocalName returns the local name for [EmrCluster].
func (ec *EmrCluster) LocalName() string {
	return ec.Name
}

// Configuration returns the configuration (args) for [EmrCluster].
func (ec *EmrCluster) Configuration() interface{} {
	return ec.Args
}

// DependOn is used for other resources to depend on [EmrCluster].
func (ec *EmrCluster) DependOn() terra.Reference {
	return terra.ReferenceResource(ec)
}

// Dependencies returns the list of resources [EmrCluster] depends_on.
func (ec *EmrCluster) Dependencies() terra.Dependencies {
	return ec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [EmrCluster].
func (ec *EmrCluster) LifecycleManagement() *terra.Lifecycle {
	return ec.Lifecycle
}

// Attributes returns the attributes for [EmrCluster].
func (ec *EmrCluster) Attributes() emrClusterAttributes {
	return emrClusterAttributes{ref: terra.ReferenceResource(ec)}
}

// ImportState imports the given attribute values into [EmrCluster]'s state.
func (ec *EmrCluster) ImportState(av io.Reader) error {
	ec.state = &emrClusterState{}
	if err := json.NewDecoder(av).Decode(ec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ec.Type(), ec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [EmrCluster] has state.
func (ec *EmrCluster) State() (*emrClusterState, bool) {
	return ec.state, ec.state != nil
}

// StateMust returns the state for [EmrCluster]. Panics if the state is nil.
func (ec *EmrCluster) StateMust() *emrClusterState {
	if ec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ec.Type(), ec.LocalName()))
	}
	return ec.state
}

// EmrClusterArgs contains the configurations for aws_emr_cluster.
type EmrClusterArgs struct {
	// AdditionalInfo: string, optional
	AdditionalInfo terra.StringValue `hcl:"additional_info,attr"`
	// Applications: set of string, optional
	Applications terra.SetValue[terra.StringValue] `hcl:"applications,attr"`
	// AutoscalingRole: string, optional
	AutoscalingRole terra.StringValue `hcl:"autoscaling_role,attr"`
	// Configurations: string, optional
	Configurations terra.StringValue `hcl:"configurations,attr"`
	// ConfigurationsJson: string, optional
	ConfigurationsJson terra.StringValue `hcl:"configurations_json,attr"`
	// CustomAmiId: string, optional
	CustomAmiId terra.StringValue `hcl:"custom_ami_id,attr"`
	// EbsRootVolumeSize: number, optional
	EbsRootVolumeSize terra.NumberValue `hcl:"ebs_root_volume_size,attr"`
	// Id: string, optional
	Id terra.StringValue `hcl:"id,attr"`
	// KeepJobFlowAliveWhenNoSteps: bool, optional
	KeepJobFlowAliveWhenNoSteps terra.BoolValue `hcl:"keep_job_flow_alive_when_no_steps,attr"`
	// ListStepsStates: set of string, optional
	ListStepsStates terra.SetValue[terra.StringValue] `hcl:"list_steps_states,attr"`
	// LogEncryptionKmsKeyId: string, optional
	LogEncryptionKmsKeyId terra.StringValue `hcl:"log_encryption_kms_key_id,attr"`
	// LogUri: string, optional
	LogUri terra.StringValue `hcl:"log_uri,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReleaseLabel: string, required
	ReleaseLabel terra.StringValue `hcl:"release_label,attr" validate:"required"`
	// ScaleDownBehavior: string, optional
	ScaleDownBehavior terra.StringValue `hcl:"scale_down_behavior,attr"`
	// SecurityConfiguration: string, optional
	SecurityConfiguration terra.StringValue `hcl:"security_configuration,attr"`
	// ServiceRole: string, required
	ServiceRole terra.StringValue `hcl:"service_role,attr" validate:"required"`
	// StepConcurrencyLevel: number, optional
	StepConcurrencyLevel terra.NumberValue `hcl:"step_concurrency_level,attr"`
	// Tags: map of string, optional
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll: map of string, optional
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TerminationProtection: bool, optional
	TerminationProtection terra.BoolValue `hcl:"termination_protection,attr"`
	// UnhealthyNodeReplacement: bool, optional
	UnhealthyNodeReplacement terra.BoolValue `hcl:"unhealthy_node_replacement,attr"`
	// VisibleToAllUsers: bool, optional
	VisibleToAllUsers terra.BoolValue `hcl:"visible_to_all_users,attr"`
	// PlacementGroupConfig: min=0
	PlacementGroupConfig []emrcluster.PlacementGroupConfig `hcl:"placement_group_config,block" validate:"min=0"`
	// Step: min=0
	Step []emrcluster.Step `hcl:"step,block" validate:"min=0"`
	// AutoTerminationPolicy: optional
	AutoTerminationPolicy *emrcluster.AutoTerminationPolicy `hcl:"auto_termination_policy,block"`
	// BootstrapAction: min=0
	BootstrapAction []emrcluster.BootstrapAction `hcl:"bootstrap_action,block" validate:"min=0"`
	// CoreInstanceFleet: optional
	CoreInstanceFleet *emrcluster.CoreInstanceFleet `hcl:"core_instance_fleet,block"`
	// CoreInstanceGroup: optional
	CoreInstanceGroup *emrcluster.CoreInstanceGroup `hcl:"core_instance_group,block"`
	// Ec2Attributes: optional
	Ec2Attributes *emrcluster.Ec2Attributes `hcl:"ec2_attributes,block"`
	// KerberosAttributes: optional
	KerberosAttributes *emrcluster.KerberosAttributes `hcl:"kerberos_attributes,block"`
	// MasterInstanceFleet: optional
	MasterInstanceFleet *emrcluster.MasterInstanceFleet `hcl:"master_instance_fleet,block"`
	// MasterInstanceGroup: optional
	MasterInstanceGroup *emrcluster.MasterInstanceGroup `hcl:"master_instance_group,block"`
}
type emrClusterAttributes struct {
	ref terra.Reference
}

// AdditionalInfo returns a reference to field additional_info of aws_emr_cluster.
func (ec emrClusterAttributes) AdditionalInfo() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("additional_info"))
}

// Applications returns a reference to field applications of aws_emr_cluster.
func (ec emrClusterAttributes) Applications() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ec.ref.Append("applications"))
}

// Arn returns a reference to field arn of aws_emr_cluster.
func (ec emrClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("arn"))
}

// AutoscalingRole returns a reference to field autoscaling_role of aws_emr_cluster.
func (ec emrClusterAttributes) AutoscalingRole() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("autoscaling_role"))
}

// ClusterState returns a reference to field cluster_state of aws_emr_cluster.
func (ec emrClusterAttributes) ClusterState() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("cluster_state"))
}

// Configurations returns a reference to field configurations of aws_emr_cluster.
func (ec emrClusterAttributes) Configurations() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("configurations"))
}

// ConfigurationsJson returns a reference to field configurations_json of aws_emr_cluster.
func (ec emrClusterAttributes) ConfigurationsJson() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("configurations_json"))
}

// CustomAmiId returns a reference to field custom_ami_id of aws_emr_cluster.
func (ec emrClusterAttributes) CustomAmiId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("custom_ami_id"))
}

// EbsRootVolumeSize returns a reference to field ebs_root_volume_size of aws_emr_cluster.
func (ec emrClusterAttributes) EbsRootVolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("ebs_root_volume_size"))
}

// Id returns a reference to field id of aws_emr_cluster.
func (ec emrClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("id"))
}

// KeepJobFlowAliveWhenNoSteps returns a reference to field keep_job_flow_alive_when_no_steps of aws_emr_cluster.
func (ec emrClusterAttributes) KeepJobFlowAliveWhenNoSteps() terra.BoolValue {
	return terra.ReferenceAsBool(ec.ref.Append("keep_job_flow_alive_when_no_steps"))
}

// ListStepsStates returns a reference to field list_steps_states of aws_emr_cluster.
func (ec emrClusterAttributes) ListStepsStates() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ec.ref.Append("list_steps_states"))
}

// LogEncryptionKmsKeyId returns a reference to field log_encryption_kms_key_id of aws_emr_cluster.
func (ec emrClusterAttributes) LogEncryptionKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("log_encryption_kms_key_id"))
}

// LogUri returns a reference to field log_uri of aws_emr_cluster.
func (ec emrClusterAttributes) LogUri() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("log_uri"))
}

// MasterPublicDns returns a reference to field master_public_dns of aws_emr_cluster.
func (ec emrClusterAttributes) MasterPublicDns() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("master_public_dns"))
}

// Name returns a reference to field name of aws_emr_cluster.
func (ec emrClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("name"))
}

// ReleaseLabel returns a reference to field release_label of aws_emr_cluster.
func (ec emrClusterAttributes) ReleaseLabel() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("release_label"))
}

// ScaleDownBehavior returns a reference to field scale_down_behavior of aws_emr_cluster.
func (ec emrClusterAttributes) ScaleDownBehavior() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("scale_down_behavior"))
}

// SecurityConfiguration returns a reference to field security_configuration of aws_emr_cluster.
func (ec emrClusterAttributes) SecurityConfiguration() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("security_configuration"))
}

// ServiceRole returns a reference to field service_role of aws_emr_cluster.
func (ec emrClusterAttributes) ServiceRole() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("service_role"))
}

// StepConcurrencyLevel returns a reference to field step_concurrency_level of aws_emr_cluster.
func (ec emrClusterAttributes) StepConcurrencyLevel() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("step_concurrency_level"))
}

// Tags returns a reference to field tags of aws_emr_cluster.
func (ec emrClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ec.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_emr_cluster.
func (ec emrClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ec.ref.Append("tags_all"))
}

// TerminationProtection returns a reference to field termination_protection of aws_emr_cluster.
func (ec emrClusterAttributes) TerminationProtection() terra.BoolValue {
	return terra.ReferenceAsBool(ec.ref.Append("termination_protection"))
}

// UnhealthyNodeReplacement returns a reference to field unhealthy_node_replacement of aws_emr_cluster.
func (ec emrClusterAttributes) UnhealthyNodeReplacement() terra.BoolValue {
	return terra.ReferenceAsBool(ec.ref.Append("unhealthy_node_replacement"))
}

// VisibleToAllUsers returns a reference to field visible_to_all_users of aws_emr_cluster.
func (ec emrClusterAttributes) VisibleToAllUsers() terra.BoolValue {
	return terra.ReferenceAsBool(ec.ref.Append("visible_to_all_users"))
}

func (ec emrClusterAttributes) PlacementGroupConfig() terra.ListValue[emrcluster.PlacementGroupConfigAttributes] {
	return terra.ReferenceAsList[emrcluster.PlacementGroupConfigAttributes](ec.ref.Append("placement_group_config"))
}

func (ec emrClusterAttributes) Step() terra.ListValue[emrcluster.StepAttributes] {
	return terra.ReferenceAsList[emrcluster.StepAttributes](ec.ref.Append("step"))
}

func (ec emrClusterAttributes) AutoTerminationPolicy() terra.ListValue[emrcluster.AutoTerminationPolicyAttributes] {
	return terra.ReferenceAsList[emrcluster.AutoTerminationPolicyAttributes](ec.ref.Append("auto_termination_policy"))
}

func (ec emrClusterAttributes) BootstrapAction() terra.ListValue[emrcluster.BootstrapActionAttributes] {
	return terra.ReferenceAsList[emrcluster.BootstrapActionAttributes](ec.ref.Append("bootstrap_action"))
}

func (ec emrClusterAttributes) CoreInstanceFleet() terra.ListValue[emrcluster.CoreInstanceFleetAttributes] {
	return terra.ReferenceAsList[emrcluster.CoreInstanceFleetAttributes](ec.ref.Append("core_instance_fleet"))
}

func (ec emrClusterAttributes) CoreInstanceGroup() terra.ListValue[emrcluster.CoreInstanceGroupAttributes] {
	return terra.ReferenceAsList[emrcluster.CoreInstanceGroupAttributes](ec.ref.Append("core_instance_group"))
}

func (ec emrClusterAttributes) Ec2Attributes() terra.ListValue[emrcluster.Ec2AttributesAttributes] {
	return terra.ReferenceAsList[emrcluster.Ec2AttributesAttributes](ec.ref.Append("ec2_attributes"))
}

func (ec emrClusterAttributes) KerberosAttributes() terra.ListValue[emrcluster.KerberosAttributesAttributes] {
	return terra.ReferenceAsList[emrcluster.KerberosAttributesAttributes](ec.ref.Append("kerberos_attributes"))
}

func (ec emrClusterAttributes) MasterInstanceFleet() terra.ListValue[emrcluster.MasterInstanceFleetAttributes] {
	return terra.ReferenceAsList[emrcluster.MasterInstanceFleetAttributes](ec.ref.Append("master_instance_fleet"))
}

func (ec emrClusterAttributes) MasterInstanceGroup() terra.ListValue[emrcluster.MasterInstanceGroupAttributes] {
	return terra.ReferenceAsList[emrcluster.MasterInstanceGroupAttributes](ec.ref.Append("master_instance_group"))
}

type emrClusterState struct {
	AdditionalInfo              string                                  `json:"additional_info"`
	Applications                []string                                `json:"applications"`
	Arn                         string                                  `json:"arn"`
	AutoscalingRole             string                                  `json:"autoscaling_role"`
	ClusterState                string                                  `json:"cluster_state"`
	Configurations              string                                  `json:"configurations"`
	ConfigurationsJson          string                                  `json:"configurations_json"`
	CustomAmiId                 string                                  `json:"custom_ami_id"`
	EbsRootVolumeSize           float64                                 `json:"ebs_root_volume_size"`
	Id                          string                                  `json:"id"`
	KeepJobFlowAliveWhenNoSteps bool                                    `json:"keep_job_flow_alive_when_no_steps"`
	ListStepsStates             []string                                `json:"list_steps_states"`
	LogEncryptionKmsKeyId       string                                  `json:"log_encryption_kms_key_id"`
	LogUri                      string                                  `json:"log_uri"`
	MasterPublicDns             string                                  `json:"master_public_dns"`
	Name                        string                                  `json:"name"`
	ReleaseLabel                string                                  `json:"release_label"`
	ScaleDownBehavior           string                                  `json:"scale_down_behavior"`
	SecurityConfiguration       string                                  `json:"security_configuration"`
	ServiceRole                 string                                  `json:"service_role"`
	StepConcurrencyLevel        float64                                 `json:"step_concurrency_level"`
	Tags                        map[string]string                       `json:"tags"`
	TagsAll                     map[string]string                       `json:"tags_all"`
	TerminationProtection       bool                                    `json:"termination_protection"`
	UnhealthyNodeReplacement    bool                                    `json:"unhealthy_node_replacement"`
	VisibleToAllUsers           bool                                    `json:"visible_to_all_users"`
	PlacementGroupConfig        []emrcluster.PlacementGroupConfigState  `json:"placement_group_config"`
	Step                        []emrcluster.StepState                  `json:"step"`
	AutoTerminationPolicy       []emrcluster.AutoTerminationPolicyState `json:"auto_termination_policy"`
	BootstrapAction             []emrcluster.BootstrapActionState       `json:"bootstrap_action"`
	CoreInstanceFleet           []emrcluster.CoreInstanceFleetState     `json:"core_instance_fleet"`
	CoreInstanceGroup           []emrcluster.CoreInstanceGroupState     `json:"core_instance_group"`
	Ec2Attributes               []emrcluster.Ec2AttributesState         `json:"ec2_attributes"`
	KerberosAttributes          []emrcluster.KerberosAttributesState    `json:"kerberos_attributes"`
	MasterInstanceFleet         []emrcluster.MasterInstanceFleetState   `json:"master_instance_fleet"`
	MasterInstanceGroup         []emrcluster.MasterInstanceGroupState   `json:"master_instance_group"`
}
-- out/emrcluster/emr_cluster.go --
// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package emrcluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type PlacementGroupConfig struct {
	// InstanceRole: string, optional
	InstanceRole terra.StringValue `hcl:"instance_role,attr"`
	// PlacementStrategy: string, optional
	PlacementStrategy terra.StringValue `hcl:"placement_strategy,attr"`
}

type Step struct {
	// ActionOnFailure: string, optional
	ActionOnFailure terra.StringValue `hcl:"action_on_failure,attr"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// HadoopJarStep: min=0
	HadoopJarStep []HadoopJarStep `hcl:"hadoop_jar_step,block" validate:"min=0"`
}

type HadoopJarStep struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Jar: string, optional
	Jar terra.StringValue `hcl:"jar,attr"`
	// MainClass: string, optional
	MainClass terra.StringValue `hcl:"main_class,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type AutoTerminationPolicy struct {
	// IdleTimeout: number, optional
	IdleTimeout terra.NumberValue `hcl:"idle_timeout,attr"`
}

type BootstrapAction struct {
	// Args: list of string, optional
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Name: string, required
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path: string, required
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type CoreInstanceFleet struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// TargetOnDemandCapacity: number, optional
	TargetOnDemandCapacity terra.NumberValue `hcl:"target_on_demand_capacity,attr"`
	// TargetSpotCapacity: number, optional
	TargetSpotCapacity terra.NumberValue `hcl:"target_spot_capacity,attr"`
	// CoreInstanceFleetInstanceTypeConfigs: min=0
	InstanceTypeConfigs []CoreInstanceFleetInstanceTypeConfigs `hcl:"instance_type_configs,block" validate:"min=0"`
	// CoreInstanceFleetLaunchSpecifications: optional
	LaunchSpecifications *CoreInstanceFleetLaunchSpecifications `hcl:"launch_specifications,block"`
}

type CoreInstanceFleetInstanceTypeConfigs struct {
	// BidPrice: string, optional
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// BidPriceAsPercentageOfOnDemandPrice: number, optional
	BidPriceAsPercentageOfOnDemandPrice terra.NumberValue `hcl:"bid_price_as_percentage_of_on_demand_price,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// WeightedCapacity: number, optional
	WeightedCapacity terra.NumberValue `hcl:"weighted_capacity,attr"`
	// CoreInstanceFleetInstanceTypeConfigsConfigurations: min=0
	Configurations []CoreInstanceFleetInstanceTypeConfigsConfigurations `hcl:"configurations,block" validate:"min=0"`
	// CoreInstanceFleetInstanceTypeConfigsEbsConfig: min=0
	EbsConfig []CoreInstanceFleetInstanceTypeConfigsEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type CoreInstanceFleetInstanceTypeConfigsConfigurations struct {
	// Classification: string, optional
	Classification terra.StringValue `hcl:"classification,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type CoreInstanceFleetInstanceTypeConfigsEbsConfig struct {
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance: number, optional
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type CoreInstanceFleetLaunchSpecifications struct {
	// CoreInstanceFleetLaunchSpecificationsOnDemandSpecification: min=0
	OnDemandSpecification []CoreInstanceFleetLaunchSpecificationsOnDemandSpecification `hcl:"on_demand_specification,block" validate:"min=0"`
	// CoreInstanceFleetLaunchSpecificationsSpotSpecification: min=0
	SpotSpecification []CoreInstanceFleetLaunchSpecificationsSpotSpecification `hcl:"spot_specification,block" validate:"min=0"`
}

type CoreInstanceFleetLaunchSpecificationsOnDemandSpecification struct {
	// AllocationStrategy: string, required
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
}

type CoreInstanceFleetLaunchSpecificationsSpotSpecification struct {
	// AllocationStrategy: string, required
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
	// BlockDurationMinutes: number, optional
	BlockDurationMinutes terra.NumberValue `hcl:"block_duration_minutes,attr"`
	// TimeoutAction: string, required
	TimeoutAction terra.StringValue `hcl:"timeout_action,attr" validate:"required"`
	// TimeoutDurationMinutes: number, required
	TimeoutDurationMinutes terra.NumberValue `hcl:"timeout_duration_minutes,attr" validate:"required"`
}

type CoreInstanceGroup struct {
	// AutoscalingPolicy: string, optional
	AutoscalingPolicy terra.StringValue `hcl:"autoscaling_policy,attr"`
	// BidPrice: string, optional
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// CoreInstanceGroupEbsConfig: min=0
	EbsConfig []CoreInstanceGroupEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type CoreInstanceGroupEbsConfig struct {
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance: number, optional
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type Ec2Attributes struct {
	// AdditionalMasterSecurityGroups: string, optional
	AdditionalMasterSecurityGroups terra.StringValue `hcl:"additional_master_security_groups,attr"`
	// AdditionalSlaveSecurityGroups: string, optional
	AdditionalSlaveSecurityGroups terra.StringValue `hcl:"additional_slave_security_groups,attr"`
	// EmrManagedMasterSecurityGroup: string, optional
	EmrManagedMasterSecurityGroup terra.StringValue `hcl:"emr_managed_master_security_group,attr"`
	// EmrManagedSlaveSecurityGroup: string, optional
	EmrManagedSlaveSecurityGroup terra.StringValue `hcl:"emr_managed_slave_security_group,attr"`
	// InstanceProfile: string, required
	InstanceProfile terra.StringValue `hcl:"instance_profile,attr" validate:"required"`
	// KeyName: string, optional
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// ServiceAccessSecurityGroup: string, optional
	ServiceAccessSecurityGroup terra.StringValue `hcl:"service_access_security_group,attr"`
	// SubnetId: string, optional
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// SubnetIds: set of string, optional
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
}

type KerberosAttributes struct {
	// AdDomainJoinPassword: string, optional
	AdDomainJoinPassword terra.StringValue `hcl:"ad_domain_join_password,attr"`
	// AdDomainJoinUser: string, optional
	AdDomainJoinUser terra.StringValue `hcl:"ad_domain_join_user,attr"`
	// CrossRealmTrustPrincipalPassword: string, optional
	CrossRealmTrustPrincipalPassword terra.StringValue `hcl:"cross_realm_trust_principal_password,attr"`
	// KdcAdminPassword: string, required
	KdcAdminPassword terra.StringValue `hcl:"kdc_admin_password,attr" validate:"required"`
	// Realm: string, required
	Realm terra.StringValue `hcl:"realm,attr" validate:"required"`
}

type MasterInstanceFleet struct {
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// TargetOnDemandCapacity: number, optional
	TargetOnDemandCapacity terra.NumberValue `hcl:"target_on_demand_capacity,attr"`
	// TargetSpotCapacity: number, optional
	TargetSpotCapacity terra.NumberValue `hcl:"target_spot_capacity,attr"`
	// MasterInstanceFleetInstanceTypeConfigs: min=0
	InstanceTypeConfigs []MasterInstanceFleetInstanceTypeConfigs `hcl:"instance_type_configs,block" validate:"min=0"`
	// MasterInstanceFleetLaunchSpecifications: optional
	LaunchSpecifications *MasterInstanceFleetLaunchSpecifications `hcl:"launch_specifications,block"`
}

type MasterInstanceFleetInstanceTypeConfigs struct {
	// BidPrice: string, optional
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// BidPriceAsPercentageOfOnDemandPrice: number, optional
	BidPriceAsPercentageOfOnDemandPrice terra.NumberValue `hcl:"bid_price_as_percentage_of_on_demand_price,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// WeightedCapacity: number, optional
	WeightedCapacity terra.NumberValue `hcl:"weighted_capacity,attr"`
	// MasterInstanceFleetInstanceTypeConfigsConfigurations: min=0
	Configurations []MasterInstanceFleetInstanceTypeConfigsConfigurations `hcl:"configurations,block" validate:"min=0"`
	// MasterInstanceFleetInstanceTypeConfigsEbsConfig: min=0
	EbsConfig []MasterInstanceFleetInstanceTypeConfigsEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type MasterInstanceFleetInstanceTypeConfigsConfigurations struct {
	// Classification: string, optional
	Classification terra.StringValue `hcl:"classification,attr"`
	// Properties: map of string, optional
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type MasterInstanceFleetInstanceTypeConfigsEbsConfig struct {
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance: number, optional
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type MasterInstanceFleetLaunchSpecifications struct {
	// MasterInstanceFleetLaunchSpecificationsOnDemandSpecification: min=0
	OnDemandSpecification []MasterInstanceFleetLaunchSpecificationsOnDemandSpecification `hcl:"on_demand_specification,block" validate:"min=0"`
	// MasterInstanceFleetLaunchSpecificationsSpotSpecification: min=0
	SpotSpecification []MasterInstanceFleetLaunchSpecificationsSpotSpecification `hcl:"spot_specification,block" validate:"min=0"`
}

type MasterInstanceFleetLaunchSpecificationsOnDemandSpecification struct {
	// AllocationStrategy: string, required
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
}

type MasterInstanceFleetLaunchSpecificationsSpotSpecification struct {
	// AllocationStrategy: string, required
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
	// BlockDurationMinutes: number, optional
	BlockDurationMinutes terra.NumberValue `hcl:"block_duration_minutes,attr"`
	// TimeoutAction: string, required
	TimeoutAction terra.StringValue `hcl:"timeout_action,attr" validate:"required"`
	// TimeoutDurationMinutes: number, required
	TimeoutDurationMinutes terra.NumberValue `hcl:"timeout_duration_minutes,attr" validate:"required"`
}

type MasterInstanceGroup struct {
	// BidPrice: string, optional
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// InstanceCount: number, optional
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// InstanceType: string, required
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// Name: string, optional
	Name terra.StringValue `hcl:"name,attr"`
	// MasterInstanceGroupEbsConfig: min=0
	EbsConfig []MasterInstanceGroupEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type MasterInstanceGroupEbsConfig struct {
	// Iops: number, optional
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size: number, required
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Throughput: number, optional
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// Type: string, required
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance: number, optional
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type PlacementGroupConfigAttributes struct {
	ref terra.Reference
}

func (pgc PlacementGroupConfigAttributes) InternalRef() (terra.Reference, error) {
	return pgc.ref, nil
}

func (pgc PlacementGroupConfigAttributes) InternalWithRef(ref terra.Reference) PlacementGroupConfigAttributes {
	return PlacementGroupConfigAttributes{ref: ref}
}

func (pgc PlacementGroupConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pgc.ref.InternalTokens()
}

func (pgc PlacementGroupConfigAttributes) InstanceRole() terra.StringValue {
	return terra.ReferenceAsString(pgc.ref.Append("instance_role"))
}

func (pgc PlacementGroupConfigAttributes) PlacementStrategy() terra.StringValue {
	return terra.ReferenceAsString(pgc.ref.Append("placement_strategy"))
}

type StepAttributes struct {
	ref terra.Reference
}

func (s StepAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s StepAttributes) InternalWithRef(ref terra.Reference) StepAttributes {
	return StepAttributes{ref: ref}
}

func (s StepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s StepAttributes) ActionOnFailure() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("action_on_failure"))
}

func (s StepAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s StepAttributes) HadoopJarStep() terra.ListValue[HadoopJarStepAttributes] {
	return terra.ReferenceAsList[HadoopJarStepAttributes](s.ref.Append("hadoop_jar_step"))
}

type HadoopJarStepAttributes struct {
	ref terra.Reference
}

func (hjs HadoopJarStepAttributes) InternalRef() (terra.Reference, error) {
	return hjs.ref, nil
}

func (hjs HadoopJarStepAttributes) InternalWithRef(ref terra.Reference) HadoopJarStepAttributes {
	return HadoopJarStepAttributes{ref: ref}
}

func (hjs HadoopJarStepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hjs.ref.InternalTokens()
}

func (hjs HadoopJarStepAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hjs.ref.Append("args"))
}

func (hjs HadoopJarStepAttributes) Jar() terra.StringValue {
	return terra.ReferenceAsString(hjs.ref.Append("jar"))
}

func (hjs HadoopJarStepAttributes) MainClass() terra.StringValue {
	return terra.ReferenceAsString(hjs.ref.Append("main_class"))
}

func (hjs HadoopJarStepAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hjs.ref.Append("properties"))
}

type AutoTerminationPolicyAttributes struct {
	ref terra.Reference
}

func (atp AutoTerminationPolicyAttributes) InternalRef() (terra.Reference, error) {
	return atp.ref, nil
}

func (atp AutoTerminationPolicyAttributes) InternalWithRef(ref terra.Reference) AutoTerminationPolicyAttributes {
	return AutoTerminationPolicyAttributes{ref: ref}
}

func (atp AutoTerminationPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return atp.ref.InternalTokens()
}

func (atp AutoTerminationPolicyAttributes) IdleTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(atp.ref.Append("idle_timeout"))
}

type BootstrapActionAttributes struct {
	ref terra.Reference
}

func (ba BootstrapActionAttributes) InternalRef() (terra.Reference, error) {
	return ba.ref, nil
}

func (ba BootstrapActionAttributes) InternalWithRef(ref terra.Reference) BootstrapActionAttributes {
	return BootstrapActionAttributes{ref: ref}
}

func (ba BootstrapActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ba.ref.InternalTokens()
}

func (ba BootstrapActionAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ba.ref.Append("args"))
}

func (ba BootstrapActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("name"))
}

func (ba BootstrapActionAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("path"))
}

type CoreInstanceFleetAttributes struct {
	ref terra.Reference
}

func (cif CoreInstanceFleetAttributes) InternalRef() (terra.Reference, error) {
	return cif.ref, nil
}

func (cif CoreInstanceFleetAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetAttributes {
	return CoreInstanceFleetAttributes{ref: ref}
}

func (cif CoreInstanceFleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cif.ref.InternalTokens()
}

func (cif CoreInstanceFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cif.ref.Append("id"))
}

func (cif CoreInstanceFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cif.ref.Append("name"))
}

func (cif CoreInstanceFleetAttributes) ProvisionedOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(cif.ref.Append("provisioned_on_demand_capacity"))
}

func (cif CoreInstanceFleetAttributes) ProvisionedSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(cif.ref.Append("provisioned_spot_capacity"))
}

func (cif CoreInstanceFleetAttributes) TargetOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(cif.ref.Append("target_on_demand_capacity"))
}

func (cif CoreInstanceFleetAttributes) TargetSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(cif.ref.Append("target_spot_capacity"))
}

func (cif CoreInstanceFleetAttributes) InstanceTypeConfigs() terra.SetValue[CoreInstanceFleetInstanceTypeConfigsAttributes] {
	return terra.ReferenceAsSet[CoreInstanceFleetInstanceTypeConfigsAttributes](cif.ref.Append("instance_type_configs"))
}

func (cif CoreInstanceFleetAttributes) LaunchSpecifications() terra.ListValue[CoreInstanceFleetLaunchSpecificationsAttributes] {
	return terra.ReferenceAsList[CoreInstanceFleetLaunchSpecificationsAttributes](cif.ref.Append("launch_specifications"))
}

type CoreInstanceFleetInstanceTypeConfigsAttributes struct {
	ref terra.Reference
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return itc.ref, nil
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetInstanceTypeConfigsAttributes {
	return CoreInstanceFleetInstanceTypeConfigsAttributes{ref: ref}
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return itc.ref.InternalTokens()
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("bid_price"))
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) BidPriceAsPercentageOfOnDemandPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("bid_price_as_percentage_of_on_demand_price"))
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("instance_type"))
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) WeightedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("weighted_capacity"))
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) Configurations() terra.SetValue[CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes] {
	return terra.ReferenceAsSet[CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes](itc.ref.Append("configurations"))
}

func (itc CoreInstanceFleetInstanceTypeConfigsAttributes) EbsConfig() terra.SetValue[CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes] {
	return terra.ReferenceAsSet[CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes](itc.ref.Append("ebs_config"))
}

type CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes struct {
	ref terra.Reference
}

func (c CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes {
	return CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes{ref: ref}
}

func (c CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) Classification() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("classification"))
}

func (c CoreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("properties"))
}

type CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes {
	return CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes{ref: ref}
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec CoreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type CoreInstanceFleetLaunchSpecificationsAttributes struct {
	ref terra.Reference
}

func (ls CoreInstanceFleetLaunchSpecificationsAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls CoreInstanceFleetLaunchSpecificationsAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetLaunchSpecificationsAttributes {
	return CoreInstanceFleetLaunchSpecificationsAttributes{ref: ref}
}

func (ls CoreInstanceFleetLaunchSpecificationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls CoreInstanceFleetLaunchSpecificationsAttributes) OnDemandSpecification() terra.ListValue[CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes] {
	return terra.ReferenceAsList[CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes](ls.ref.Append("on_demand_specification"))
}

func (ls CoreInstanceFleetLaunchSpecificationsAttributes) SpotSpecification() terra.ListValue[CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes] {
	return terra.ReferenceAsList[CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes](ls.ref.Append("spot_specification"))
}

type CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes struct {
	ref terra.Reference
}

func (ods CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ods.ref, nil
}

func (ods CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes {
	return CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes{ref: ref}
}

func (ods CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ods.ref.InternalTokens()
}

func (ods CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ods.ref.Append("allocation_strategy"))
}

type CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes struct {
	ref terra.Reference
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalWithRef(ref terra.Reference) CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes {
	return CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes{ref: ref}
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("allocation_strategy"))
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) BlockDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("block_duration_minutes"))
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) TimeoutAction() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("timeout_action"))
}

func (ss CoreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) TimeoutDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("timeout_duration_minutes"))
}

type CoreInstanceGroupAttributes struct {
	ref terra.Reference
}

func (cig CoreInstanceGroupAttributes) InternalRef() (terra.Reference, error) {
	return cig.ref, nil
}

func (cig CoreInstanceGroupAttributes) InternalWithRef(ref terra.Reference) CoreInstanceGroupAttributes {
	return CoreInstanceGroupAttributes{ref: ref}
}

func (cig CoreInstanceGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cig.ref.InternalTokens()
}

func (cig CoreInstanceGroupAttributes) AutoscalingPolicy() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("autoscaling_policy"))
}

func (cig CoreInstanceGroupAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("bid_price"))
}

func (cig CoreInstanceGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("id"))
}

func (cig CoreInstanceGroupAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(cig.ref.Append("instance_count"))
}

func (cig CoreInstanceGroupAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("instance_type"))
}

func (cig CoreInstanceGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("name"))
}

func (cig CoreInstanceGroupAttributes) EbsConfig() terra.SetValue[CoreInstanceGroupEbsConfigAttributes] {
	return terra.ReferenceAsSet[CoreInstanceGroupEbsConfigAttributes](cig.ref.Append("ebs_config"))
}

type CoreInstanceGroupEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec CoreInstanceGroupEbsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec CoreInstanceGroupEbsConfigAttributes) InternalWithRef(ref terra.Reference) CoreInstanceGroupEbsConfigAttributes {
	return CoreInstanceGroupEbsConfigAttributes{ref: ref}
}

func (ec CoreInstanceGroupEbsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec CoreInstanceGroupEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec CoreInstanceGroupEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec CoreInstanceGroupEbsConfigAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("throughput"))
}

func (ec CoreInstanceGroupEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec CoreInstanceGroupEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type Ec2AttributesAttributes struct {
	ref terra.Reference
}

func (ea Ec2AttributesAttributes) InternalRef() (terra.Reference, error) {
	return ea.ref, nil
}

func (ea Ec2AttributesAttributes) InternalWithRef(ref terra.Reference) Ec2AttributesAttributes {
	return Ec2AttributesAttributes{ref: ref}
}

func (ea Ec2AttributesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ea.ref.InternalTokens()
}

func (ea Ec2AttributesAttributes) AdditionalMasterSecurityGroups() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("additional_master_security_groups"))
}

func (ea Ec2AttributesAttributes) AdditionalSlaveSecurityGroups() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("additional_slave_security_groups"))
}

func (ea Ec2AttributesAttributes) EmrManagedMasterSecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("emr_managed_master_security_group"))
}

func (ea Ec2AttributesAttributes) EmrManagedSlaveSecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("emr_managed_slave_security_group"))
}

func (ea Ec2AttributesAttributes) InstanceProfile() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("instance_profile"))
}

func (ea Ec2AttributesAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("key_name"))
}

func (ea Ec2AttributesAttributes) ServiceAccessSecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("service_access_security_group"))
}

func (ea Ec2AttributesAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("subnet_id"))
}

func (ea Ec2AttributesAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ea.ref.Append("subnet_ids"))
}

type KerberosAttributesAttributes struct {
	ref terra.Reference
}

func (ka KerberosAttributesAttributes) InternalRef() (terra.Reference, error) {
	return ka.ref, nil
}

func (ka KerberosAttributesAttributes) InternalWithRef(ref terra.Reference) KerberosAttributesAttributes {
	return KerberosAttributesAttributes{ref: ref}
}

func (ka KerberosAttributesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ka.ref.InternalTokens()
}

func (ka KerberosAttributesAttributes) AdDomainJoinPassword() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("ad_domain_join_password"))
}

func (ka KerberosAttributesAttributes) AdDomainJoinUser() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("ad_domain_join_user"))
}

func (ka KerberosAttributesAttributes) CrossRealmTrustPrincipalPassword() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("cross_realm_trust_principal_password"))
}

func (ka KerberosAttributesAttributes) KdcAdminPassword() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("kdc_admin_password"))
}

func (ka KerberosAttributesAttributes) Realm() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("realm"))
}

type MasterInstanceFleetAttributes struct {
	ref terra.Reference
}

func (mif MasterInstanceFleetAttributes) InternalRef() (terra.Reference, error) {
	return mif.ref, nil
}

func (mif MasterInstanceFleetAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetAttributes {
	return MasterInstanceFleetAttributes{ref: ref}
}

func (mif MasterInstanceFleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mif.ref.InternalTokens()
}

func (mif MasterInstanceFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mif.ref.Append("id"))
}

func (mif MasterInstanceFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mif.ref.Append("name"))
}

func (mif MasterInstanceFleetAttributes) ProvisionedOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mif.ref.Append("provisioned_on_demand_capacity"))
}

func (mif MasterInstanceFleetAttributes) ProvisionedSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mif.ref.Append("provisioned_spot_capacity"))
}

func (mif MasterInstanceFleetAttributes) TargetOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mif.ref.Append("target_on_demand_capacity"))
}

func (mif MasterInstanceFleetAttributes) TargetSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mif.ref.Append("target_spot_capacity"))
}

func (mif MasterInstanceFleetAttributes) InstanceTypeConfigs() terra.SetValue[MasterInstanceFleetInstanceTypeConfigsAttributes] {
	return terra.ReferenceAsSet[MasterInstanceFleetInstanceTypeConfigsAttributes](mif.ref.Append("instance_type_configs"))
}

func (mif MasterInstanceFleetAttributes) LaunchSpecifications() terra.ListValue[MasterInstanceFleetLaunchSpecificationsAttributes] {
	return terra.ReferenceAsList[MasterInstanceFleetLaunchSpecificationsAttributes](mif.ref.Append("launch_specifications"))
}

type MasterInstanceFleetInstanceTypeConfigsAttributes struct {
	ref terra.Reference
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return itc.ref, nil
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetInstanceTypeConfigsAttributes {
	return MasterInstanceFleetInstanceTypeConfigsAttributes{ref: ref}
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return itc.ref.InternalTokens()
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("bid_price"))
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) BidPriceAsPercentageOfOnDemandPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("bid_price_as_percentage_of_on_demand_price"))
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("instance_type"))
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) WeightedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("weighted_capacity"))
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) Configurations() terra.SetValue[MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes] {
	return terra.ReferenceAsSet[MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes](itc.ref.Append("configurations"))
}

func (itc MasterInstanceFleetInstanceTypeConfigsAttributes) EbsConfig() terra.SetValue[MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes] {
	return terra.ReferenceAsSet[MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes](itc.ref.Append("ebs_config"))
}

type MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes struct {
	ref terra.Reference
}

func (c MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes {
	return MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes{ref: ref}
}

func (c MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) Classification() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("classification"))
}

func (c MasterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("properties"))
}

type MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes {
	return MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes{ref: ref}
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec MasterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type MasterInstanceFleetLaunchSpecificationsAttributes struct {
	ref terra.Reference
}

func (ls MasterInstanceFleetLaunchSpecificationsAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls MasterInstanceFleetLaunchSpecificationsAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetLaunchSpecificationsAttributes {
	return MasterInstanceFleetLaunchSpecificationsAttributes{ref: ref}
}

func (ls MasterInstanceFleetLaunchSpecificationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls MasterInstanceFleetLaunchSpecificationsAttributes) OnDemandSpecification() terra.ListValue[MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes] {
	return terra.ReferenceAsList[MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes](ls.ref.Append("on_demand_specification"))
}

func (ls MasterInstanceFleetLaunchSpecificationsAttributes) SpotSpecification() terra.ListValue[MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes] {
	return terra.ReferenceAsList[MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes](ls.ref.Append("spot_specification"))
}

type MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes struct {
	ref terra.Reference
}

func (ods MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ods.ref, nil
}

func (ods MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes {
	return MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes{ref: ref}
}

func (ods MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ods.ref.InternalTokens()
}

func (ods MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ods.ref.Append("allocation_strategy"))
}

type MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes struct {
	ref terra.Reference
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalWithRef(ref terra.Reference) MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes {
	return MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes{ref: ref}
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("allocation_strategy"))
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) BlockDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("block_duration_minutes"))
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) TimeoutAction() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("timeout_action"))
}

func (ss MasterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) TimeoutDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("timeout_duration_minutes"))
}

type MasterInstanceGroupAttributes struct {
	ref terra.Reference
}

func (mig MasterInstanceGroupAttributes) InternalRef() (terra.Reference, error) {
	return mig.ref, nil
}

func (mig MasterInstanceGroupAttributes) InternalWithRef(ref terra.Reference) MasterInstanceGroupAttributes {
	return MasterInstanceGroupAttributes{ref: ref}
}

func (mig MasterInstanceGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mig.ref.InternalTokens()
}

func (mig MasterInstanceGroupAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(mig.ref.Append("bid_price"))
}

func (mig MasterInstanceGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mig.ref.Append("id"))
}

func (mig MasterInstanceGroupAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(mig.ref.Append("instance_count"))
}

func (mig MasterInstanceGroupAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(mig.ref.Append("instance_type"))
}

func (mig MasterInstanceGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mig.ref.Append("name"))
}

func (mig MasterInstanceGroupAttributes) EbsConfig() terra.SetValue[MasterInstanceGroupEbsConfigAttributes] {
	return terra.ReferenceAsSet[MasterInstanceGroupEbsConfigAttributes](mig.ref.Append("ebs_config"))
}

type MasterInstanceGroupEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec MasterInstanceGroupEbsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec MasterInstanceGroupEbsConfigAttributes) InternalWithRef(ref terra.Reference) MasterInstanceGroupEbsConfigAttributes {
	return MasterInstanceGroupEbsConfigAttributes{ref: ref}
}

func (ec MasterInstanceGroupEbsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec MasterInstanceGroupEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec MasterInstanceGroupEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec MasterInstanceGroupEbsConfigAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("throughput"))
}

func (ec MasterInstanceGroupEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec MasterInstanceGroupEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type PlacementGroupConfigState struct {
	InstanceRole      string `json:"instance_role"`
	PlacementStrategy string `json:"placement_strategy"`
}

type StepState struct {
	ActionOnFailure string               `json:"action_on_failure"`
	Name            string               `json:"name"`
	HadoopJarStep   []HadoopJarStepState `json:"hadoop_jar_step"`
}

type HadoopJarStepState struct {
	Args       []string          `json:"args"`
	Jar        string            `json:"jar"`
	MainClass  string            `json:"main_class"`
	Properties map[string]string `json:"properties"`
}

type AutoTerminationPolicyState struct {
	IdleTimeout float64 `json:"idle_timeout"`
}

type BootstrapActionState struct {
	Args []string `json:"args"`
	Name string   `json:"name"`
	Path string   `json:"path"`
}

type CoreInstanceFleetState struct {
	Id                          string                                       `json:"id"`
	Name                        string                                       `json:"name"`
	ProvisionedOnDemandCapacity float64                                      `json:"provisioned_on_demand_capacity"`
	ProvisionedSpotCapacity     float64                                      `json:"provisioned_spot_capacity"`
	TargetOnDemandCapacity      float64                                      `json:"target_on_demand_capacity"`
	TargetSpotCapacity          float64                                      `json:"target_spot_capacity"`
	InstanceTypeConfigs         []CoreInstanceFleetInstanceTypeConfigsState  `json:"instance_type_configs"`
	LaunchSpecifications        []CoreInstanceFleetLaunchSpecificationsState `json:"launch_specifications"`
}

type CoreInstanceFleetInstanceTypeConfigsState struct {
	BidPrice                            string                                                    `json:"bid_price"`
	BidPriceAsPercentageOfOnDemandPrice float64                                                   `json:"bid_price_as_percentage_of_on_demand_price"`
	InstanceType                        string                                                    `json:"instance_type"`
	WeightedCapacity                    float64                                                   `json:"weighted_capacity"`
	Configurations                      []CoreInstanceFleetInstanceTypeConfigsConfigurationsState `json:"configurations"`
	EbsConfig                           []CoreInstanceFleetInstanceTypeConfigsEbsConfigState      `json:"ebs_config"`
}

type CoreInstanceFleetInstanceTypeConfigsConfigurationsState struct {
	Classification string            `json:"classification"`
	Properties     map[string]string `json:"properties"`
}

type CoreInstanceFleetInstanceTypeConfigsEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}

type CoreInstanceFleetLaunchSpecificationsState struct {
	OnDemandSpecification []CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationState `json:"on_demand_specification"`
	SpotSpecification     []CoreInstanceFleetLaunchSpecificationsSpotSpecificationState     `json:"spot_specification"`
}

type CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationState struct {
	AllocationStrategy string `json:"allocation_strategy"`
}

type CoreInstanceFleetLaunchSpecificationsSpotSpecificationState struct {
	AllocationStrategy     string  `json:"allocation_strategy"`
	BlockDurationMinutes   float64 `json:"block_duration_minutes"`
	TimeoutAction          string  `json:"timeout_action"`
	TimeoutDurationMinutes float64 `json:"timeout_duration_minutes"`
}

type CoreInstanceGroupState struct {
	AutoscalingPolicy string                            `json:"autoscaling_policy"`
	BidPrice          string                            `json:"bid_price"`
	Id                string                            `json:"id"`
	InstanceCount     float64                           `json:"instance_count"`
	InstanceType      string                            `json:"instance_type"`
	Name              string                            `json:"name"`
	EbsConfig         []CoreInstanceGroupEbsConfigState `json:"ebs_config"`
}

type CoreInstanceGroupEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Throughput         float64 `json:"throughput"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}

type Ec2AttributesState struct {
	AdditionalMasterSecurityGroups string   `json:"additional_master_security_groups"`
	AdditionalSlaveSecurityGroups  string   `json:"additional_slave_security_groups"`
	EmrManagedMasterSecurityGroup  string   `json:"emr_managed_master_security_group"`
	EmrManagedSlaveSecurityGroup   string   `json:"emr_managed_slave_security_group"`
	InstanceProfile                string   `json:"instance_profile"`
	KeyName                        string   `json:"key_name"`
	ServiceAccessSecurityGroup     string   `json:"service_access_security_group"`
	SubnetId                       string   `json:"subnet_id"`
	SubnetIds                      []string `json:"subnet_ids"`
}

type KerberosAttributesState struct {
	AdDomainJoinPassword             string `json:"ad_domain_join_password"`
	AdDomainJoinUser                 string `json:"ad_domain_join_user"`
	CrossRealmTrustPrincipalPassword string `json:"cross_realm_trust_principal_password"`
	KdcAdminPassword                 string `json:"kdc_admin_password"`
	Realm                            string `json:"realm"`
}

type MasterInstanceFleetState struct {
	Id                          string                                         `json:"id"`
	Name                        string                                         `json:"name"`
	ProvisionedOnDemandCapacity float64                                        `json:"provisioned_on_demand_capacity"`
	ProvisionedSpotCapacity     float64                                        `json:"provisioned_spot_capacity"`
	TargetOnDemandCapacity      float64                                        `json:"target_on_demand_capacity"`
	TargetSpotCapacity          float64                                        `json:"target_spot_capacity"`
	InstanceTypeConfigs         []MasterInstanceFleetInstanceTypeConfigsState  `json:"instance_type_configs"`
	LaunchSpecifications        []MasterInstanceFleetLaunchSpecificationsState `json:"launch_specifications"`
}

type MasterInstanceFleetInstanceTypeConfigsState struct {
	BidPrice                            string                                                      `json:"bid_price"`
	BidPriceAsPercentageOfOnDemandPrice float64                                                     `json:"bid_price_as_percentage_of_on_demand_price"`
	InstanceType                        string                                                      `json:"instance_type"`
	WeightedCapacity                    float64                                                     `json:"weighted_capacity"`
	Configurations                      []MasterInstanceFleetInstanceTypeConfigsConfigurationsState `json:"configurations"`
	EbsConfig                           []MasterInstanceFleetInstanceTypeConfigsEbsConfigState      `json:"ebs_config"`
}

type MasterInstanceFleetInstanceTypeConfigsConfigurationsState struct {
	Classification string            `json:"classification"`
	Properties     map[string]string `json:"properties"`
}

type MasterInstanceFleetInstanceTypeConfigsEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}

type MasterInstanceFleetLaunchSpecificationsState struct {
	OnDemandSpecification []MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationState `json:"on_demand_specification"`
	SpotSpecification     []MasterInstanceFleetLaunchSpecificationsSpotSpecificationState     `json:"spot_specification"`
}

type MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationState struct {
	AllocationStrategy string `json:"allocation_strategy"`
}

type MasterInstanceFleetLaunchSpecificationsSpotSpecificationState struct {
	AllocationStrategy     string  `json:"allocation_strategy"`
	BlockDurationMinutes   float64 `json:"block_duration_minutes"`
	TimeoutAction          string  `json:"timeout_action"`
	TimeoutDurationMinutes float64 `json:"timeout_duration_minutes"`
}

type MasterInstanceGroupState struct {
	BidPrice      string                              `json:"bid_price"`
	Id            string                              `json:"id"`
	InstanceCount float64                             `json:"instance_count"`
	InstanceType  string                              `json:"instance_type"`
	Name          string                              `json:"name"`
	EbsConfig     []MasterInstanceGroupEbsConfigState `json:"ebs_config"`
}

type MasterInstanceGroupEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Throughput         float64 `json:"throughput"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}
