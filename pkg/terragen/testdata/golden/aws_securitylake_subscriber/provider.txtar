-- out/provider.go --
// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import "github.com/golingon/lingon/pkg/terra"

var _ terra.Provider = (*Provider)(nil)

/*
Provider is the provider for hashicorp/aws.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.44.0/docs
*/
type Provider struct {
	/*
	   AccessKey is optional. The access key for API operations. You can retrieve this
	   from the 'Security & Credentials' section of the AWS console.
	*/
	AccessKey terra.StringValue `hcl:"access_key,attr"`
	// AllowedAccountIds is optional.
	AllowedAccountIds terra.SetValue[terra.StringValue] `hcl:"allowed_account_ids,attr"`
	// CustomCaBundle is optional. File containing custom root and intermediate certificates. Can also be configured using the `AWS_CA_BUNDLE` environment variable. (Setting `ca_bundle` in the shared config file is not supported.)
	CustomCaBundle terra.StringValue `hcl:"custom_ca_bundle,attr"`
	// Ec2MetadataServiceEndpoint is optional. Address of the EC2 metadata service endpoint to use. Can also be configured using the `AWS_EC2_METADATA_SERVICE_ENDPOINT` environment variable.
	Ec2MetadataServiceEndpoint terra.StringValue `hcl:"ec2_metadata_service_endpoint,attr"`
	// Ec2MetadataServiceEndpointMode is optional. Protocol to use with EC2 metadata service endpoint.Valid values are `IPv4` and `IPv6`. Can also be configured using the `AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE` environment variable.
	Ec2MetadataServiceEndpointMode terra.StringValue `hcl:"ec2_metadata_service_endpoint_mode,attr"`
	// ForbiddenAccountIds is optional.
	ForbiddenAccountIds terra.SetValue[terra.StringValue] `hcl:"forbidden_account_ids,attr"`
	// HttpProxy is optional. URL of a proxy to use for HTTP requests when accessing the AWS API. Can also be set using the `HTTP_PROXY` or `http_proxy` environment variables.
	HttpProxy terra.StringValue `hcl:"http_proxy,attr"`
	// HttpsProxy is optional. URL of a proxy to use for HTTPS requests when accessing the AWS API. Can also be set using the `HTTPS_PROXY` or `https_proxy` environment variables.
	HttpsProxy terra.StringValue `hcl:"https_proxy,attr"`
	// Insecure is optional. Explicitly allow the provider to perform "insecure" SSL requests. If omitted, default value is `false`
	Insecure terra.BoolValue `hcl:"insecure,attr"`
	/*
	   MaxRetries is optional. The maximum number of times an AWS API request is
	   being executed. If the API request still fails, an error is
	   thrown.
	*/
	MaxRetries terra.NumberValue `hcl:"max_retries,attr"`
	// NoProxy is optional. Comma-separated list of hosts that should not use HTTP or HTTPS proxies. Can also be set using the `NO_PROXY` or `no_proxy` environment variables.
	NoProxy terra.StringValue `hcl:"no_proxy,attr"`
	/*
	   Profile is optional. The profile for API operations. If not set, the default profile
	   created with `aws configure` will be used.
	*/
	Profile terra.StringValue `hcl:"profile,attr"`
	/*
	   Region is optional. The region where AWS operations will take place. Examples
	   are us-east-1, us-west-2, etc.
	*/
	Region terra.StringValue `hcl:"region,attr"`
	// RetryMode is optional. Specifies how retries are attempted. Valid values are `standard` and `adaptive`. Can also be configured using the `AWS_RETRY_MODE` environment variable.
	RetryMode terra.StringValue `hcl:"retry_mode,attr"`
	// S3UsEast1RegionalEndpoint is optional. Specifies whether S3 API calls in the `us-east-1` region use the legacy global endpoint or a regional endpoint. Valid values are `legacy` or `regional`. Can also be configured using the `AWS_S3_US_EAST_1_REGIONAL_ENDPOINT` environment variable or the `s3_us_east_1_regional_endpoint` shared config file parameter
	S3UsEast1RegionalEndpoint terra.StringValue `hcl:"s3_us_east_1_regional_endpoint,attr"`
	/*
	   S3UsePathStyle is optional. Set this to true to enable the request to use path-style addressing,
	   i.e., https://s3.amazonaws.com/BUCKET/KEY. By default, the S3 client will
	   use virtual hosted bucket addressing when possible
	   (https://BUCKET.s3.amazonaws.com/KEY). Specific to the Amazon S3 service.
	*/
	S3UsePathStyle terra.BoolValue `hcl:"s3_use_path_style,attr"`
	/*
	   SecretKey is optional. The secret key for API operations. You can retrieve this
	   from the 'Security & Credentials' section of the AWS console.
	*/
	SecretKey terra.StringValue `hcl:"secret_key,attr"`
	// SharedConfigFiles is optional. List of paths to shared config files. If not set, defaults to [~/.aws/config].
	SharedConfigFiles terra.ListValue[terra.StringValue] `hcl:"shared_config_files,attr"`
	// SharedCredentialsFiles is optional. List of paths to shared credentials files. If not set, defaults to [~/.aws/credentials].
	SharedCredentialsFiles terra.ListValue[terra.StringValue] `hcl:"shared_credentials_files,attr"`
	// SkipCredentialsValidation is optional. Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS available/implemented.
	SkipCredentialsValidation terra.BoolValue `hcl:"skip_credentials_validation,attr"`
	// SkipMetadataApiCheck is optional. Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint.
	SkipMetadataApiCheck terra.StringValue `hcl:"skip_metadata_api_check,attr"`
	// SkipRegionValidation is optional. Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are not public (yet).
	SkipRegionValidation terra.BoolValue `hcl:"skip_region_validation,attr"`
	// SkipRequestingAccountId is optional. Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API.
	SkipRequestingAccountId terra.BoolValue `hcl:"skip_requesting_account_id,attr"`
	/*
	   StsRegion is optional. The region where AWS STS operations will take place. Examples
	   are us-east-1 and us-west-2.
	*/
	StsRegion terra.StringValue `hcl:"sts_region,attr"`
	/*
	   Token is optional. session token. A session token is only required if you are
	   using temporary security credentials.
	*/
	Token terra.StringValue `hcl:"token,attr"`
	// TokenBucketRateLimiterCapacity is optional. The capacity of the AWS SDK's token bucket rate limiter.
	TokenBucketRateLimiterCapacity terra.NumberValue `hcl:"token_bucket_rate_limiter_capacity,attr"`
	// UseDualstackEndpoint is optional. Resolve an endpoint with DualStack capability
	UseDualstackEndpoint terra.BoolValue `hcl:"use_dualstack_endpoint,attr"`
	// UseFipsEndpoint is optional. Resolve an endpoint with FIPS capability
	UseFipsEndpoint terra.BoolValue `hcl:"use_fips_endpoint,attr"`
	// AssumeRole is min=0.
	AssumeRole []AssumeRole `hcl:"assume_role,block" validate:"min=0"`
	// AssumeRoleWithWebIdentity is min=0.
	AssumeRoleWithWebIdentity []AssumeRoleWithWebIdentity `hcl:"assume_role_with_web_identity,block" validate:"min=0"`
	// DefaultTags is min=0. Configuration block with settings to default resource tags across all resources.
	DefaultTags []DefaultTags `hcl:"default_tags,block" validate:"min=0"`
	// Endpoints is min=0.
	Endpoints []Endpoints `hcl:"endpoints,block" validate:"min=0"`
	// IgnoreTags is min=0. Configuration block with settings to ignore resource tags across all resources.
	IgnoreTags []IgnoreTags `hcl:"ignore_tags,block" validate:"min=0"`
}

// LocalName returns the provider local name for [Provider].
func (p *Provider) LocalName() string {
	return "aws"
}

// Source returns the provider source for [Provider].
func (p *Provider) Source() string {
	return "hashicorp/aws"
}

// Version returns the provider version for [Provider].
func (p *Provider) Version() string {
	return "5.44.0"
}

// Configuration returns the provider configuration for [Provider].
func (p *Provider) Configuration() interface{} {
	return p
}
-- out/provider_types.go --
// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AssumeRole struct {
	// Duration is optional. The duration, between 15 minutes and 12 hours, of the role session. Valid time units are ns, us (or µs), ms, s, h, or m.
	Duration terra.StringValue `hcl:"duration,attr"`
	// ExternalId is optional. A unique identifier that might be required when you assume a role in another account.
	ExternalId terra.StringValue `hcl:"external_id,attr"`
	// Policy is optional. IAM Policy JSON describing further restricting permissions for the IAM Role being assumed.
	Policy terra.StringValue `hcl:"policy,attr"`
	// PolicyArns is optional. Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed.
	PolicyArns terra.SetValue[terra.StringValue] `hcl:"policy_arns,attr"`
	// RoleArn is optional. Amazon Resource Name (ARN) of an IAM Role to assume prior to making API calls.
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// SessionName is optional. An identifier for the assumed role session.
	SessionName terra.StringValue `hcl:"session_name,attr"`
	// SourceIdentity is optional. Source identity specified by the principal assuming the role.
	SourceIdentity terra.StringValue `hcl:"source_identity,attr"`
	// Tags is optional. Assume role session tags.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TransitiveTagKeys is optional. Assume role session tag keys to pass to any subsequent sessions.
	TransitiveTagKeys terra.SetValue[terra.StringValue] `hcl:"transitive_tag_keys,attr"`
}

type AssumeRoleWithWebIdentity struct {
	// Duration is optional. The duration, between 15 minutes and 12 hours, of the role session. Valid time units are ns, us (or µs), ms, s, h, or m.
	Duration terra.StringValue `hcl:"duration,attr"`
	// Policy is optional. IAM Policy JSON describing further restricting permissions for the IAM Role being assumed.
	Policy terra.StringValue `hcl:"policy,attr"`
	// PolicyArns is optional. Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed.
	PolicyArns terra.SetValue[terra.StringValue] `hcl:"policy_arns,attr"`
	// RoleArn is optional. Amazon Resource Name (ARN) of an IAM Role to assume prior to making API calls.
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// SessionName is optional. An identifier for the assumed role session.
	SessionName terra.StringValue `hcl:"session_name,attr"`
	// WebIdentityToken is optional.
	WebIdentityToken terra.StringValue `hcl:"web_identity_token,attr"`
	// WebIdentityTokenFile is optional.
	WebIdentityTokenFile terra.StringValue `hcl:"web_identity_token_file,attr"`
}

type DefaultTags struct {
	// Tags is optional. Resource tags to default across all resources
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type Endpoints struct {
	// Accessanalyzer is optional. Use this to override the default service endpoint URL
	Accessanalyzer terra.StringValue `hcl:"accessanalyzer,attr"`
	// Account is optional. Use this to override the default service endpoint URL
	Account terra.StringValue `hcl:"account,attr"`
	// Acm is optional. Use this to override the default service endpoint URL
	Acm terra.StringValue `hcl:"acm,attr"`
	// Acmpca is optional. Use this to override the default service endpoint URL
	Acmpca terra.StringValue `hcl:"acmpca,attr"`
	// Amg is optional. Use this to override the default service endpoint URL
	Amg terra.StringValue `hcl:"amg,attr"`
	// Amp is optional. Use this to override the default service endpoint URL
	Amp terra.StringValue `hcl:"amp,attr"`
	// Amplify is optional. Use this to override the default service endpoint URL
	Amplify terra.StringValue `hcl:"amplify,attr"`
	// Apigateway is optional. Use this to override the default service endpoint URL
	Apigateway terra.StringValue `hcl:"apigateway,attr"`
	// Apigatewayv2 is optional. Use this to override the default service endpoint URL
	Apigatewayv2 terra.StringValue `hcl:"apigatewayv2,attr"`
	// Appautoscaling is optional. Use this to override the default service endpoint URL
	Appautoscaling terra.StringValue `hcl:"appautoscaling,attr"`
	// Appconfig is optional. Use this to override the default service endpoint URL
	Appconfig terra.StringValue `hcl:"appconfig,attr"`
	// Appfabric is optional. Use this to override the default service endpoint URL
	Appfabric terra.StringValue `hcl:"appfabric,attr"`
	// Appflow is optional. Use this to override the default service endpoint URL
	Appflow terra.StringValue `hcl:"appflow,attr"`
	// Appintegrations is optional. Use this to override the default service endpoint URL
	Appintegrations terra.StringValue `hcl:"appintegrations,attr"`
	// Appintegrationsservice is optional. Use this to override the default service endpoint URL
	Appintegrationsservice terra.StringValue `hcl:"appintegrationsservice,attr"`
	// Applicationautoscaling is optional. Use this to override the default service endpoint URL
	Applicationautoscaling terra.StringValue `hcl:"applicationautoscaling,attr"`
	// Applicationinsights is optional. Use this to override the default service endpoint URL
	Applicationinsights terra.StringValue `hcl:"applicationinsights,attr"`
	// Appmesh is optional. Use this to override the default service endpoint URL
	Appmesh terra.StringValue `hcl:"appmesh,attr"`
	// Appregistry is optional. Use this to override the default service endpoint URL
	Appregistry terra.StringValue `hcl:"appregistry,attr"`
	// Apprunner is optional. Use this to override the default service endpoint URL
	Apprunner terra.StringValue `hcl:"apprunner,attr"`
	// Appstream is optional. Use this to override the default service endpoint URL
	Appstream terra.StringValue `hcl:"appstream,attr"`
	// Appsync is optional. Use this to override the default service endpoint URL
	Appsync terra.StringValue `hcl:"appsync,attr"`
	// Athena is optional. Use this to override the default service endpoint URL
	Athena terra.StringValue `hcl:"athena,attr"`
	// Auditmanager is optional. Use this to override the default service endpoint URL
	Auditmanager terra.StringValue `hcl:"auditmanager,attr"`
	// Autoscaling is optional. Use this to override the default service endpoint URL
	Autoscaling terra.StringValue `hcl:"autoscaling,attr"`
	// Autoscalingplans is optional. Use this to override the default service endpoint URL
	Autoscalingplans terra.StringValue `hcl:"autoscalingplans,attr"`
	// Backup is optional. Use this to override the default service endpoint URL
	Backup terra.StringValue `hcl:"backup,attr"`
	// Batch is optional. Use this to override the default service endpoint URL
	Batch terra.StringValue `hcl:"batch,attr"`
	// Beanstalk is optional. Use this to override the default service endpoint URL
	Beanstalk terra.StringValue `hcl:"beanstalk,attr"`
	// Bedrock is optional. Use this to override the default service endpoint URL
	Bedrock terra.StringValue `hcl:"bedrock,attr"`
	// Bedrockagent is optional. Use this to override the default service endpoint URL
	Bedrockagent terra.StringValue `hcl:"bedrockagent,attr"`
	// Budgets is optional. Use this to override the default service endpoint URL
	Budgets terra.StringValue `hcl:"budgets,attr"`
	// Ce is optional. Use this to override the default service endpoint URL
	Ce terra.StringValue `hcl:"ce,attr"`
	// Chime is optional. Use this to override the default service endpoint URL
	Chime terra.StringValue `hcl:"chime,attr"`
	// Chimesdkmediapipelines is optional. Use this to override the default service endpoint URL
	Chimesdkmediapipelines terra.StringValue `hcl:"chimesdkmediapipelines,attr"`
	// Chimesdkvoice is optional. Use this to override the default service endpoint URL
	Chimesdkvoice terra.StringValue `hcl:"chimesdkvoice,attr"`
	// Cleanrooms is optional. Use this to override the default service endpoint URL
	Cleanrooms terra.StringValue `hcl:"cleanrooms,attr"`
	// Cloud9 is optional. Use this to override the default service endpoint URL
	Cloud9 terra.StringValue `hcl:"cloud9,attr"`
	// Cloudcontrol is optional. Use this to override the default service endpoint URL
	Cloudcontrol terra.StringValue `hcl:"cloudcontrol,attr"`
	// Cloudcontrolapi is optional. Use this to override the default service endpoint URL
	Cloudcontrolapi terra.StringValue `hcl:"cloudcontrolapi,attr"`
	// Cloudformation is optional. Use this to override the default service endpoint URL
	Cloudformation terra.StringValue `hcl:"cloudformation,attr"`
	// Cloudfront is optional. Use this to override the default service endpoint URL
	Cloudfront terra.StringValue `hcl:"cloudfront,attr"`
	// Cloudfrontkeyvaluestore is optional. Use this to override the default service endpoint URL
	Cloudfrontkeyvaluestore terra.StringValue `hcl:"cloudfrontkeyvaluestore,attr"`
	// Cloudhsm is optional. Use this to override the default service endpoint URL
	Cloudhsm terra.StringValue `hcl:"cloudhsm,attr"`
	// Cloudhsmv2 is optional. Use this to override the default service endpoint URL
	Cloudhsmv2 terra.StringValue `hcl:"cloudhsmv2,attr"`
	// Cloudsearch is optional. Use this to override the default service endpoint URL
	Cloudsearch terra.StringValue `hcl:"cloudsearch,attr"`
	// Cloudtrail is optional. Use this to override the default service endpoint URL
	Cloudtrail terra.StringValue `hcl:"cloudtrail,attr"`
	// Cloudwatch is optional. Use this to override the default service endpoint URL
	Cloudwatch terra.StringValue `hcl:"cloudwatch,attr"`
	// Cloudwatchevents is optional. Use this to override the default service endpoint URL
	Cloudwatchevents terra.StringValue `hcl:"cloudwatchevents,attr"`
	// Cloudwatchevidently is optional. Use this to override the default service endpoint URL
	Cloudwatchevidently terra.StringValue `hcl:"cloudwatchevidently,attr"`
	// Cloudwatchlog is optional. Use this to override the default service endpoint URL
	Cloudwatchlog terra.StringValue `hcl:"cloudwatchlog,attr"`
	// Cloudwatchlogs is optional. Use this to override the default service endpoint URL
	Cloudwatchlogs terra.StringValue `hcl:"cloudwatchlogs,attr"`
	// Cloudwatchobservabilityaccessmanager is optional. Use this to override the default service endpoint URL
	Cloudwatchobservabilityaccessmanager terra.StringValue `hcl:"cloudwatchobservabilityaccessmanager,attr"`
	// Cloudwatchrum is optional. Use this to override the default service endpoint URL
	Cloudwatchrum terra.StringValue `hcl:"cloudwatchrum,attr"`
	// Codeartifact is optional. Use this to override the default service endpoint URL
	Codeartifact terra.StringValue `hcl:"codeartifact,attr"`
	// Codebuild is optional. Use this to override the default service endpoint URL
	Codebuild terra.StringValue `hcl:"codebuild,attr"`
	// Codecatalyst is optional. Use this to override the default service endpoint URL
	Codecatalyst terra.StringValue `hcl:"codecatalyst,attr"`
	// Codecommit is optional. Use this to override the default service endpoint URL
	Codecommit terra.StringValue `hcl:"codecommit,attr"`
	// Codedeploy is optional. Use this to override the default service endpoint URL
	Codedeploy terra.StringValue `hcl:"codedeploy,attr"`
	// Codeguruprofiler is optional. Use this to override the default service endpoint URL
	Codeguruprofiler terra.StringValue `hcl:"codeguruprofiler,attr"`
	// Codegurureviewer is optional. Use this to override the default service endpoint URL
	Codegurureviewer terra.StringValue `hcl:"codegurureviewer,attr"`
	// Codepipeline is optional. Use this to override the default service endpoint URL
	Codepipeline terra.StringValue `hcl:"codepipeline,attr"`
	// Codestarconnections is optional. Use this to override the default service endpoint URL
	Codestarconnections terra.StringValue `hcl:"codestarconnections,attr"`
	// Codestarnotifications is optional. Use this to override the default service endpoint URL
	Codestarnotifications terra.StringValue `hcl:"codestarnotifications,attr"`
	// Cognitoidentity is optional. Use this to override the default service endpoint URL
	Cognitoidentity terra.StringValue `hcl:"cognitoidentity,attr"`
	// Cognitoidentityprovider is optional. Use this to override the default service endpoint URL
	Cognitoidentityprovider terra.StringValue `hcl:"cognitoidentityprovider,attr"`
	// Cognitoidp is optional. Use this to override the default service endpoint URL
	Cognitoidp terra.StringValue `hcl:"cognitoidp,attr"`
	// Comprehend is optional. Use this to override the default service endpoint URL
	Comprehend terra.StringValue `hcl:"comprehend,attr"`
	// Computeoptimizer is optional. Use this to override the default service endpoint URL
	Computeoptimizer terra.StringValue `hcl:"computeoptimizer,attr"`
	// Config is optional. Use this to override the default service endpoint URL
	Config terra.StringValue `hcl:"config,attr"`
	// Configservice is optional. Use this to override the default service endpoint URL
	Configservice terra.StringValue `hcl:"configservice,attr"`
	// Connect is optional. Use this to override the default service endpoint URL
	Connect terra.StringValue `hcl:"connect,attr"`
	// Connectcases is optional. Use this to override the default service endpoint URL
	Connectcases terra.StringValue `hcl:"connectcases,attr"`
	// Controltower is optional. Use this to override the default service endpoint URL
	Controltower terra.StringValue `hcl:"controltower,attr"`
	// Costandusagereportservice is optional. Use this to override the default service endpoint URL
	Costandusagereportservice terra.StringValue `hcl:"costandusagereportservice,attr"`
	// Costexplorer is optional. Use this to override the default service endpoint URL
	Costexplorer terra.StringValue `hcl:"costexplorer,attr"`
	// Costoptimizationhub is optional. Use this to override the default service endpoint URL
	Costoptimizationhub terra.StringValue `hcl:"costoptimizationhub,attr"`
	// Cur is optional. Use this to override the default service endpoint URL
	Cur terra.StringValue `hcl:"cur,attr"`
	// Customerprofiles is optional. Use this to override the default service endpoint URL
	Customerprofiles terra.StringValue `hcl:"customerprofiles,attr"`
	// Databasemigration is optional. Use this to override the default service endpoint URL
	Databasemigration terra.StringValue `hcl:"databasemigration,attr"`
	// Databasemigrationservice is optional. Use this to override the default service endpoint URL
	Databasemigrationservice terra.StringValue `hcl:"databasemigrationservice,attr"`
	// Dataexchange is optional. Use this to override the default service endpoint URL
	Dataexchange terra.StringValue `hcl:"dataexchange,attr"`
	// Datapipeline is optional. Use this to override the default service endpoint URL
	Datapipeline terra.StringValue `hcl:"datapipeline,attr"`
	// Datasync is optional. Use this to override the default service endpoint URL
	Datasync terra.StringValue `hcl:"datasync,attr"`
	// Datazone is optional. Use this to override the default service endpoint URL
	Datazone terra.StringValue `hcl:"datazone,attr"`
	// Dax is optional. Use this to override the default service endpoint URL
	Dax terra.StringValue `hcl:"dax,attr"`
	// Deploy is optional. Use this to override the default service endpoint URL
	Deploy terra.StringValue `hcl:"deploy,attr"`
	// Detective is optional. Use this to override the default service endpoint URL
	Detective terra.StringValue `hcl:"detective,attr"`
	// Devicefarm is optional. Use this to override the default service endpoint URL
	Devicefarm terra.StringValue `hcl:"devicefarm,attr"`
	// Devopsguru is optional. Use this to override the default service endpoint URL
	Devopsguru terra.StringValue `hcl:"devopsguru,attr"`
	// Directconnect is optional. Use this to override the default service endpoint URL
	Directconnect terra.StringValue `hcl:"directconnect,attr"`
	// Directoryservice is optional. Use this to override the default service endpoint URL
	Directoryservice terra.StringValue `hcl:"directoryservice,attr"`
	// Dlm is optional. Use this to override the default service endpoint URL
	Dlm terra.StringValue `hcl:"dlm,attr"`
	// Dms is optional. Use this to override the default service endpoint URL
	Dms terra.StringValue `hcl:"dms,attr"`
	// Docdb is optional. Use this to override the default service endpoint URL
	Docdb terra.StringValue `hcl:"docdb,attr"`
	// Docdbelastic is optional. Use this to override the default service endpoint URL
	Docdbelastic terra.StringValue `hcl:"docdbelastic,attr"`
	// Ds is optional. Use this to override the default service endpoint URL
	Ds terra.StringValue `hcl:"ds,attr"`
	// Dynamodb is optional. Use this to override the default service endpoint URL
	Dynamodb terra.StringValue `hcl:"dynamodb,attr"`
	// Ec2 is optional. Use this to override the default service endpoint URL
	Ec2 terra.StringValue `hcl:"ec2,attr"`
	// Ecr is optional. Use this to override the default service endpoint URL
	Ecr terra.StringValue `hcl:"ecr,attr"`
	// Ecrpublic is optional. Use this to override the default service endpoint URL
	Ecrpublic terra.StringValue `hcl:"ecrpublic,attr"`
	// Ecs is optional. Use this to override the default service endpoint URL
	Ecs terra.StringValue `hcl:"ecs,attr"`
	// Efs is optional. Use this to override the default service endpoint URL
	Efs terra.StringValue `hcl:"efs,attr"`
	// Eks is optional. Use this to override the default service endpoint URL
	Eks terra.StringValue `hcl:"eks,attr"`
	// Elasticache is optional. Use this to override the default service endpoint URL
	Elasticache terra.StringValue `hcl:"elasticache,attr"`
	// Elasticbeanstalk is optional. Use this to override the default service endpoint URL
	Elasticbeanstalk terra.StringValue `hcl:"elasticbeanstalk,attr"`
	// Elasticloadbalancing is optional. Use this to override the default service endpoint URL
	Elasticloadbalancing terra.StringValue `hcl:"elasticloadbalancing,attr"`
	// Elasticloadbalancingv2 is optional. Use this to override the default service endpoint URL
	Elasticloadbalancingv2 terra.StringValue `hcl:"elasticloadbalancingv2,attr"`
	// Elasticsearch is optional. Use this to override the default service endpoint URL
	Elasticsearch terra.StringValue `hcl:"elasticsearch,attr"`
	// Elasticsearchservice is optional. Use this to override the default service endpoint URL
	Elasticsearchservice terra.StringValue `hcl:"elasticsearchservice,attr"`
	// Elastictranscoder is optional. Use this to override the default service endpoint URL
	Elastictranscoder terra.StringValue `hcl:"elastictranscoder,attr"`
	// Elb is optional. Use this to override the default service endpoint URL
	Elb terra.StringValue `hcl:"elb,attr"`
	// Elbv2 is optional. Use this to override the default service endpoint URL
	Elbv2 terra.StringValue `hcl:"elbv2,attr"`
	// Emr is optional. Use this to override the default service endpoint URL
	Emr terra.StringValue `hcl:"emr,attr"`
	// Emrcontainers is optional. Use this to override the default service endpoint URL
	Emrcontainers terra.StringValue `hcl:"emrcontainers,attr"`
	// Emrserverless is optional. Use this to override the default service endpoint URL
	Emrserverless terra.StringValue `hcl:"emrserverless,attr"`
	// Es is optional. Use this to override the default service endpoint URL
	Es terra.StringValue `hcl:"es,attr"`
	// Eventbridge is optional. Use this to override the default service endpoint URL
	Eventbridge terra.StringValue `hcl:"eventbridge,attr"`
	// Events is optional. Use this to override the default service endpoint URL
	Events terra.StringValue `hcl:"events,attr"`
	// Evidently is optional. Use this to override the default service endpoint URL
	Evidently terra.StringValue `hcl:"evidently,attr"`
	// Finspace is optional. Use this to override the default service endpoint URL
	Finspace terra.StringValue `hcl:"finspace,attr"`
	// Firehose is optional. Use this to override the default service endpoint URL
	Firehose terra.StringValue `hcl:"firehose,attr"`
	// Fis is optional. Use this to override the default service endpoint URL
	Fis terra.StringValue `hcl:"fis,attr"`
	// Fms is optional. Use this to override the default service endpoint URL
	Fms terra.StringValue `hcl:"fms,attr"`
	// Fsx is optional. Use this to override the default service endpoint URL
	Fsx terra.StringValue `hcl:"fsx,attr"`
	// Gamelift is optional. Use this to override the default service endpoint URL
	Gamelift terra.StringValue `hcl:"gamelift,attr"`
	// Glacier is optional. Use this to override the default service endpoint URL
	Glacier terra.StringValue `hcl:"glacier,attr"`
	// Globalaccelerator is optional. Use this to override the default service endpoint URL
	Globalaccelerator terra.StringValue `hcl:"globalaccelerator,attr"`
	// Glue is optional. Use this to override the default service endpoint URL
	Glue terra.StringValue `hcl:"glue,attr"`
	// Grafana is optional. Use this to override the default service endpoint URL
	Grafana terra.StringValue `hcl:"grafana,attr"`
	// Greengrass is optional. Use this to override the default service endpoint URL
	Greengrass terra.StringValue `hcl:"greengrass,attr"`
	// Groundstation is optional. Use this to override the default service endpoint URL
	Groundstation terra.StringValue `hcl:"groundstation,attr"`
	// Guardduty is optional. Use this to override the default service endpoint URL
	Guardduty terra.StringValue `hcl:"guardduty,attr"`
	// Healthlake is optional. Use this to override the default service endpoint URL
	Healthlake terra.StringValue `hcl:"healthlake,attr"`
	// Iam is optional. Use this to override the default service endpoint URL
	Iam terra.StringValue `hcl:"iam,attr"`
	// Identitystore is optional. Use this to override the default service endpoint URL
	Identitystore terra.StringValue `hcl:"identitystore,attr"`
	// Imagebuilder is optional. Use this to override the default service endpoint URL
	Imagebuilder terra.StringValue `hcl:"imagebuilder,attr"`
	// Inspector is optional. Use this to override the default service endpoint URL
	Inspector terra.StringValue `hcl:"inspector,attr"`
	// Inspector2 is optional. Use this to override the default service endpoint URL
	Inspector2 terra.StringValue `hcl:"inspector2,attr"`
	// Inspectorv2 is optional. Use this to override the default service endpoint URL
	Inspectorv2 terra.StringValue `hcl:"inspectorv2,attr"`
	// Internetmonitor is optional. Use this to override the default service endpoint URL
	Internetmonitor terra.StringValue `hcl:"internetmonitor,attr"`
	// Iot is optional. Use this to override the default service endpoint URL
	Iot terra.StringValue `hcl:"iot,attr"`
	// Iotanalytics is optional. Use this to override the default service endpoint URL
	Iotanalytics terra.StringValue `hcl:"iotanalytics,attr"`
	// Iotevents is optional. Use this to override the default service endpoint URL
	Iotevents terra.StringValue `hcl:"iotevents,attr"`
	// Ivs is optional. Use this to override the default service endpoint URL
	Ivs terra.StringValue `hcl:"ivs,attr"`
	// Ivschat is optional. Use this to override the default service endpoint URL
	Ivschat terra.StringValue `hcl:"ivschat,attr"`
	// Kafka is optional. Use this to override the default service endpoint URL
	Kafka terra.StringValue `hcl:"kafka,attr"`
	// Kafkaconnect is optional. Use this to override the default service endpoint URL
	Kafkaconnect terra.StringValue `hcl:"kafkaconnect,attr"`
	// Kendra is optional. Use this to override the default service endpoint URL
	Kendra terra.StringValue `hcl:"kendra,attr"`
	// Keyspaces is optional. Use this to override the default service endpoint URL
	Keyspaces terra.StringValue `hcl:"keyspaces,attr"`
	// Kinesis is optional. Use this to override the default service endpoint URL
	Kinesis terra.StringValue `hcl:"kinesis,attr"`
	// Kinesisanalytics is optional. Use this to override the default service endpoint URL
	Kinesisanalytics terra.StringValue `hcl:"kinesisanalytics,attr"`
	// Kinesisanalyticsv2 is optional. Use this to override the default service endpoint URL
	Kinesisanalyticsv2 terra.StringValue `hcl:"kinesisanalyticsv2,attr"`
	// Kinesisvideo is optional. Use this to override the default service endpoint URL
	Kinesisvideo terra.StringValue `hcl:"kinesisvideo,attr"`
	// Kms is optional. Use this to override the default service endpoint URL
	Kms terra.StringValue `hcl:"kms,attr"`
	// Lakeformation is optional. Use this to override the default service endpoint URL
	Lakeformation terra.StringValue `hcl:"lakeformation,attr"`
	// Lambda is optional. Use this to override the default service endpoint URL
	Lambda terra.StringValue `hcl:"lambda,attr"`
	// Launchwizard is optional. Use this to override the default service endpoint URL
	Launchwizard terra.StringValue `hcl:"launchwizard,attr"`
	// Lex is optional. Use this to override the default service endpoint URL
	Lex terra.StringValue `hcl:"lex,attr"`
	// Lexmodelbuilding is optional. Use this to override the default service endpoint URL
	Lexmodelbuilding terra.StringValue `hcl:"lexmodelbuilding,attr"`
	// Lexmodelbuildingservice is optional. Use this to override the default service endpoint URL
	Lexmodelbuildingservice terra.StringValue `hcl:"lexmodelbuildingservice,attr"`
	// Lexmodels is optional. Use this to override the default service endpoint URL
	Lexmodels terra.StringValue `hcl:"lexmodels,attr"`
	// Lexmodelsv2 is optional. Use this to override the default service endpoint URL
	Lexmodelsv2 terra.StringValue `hcl:"lexmodelsv2,attr"`
	// Lexv2Models is optional. Use this to override the default service endpoint URL
	Lexv2Models terra.StringValue `hcl:"lexv2models,attr"`
	// Licensemanager is optional. Use this to override the default service endpoint URL
	Licensemanager terra.StringValue `hcl:"licensemanager,attr"`
	// Lightsail is optional. Use this to override the default service endpoint URL
	Lightsail terra.StringValue `hcl:"lightsail,attr"`
	// Location is optional. Use this to override the default service endpoint URL
	Location terra.StringValue `hcl:"location,attr"`
	// Locationservice is optional. Use this to override the default service endpoint URL
	Locationservice terra.StringValue `hcl:"locationservice,attr"`
	// Logs is optional. Use this to override the default service endpoint URL
	Logs terra.StringValue `hcl:"logs,attr"`
	// Lookoutmetrics is optional. Use this to override the default service endpoint URL
	Lookoutmetrics terra.StringValue `hcl:"lookoutmetrics,attr"`
	// M2 is optional. Use this to override the default service endpoint URL
	M2 terra.StringValue `hcl:"m2,attr"`
	// Macie2 is optional. Use this to override the default service endpoint URL
	Macie2 terra.StringValue `hcl:"macie2,attr"`
	// Managedgrafana is optional. Use this to override the default service endpoint URL
	Managedgrafana terra.StringValue `hcl:"managedgrafana,attr"`
	// Mediaconnect is optional. Use this to override the default service endpoint URL
	Mediaconnect terra.StringValue `hcl:"mediaconnect,attr"`
	// Mediaconvert is optional. Use this to override the default service endpoint URL
	Mediaconvert terra.StringValue `hcl:"mediaconvert,attr"`
	// Medialive is optional. Use this to override the default service endpoint URL
	Medialive terra.StringValue `hcl:"medialive,attr"`
	// Mediapackage is optional. Use this to override the default service endpoint URL
	Mediapackage terra.StringValue `hcl:"mediapackage,attr"`
	// Mediapackagev2 is optional. Use this to override the default service endpoint URL
	Mediapackagev2 terra.StringValue `hcl:"mediapackagev2,attr"`
	// Mediastore is optional. Use this to override the default service endpoint URL
	Mediastore terra.StringValue `hcl:"mediastore,attr"`
	// Memorydb is optional. Use this to override the default service endpoint URL
	Memorydb terra.StringValue `hcl:"memorydb,attr"`
	// Mq is optional. Use this to override the default service endpoint URL
	Mq terra.StringValue `hcl:"mq,attr"`
	// Msk is optional. Use this to override the default service endpoint URL
	Msk terra.StringValue `hcl:"msk,attr"`
	// Mwaa is optional. Use this to override the default service endpoint URL
	Mwaa terra.StringValue `hcl:"mwaa,attr"`
	// Neptune is optional. Use this to override the default service endpoint URL
	Neptune terra.StringValue `hcl:"neptune,attr"`
	// Networkfirewall is optional. Use this to override the default service endpoint URL
	Networkfirewall terra.StringValue `hcl:"networkfirewall,attr"`
	// Networkmanager is optional. Use this to override the default service endpoint URL
	Networkmanager terra.StringValue `hcl:"networkmanager,attr"`
	// Oam is optional. Use this to override the default service endpoint URL
	Oam terra.StringValue `hcl:"oam,attr"`
	// Opensearch is optional. Use this to override the default service endpoint URL
	Opensearch terra.StringValue `hcl:"opensearch,attr"`
	// Opensearchingestion is optional. Use this to override the default service endpoint URL
	Opensearchingestion terra.StringValue `hcl:"opensearchingestion,attr"`
	// Opensearchserverless is optional. Use this to override the default service endpoint URL
	Opensearchserverless terra.StringValue `hcl:"opensearchserverless,attr"`
	// Opensearchservice is optional. Use this to override the default service endpoint URL
	Opensearchservice terra.StringValue `hcl:"opensearchservice,attr"`
	// Opsworks is optional. Use this to override the default service endpoint URL
	Opsworks terra.StringValue `hcl:"opsworks,attr"`
	// Organizations is optional. Use this to override the default service endpoint URL
	Organizations terra.StringValue `hcl:"organizations,attr"`
	// Osis is optional. Use this to override the default service endpoint URL
	Osis terra.StringValue `hcl:"osis,attr"`
	// Outposts is optional. Use this to override the default service endpoint URL
	Outposts terra.StringValue `hcl:"outposts,attr"`
	// Paymentcryptography is optional. Use this to override the default service endpoint URL
	Paymentcryptography terra.StringValue `hcl:"paymentcryptography,attr"`
	// Pcaconnectorad is optional. Use this to override the default service endpoint URL
	Pcaconnectorad terra.StringValue `hcl:"pcaconnectorad,attr"`
	// Pinpoint is optional. Use this to override the default service endpoint URL
	Pinpoint terra.StringValue `hcl:"pinpoint,attr"`
	// Pipes is optional. Use this to override the default service endpoint URL
	Pipes terra.StringValue `hcl:"pipes,attr"`
	// Polly is optional. Use this to override the default service endpoint URL
	Polly terra.StringValue `hcl:"polly,attr"`
	// Pricing is optional. Use this to override the default service endpoint URL
	Pricing terra.StringValue `hcl:"pricing,attr"`
	// Prometheus is optional. Use this to override the default service endpoint URL
	Prometheus terra.StringValue `hcl:"prometheus,attr"`
	// Prometheusservice is optional. Use this to override the default service endpoint URL
	Prometheusservice terra.StringValue `hcl:"prometheusservice,attr"`
	// Qbusiness is optional. Use this to override the default service endpoint URL
	Qbusiness terra.StringValue `hcl:"qbusiness,attr"`
	// Qldb is optional. Use this to override the default service endpoint URL
	Qldb terra.StringValue `hcl:"qldb,attr"`
	// Quicksight is optional. Use this to override the default service endpoint URL
	Quicksight terra.StringValue `hcl:"quicksight,attr"`
	// Ram is optional. Use this to override the default service endpoint URL
	Ram terra.StringValue `hcl:"ram,attr"`
	// Rbin is optional. Use this to override the default service endpoint URL
	Rbin terra.StringValue `hcl:"rbin,attr"`
	// Rds is optional. Use this to override the default service endpoint URL
	Rds terra.StringValue `hcl:"rds,attr"`
	// Recyclebin is optional. Use this to override the default service endpoint URL
	Recyclebin terra.StringValue `hcl:"recyclebin,attr"`
	// Redshift is optional. Use this to override the default service endpoint URL
	Redshift terra.StringValue `hcl:"redshift,attr"`
	// Redshiftdata is optional. Use this to override the default service endpoint URL
	Redshiftdata terra.StringValue `hcl:"redshiftdata,attr"`
	// Redshiftdataapiservice is optional. Use this to override the default service endpoint URL
	Redshiftdataapiservice terra.StringValue `hcl:"redshiftdataapiservice,attr"`
	// Redshiftserverless is optional. Use this to override the default service endpoint URL
	Redshiftserverless terra.StringValue `hcl:"redshiftserverless,attr"`
	// Rekognition is optional. Use this to override the default service endpoint URL
	Rekognition terra.StringValue `hcl:"rekognition,attr"`
	// Resourceexplorer2 is optional. Use this to override the default service endpoint URL
	Resourceexplorer2 terra.StringValue `hcl:"resourceexplorer2,attr"`
	// Resourcegroups is optional. Use this to override the default service endpoint URL
	Resourcegroups terra.StringValue `hcl:"resourcegroups,attr"`
	// Resourcegroupstagging is optional. Use this to override the default service endpoint URL
	Resourcegroupstagging terra.StringValue `hcl:"resourcegroupstagging,attr"`
	// Resourcegroupstaggingapi is optional. Use this to override the default service endpoint URL
	Resourcegroupstaggingapi terra.StringValue `hcl:"resourcegroupstaggingapi,attr"`
	// Rolesanywhere is optional. Use this to override the default service endpoint URL
	Rolesanywhere terra.StringValue `hcl:"rolesanywhere,attr"`
	// Route53 is optional. Use this to override the default service endpoint URL
	Route53 terra.StringValue `hcl:"route53,attr"`
	// Route53Domains is optional. Use this to override the default service endpoint URL
	Route53Domains terra.StringValue `hcl:"route53domains,attr"`
	// Route53Recoverycontrolconfig is optional. Use this to override the default service endpoint URL
	Route53Recoverycontrolconfig terra.StringValue `hcl:"route53recoverycontrolconfig,attr"`
	// Route53Recoveryreadiness is optional. Use this to override the default service endpoint URL
	Route53Recoveryreadiness terra.StringValue `hcl:"route53recoveryreadiness,attr"`
	// Route53Resolver is optional. Use this to override the default service endpoint URL
	Route53Resolver terra.StringValue `hcl:"route53resolver,attr"`
	// Rum is optional. Use this to override the default service endpoint URL
	Rum terra.StringValue `hcl:"rum,attr"`
	// S3 is optional. Use this to override the default service endpoint URL
	S3 terra.StringValue `hcl:"s3,attr"`
	// S3Api is optional. Use this to override the default service endpoint URL
	S3Api terra.StringValue `hcl:"s3api,attr"`
	// S3Control is optional. Use this to override the default service endpoint URL
	S3Control terra.StringValue `hcl:"s3control,attr"`
	// S3Outposts is optional. Use this to override the default service endpoint URL
	S3Outposts terra.StringValue `hcl:"s3outposts,attr"`
	// Sagemaker is optional. Use this to override the default service endpoint URL
	Sagemaker terra.StringValue `hcl:"sagemaker,attr"`
	// Scheduler is optional. Use this to override the default service endpoint URL
	Scheduler terra.StringValue `hcl:"scheduler,attr"`
	// Schemas is optional. Use this to override the default service endpoint URL
	Schemas terra.StringValue `hcl:"schemas,attr"`
	// Sdb is optional. Use this to override the default service endpoint URL
	Sdb terra.StringValue `hcl:"sdb,attr"`
	// Secretsmanager is optional. Use this to override the default service endpoint URL
	Secretsmanager terra.StringValue `hcl:"secretsmanager,attr"`
	// Securityhub is optional. Use this to override the default service endpoint URL
	Securityhub terra.StringValue `hcl:"securityhub,attr"`
	// Securitylake is optional. Use this to override the default service endpoint URL
	Securitylake terra.StringValue `hcl:"securitylake,attr"`
	// Serverlessapplicationrepository is optional. Use this to override the default service endpoint URL
	Serverlessapplicationrepository terra.StringValue `hcl:"serverlessapplicationrepository,attr"`
	// Serverlessapprepo is optional. Use this to override the default service endpoint URL
	Serverlessapprepo terra.StringValue `hcl:"serverlessapprepo,attr"`
	// Serverlessrepo is optional. Use this to override the default service endpoint URL
	Serverlessrepo terra.StringValue `hcl:"serverlessrepo,attr"`
	// Servicecatalog is optional. Use this to override the default service endpoint URL
	Servicecatalog terra.StringValue `hcl:"servicecatalog,attr"`
	// Servicecatalogappregistry is optional. Use this to override the default service endpoint URL
	Servicecatalogappregistry terra.StringValue `hcl:"servicecatalogappregistry,attr"`
	// Servicediscovery is optional. Use this to override the default service endpoint URL
	Servicediscovery terra.StringValue `hcl:"servicediscovery,attr"`
	// Servicequotas is optional. Use this to override the default service endpoint URL
	Servicequotas terra.StringValue `hcl:"servicequotas,attr"`
	// Ses is optional. Use this to override the default service endpoint URL
	Ses terra.StringValue `hcl:"ses,attr"`
	// Sesv2 is optional. Use this to override the default service endpoint URL
	Sesv2 terra.StringValue `hcl:"sesv2,attr"`
	// Sfn is optional. Use this to override the default service endpoint URL
	Sfn terra.StringValue `hcl:"sfn,attr"`
	// Shield is optional. Use this to override the default service endpoint URL
	Shield terra.StringValue `hcl:"shield,attr"`
	// Signer is optional. Use this to override the default service endpoint URL
	Signer terra.StringValue `hcl:"signer,attr"`
	// Simpledb is optional. Use this to override the default service endpoint URL
	Simpledb terra.StringValue `hcl:"simpledb,attr"`
	// Sns is optional. Use this to override the default service endpoint URL
	Sns terra.StringValue `hcl:"sns,attr"`
	// Sqs is optional. Use this to override the default service endpoint URL
	Sqs terra.StringValue `hcl:"sqs,attr"`
	// Ssm is optional. Use this to override the default service endpoint URL
	Ssm terra.StringValue `hcl:"ssm,attr"`
	// Ssmcontacts is optional. Use this to override the default service endpoint URL
	Ssmcontacts terra.StringValue `hcl:"ssmcontacts,attr"`
	// Ssmincidents is optional. Use this to override the default service endpoint URL
	Ssmincidents terra.StringValue `hcl:"ssmincidents,attr"`
	// Ssmsap is optional. Use this to override the default service endpoint URL
	Ssmsap terra.StringValue `hcl:"ssmsap,attr"`
	// Sso is optional. Use this to override the default service endpoint URL
	Sso terra.StringValue `hcl:"sso,attr"`
	// Ssoadmin is optional. Use this to override the default service endpoint URL
	Ssoadmin terra.StringValue `hcl:"ssoadmin,attr"`
	// Stepfunctions is optional. Use this to override the default service endpoint URL
	Stepfunctions terra.StringValue `hcl:"stepfunctions,attr"`
	// Storagegateway is optional. Use this to override the default service endpoint URL
	Storagegateway terra.StringValue `hcl:"storagegateway,attr"`
	// Sts is optional. Use this to override the default service endpoint URL
	Sts terra.StringValue `hcl:"sts,attr"`
	// Swf is optional. Use this to override the default service endpoint URL
	Swf terra.StringValue `hcl:"swf,attr"`
	// Synthetics is optional. Use this to override the default service endpoint URL
	Synthetics terra.StringValue `hcl:"synthetics,attr"`
	// Timestreamwrite is optional. Use this to override the default service endpoint URL
	Timestreamwrite terra.StringValue `hcl:"timestreamwrite,attr"`
	// Transcribe is optional. Use this to override the default service endpoint URL
	Transcribe terra.StringValue `hcl:"transcribe,attr"`
	// Transcribeservice is optional. Use this to override the default service endpoint URL
	Transcribeservice terra.StringValue `hcl:"transcribeservice,attr"`
	// Transfer is optional. Use this to override the default service endpoint URL
	Transfer terra.StringValue `hcl:"transfer,attr"`
	// Verifiedpermissions is optional. Use this to override the default service endpoint URL
	Verifiedpermissions terra.StringValue `hcl:"verifiedpermissions,attr"`
	// Vpclattice is optional. Use this to override the default service endpoint URL
	Vpclattice terra.StringValue `hcl:"vpclattice,attr"`
	// Waf is optional. Use this to override the default service endpoint URL
	Waf terra.StringValue `hcl:"waf,attr"`
	// Wafregional is optional. Use this to override the default service endpoint URL
	Wafregional terra.StringValue `hcl:"wafregional,attr"`
	// Wafv2 is optional. Use this to override the default service endpoint URL
	Wafv2 terra.StringValue `hcl:"wafv2,attr"`
	// Wellarchitected is optional. Use this to override the default service endpoint URL
	Wellarchitected terra.StringValue `hcl:"wellarchitected,attr"`
	// Worklink is optional. Use this to override the default service endpoint URL
	Worklink terra.StringValue `hcl:"worklink,attr"`
	// Workspaces is optional. Use this to override the default service endpoint URL
	Workspaces terra.StringValue `hcl:"workspaces,attr"`
	// Xray is optional. Use this to override the default service endpoint URL
	Xray terra.StringValue `hcl:"xray,attr"`
}

type IgnoreTags struct {
	// KeyPrefixes is optional. Resource tag key prefixes to ignore across all resources.
	KeyPrefixes terra.SetValue[terra.StringValue] `hcl:"key_prefixes,attr"`
	// Keys is optional. Resource tag keys to ignore across all resources.
	Keys terra.SetValue[terra.StringValue] `hcl:"keys,attr"`
}

type assumeRoleAttributes struct {
	ref terra.Reference
}

func (ar assumeRoleAttributes) InternalRef() (terra.Reference, error) {
	return ar.ref, nil
}

func (ar assumeRoleAttributes) InternalWithRef(ref terra.Reference) assumeRoleAttributes {
	return assumeRoleAttributes{ref: ref}
}

func (ar assumeRoleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ar.ref.InternalTokens()
}

func (ar assumeRoleAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("duration"))
}

func (ar assumeRoleAttributes) ExternalId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("external_id"))
}

func (ar assumeRoleAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("policy"))
}

func (ar assumeRoleAttributes) PolicyArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ar.ref.Append("policy_arns"))
}

func (ar assumeRoleAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("role_arn"))
}

func (ar assumeRoleAttributes) SessionName() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("session_name"))
}

func (ar assumeRoleAttributes) SourceIdentity() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("source_identity"))
}

func (ar assumeRoleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ar.ref.Append("tags"))
}

func (ar assumeRoleAttributes) TransitiveTagKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ar.ref.Append("transitive_tag_keys"))
}

type assumeRoleWithWebIdentityAttributes struct {
	ref terra.Reference
}

func (arwwi assumeRoleWithWebIdentityAttributes) InternalRef() (terra.Reference, error) {
	return arwwi.ref, nil
}

func (arwwi assumeRoleWithWebIdentityAttributes) InternalWithRef(ref terra.Reference) assumeRoleWithWebIdentityAttributes {
	return assumeRoleWithWebIdentityAttributes{ref: ref}
}

func (arwwi assumeRoleWithWebIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return arwwi.ref.InternalTokens()
}

func (arwwi assumeRoleWithWebIdentityAttributes) Duration() terra.StringValue {
	return terra.ReferenceAsString(arwwi.ref.Append("duration"))
}

func (arwwi assumeRoleWithWebIdentityAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(arwwi.ref.Append("policy"))
}

func (arwwi assumeRoleWithWebIdentityAttributes) PolicyArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arwwi.ref.Append("policy_arns"))
}

func (arwwi assumeRoleWithWebIdentityAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(arwwi.ref.Append("role_arn"))
}

func (arwwi assumeRoleWithWebIdentityAttributes) SessionName() terra.StringValue {
	return terra.ReferenceAsString(arwwi.ref.Append("session_name"))
}

func (arwwi assumeRoleWithWebIdentityAttributes) WebIdentityToken() terra.StringValue {
	return terra.ReferenceAsString(arwwi.ref.Append("web_identity_token"))
}

func (arwwi assumeRoleWithWebIdentityAttributes) WebIdentityTokenFile() terra.StringValue {
	return terra.ReferenceAsString(arwwi.ref.Append("web_identity_token_file"))
}

type defaultTagsAttributes struct {
	ref terra.Reference
}

func (dt defaultTagsAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt defaultTagsAttributes) InternalWithRef(ref terra.Reference) defaultTagsAttributes {
	return defaultTagsAttributes{ref: ref}
}

func (dt defaultTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt defaultTagsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dt.ref.Append("tags"))
}

type endpointsAttributes struct {
	ref terra.Reference
}

func (e endpointsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e endpointsAttributes) InternalWithRef(ref terra.Reference) endpointsAttributes {
	return endpointsAttributes{ref: ref}
}

func (e endpointsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e endpointsAttributes) Accessanalyzer() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("accessanalyzer"))
}

func (e endpointsAttributes) Account() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("account"))
}

func (e endpointsAttributes) Acm() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("acm"))
}

func (e endpointsAttributes) Acmpca() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("acmpca"))
}

func (e endpointsAttributes) Amg() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("amg"))
}

func (e endpointsAttributes) Amp() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("amp"))
}

func (e endpointsAttributes) Amplify() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("amplify"))
}

func (e endpointsAttributes) Apigateway() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("apigateway"))
}

func (e endpointsAttributes) Apigatewayv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("apigatewayv2"))
}

func (e endpointsAttributes) Appautoscaling() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appautoscaling"))
}

func (e endpointsAttributes) Appconfig() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appconfig"))
}

func (e endpointsAttributes) Appfabric() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appfabric"))
}

func (e endpointsAttributes) Appflow() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appflow"))
}

func (e endpointsAttributes) Appintegrations() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appintegrations"))
}

func (e endpointsAttributes) Appintegrationsservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appintegrationsservice"))
}

func (e endpointsAttributes) Applicationautoscaling() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("applicationautoscaling"))
}

func (e endpointsAttributes) Applicationinsights() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("applicationinsights"))
}

func (e endpointsAttributes) Appmesh() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appmesh"))
}

func (e endpointsAttributes) Appregistry() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appregistry"))
}

func (e endpointsAttributes) Apprunner() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("apprunner"))
}

func (e endpointsAttributes) Appstream() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appstream"))
}

func (e endpointsAttributes) Appsync() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("appsync"))
}

func (e endpointsAttributes) Athena() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("athena"))
}

func (e endpointsAttributes) Auditmanager() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("auditmanager"))
}

func (e endpointsAttributes) Autoscaling() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("autoscaling"))
}

func (e endpointsAttributes) Autoscalingplans() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("autoscalingplans"))
}

func (e endpointsAttributes) Backup() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("backup"))
}

func (e endpointsAttributes) Batch() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("batch"))
}

func (e endpointsAttributes) Beanstalk() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("beanstalk"))
}

func (e endpointsAttributes) Bedrock() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("bedrock"))
}

func (e endpointsAttributes) Bedrockagent() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("bedrockagent"))
}

func (e endpointsAttributes) Budgets() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("budgets"))
}

func (e endpointsAttributes) Ce() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ce"))
}

func (e endpointsAttributes) Chime() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("chime"))
}

func (e endpointsAttributes) Chimesdkmediapipelines() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("chimesdkmediapipelines"))
}

func (e endpointsAttributes) Chimesdkvoice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("chimesdkvoice"))
}

func (e endpointsAttributes) Cleanrooms() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cleanrooms"))
}

func (e endpointsAttributes) Cloud9() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloud9"))
}

func (e endpointsAttributes) Cloudcontrol() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudcontrol"))
}

func (e endpointsAttributes) Cloudcontrolapi() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudcontrolapi"))
}

func (e endpointsAttributes) Cloudformation() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudformation"))
}

func (e endpointsAttributes) Cloudfront() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudfront"))
}

func (e endpointsAttributes) Cloudfrontkeyvaluestore() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudfrontkeyvaluestore"))
}

func (e endpointsAttributes) Cloudhsm() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudhsm"))
}

func (e endpointsAttributes) Cloudhsmv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudhsmv2"))
}

func (e endpointsAttributes) Cloudsearch() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudsearch"))
}

func (e endpointsAttributes) Cloudtrail() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudtrail"))
}

func (e endpointsAttributes) Cloudwatch() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatch"))
}

func (e endpointsAttributes) Cloudwatchevents() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatchevents"))
}

func (e endpointsAttributes) Cloudwatchevidently() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatchevidently"))
}

func (e endpointsAttributes) Cloudwatchlog() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatchlog"))
}

func (e endpointsAttributes) Cloudwatchlogs() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatchlogs"))
}

func (e endpointsAttributes) Cloudwatchobservabilityaccessmanager() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatchobservabilityaccessmanager"))
}

func (e endpointsAttributes) Cloudwatchrum() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cloudwatchrum"))
}

func (e endpointsAttributes) Codeartifact() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codeartifact"))
}

func (e endpointsAttributes) Codebuild() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codebuild"))
}

func (e endpointsAttributes) Codecatalyst() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codecatalyst"))
}

func (e endpointsAttributes) Codecommit() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codecommit"))
}

func (e endpointsAttributes) Codedeploy() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codedeploy"))
}

func (e endpointsAttributes) Codeguruprofiler() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codeguruprofiler"))
}

func (e endpointsAttributes) Codegurureviewer() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codegurureviewer"))
}

func (e endpointsAttributes) Codepipeline() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codepipeline"))
}

func (e endpointsAttributes) Codestarconnections() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codestarconnections"))
}

func (e endpointsAttributes) Codestarnotifications() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("codestarnotifications"))
}

func (e endpointsAttributes) Cognitoidentity() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cognitoidentity"))
}

func (e endpointsAttributes) Cognitoidentityprovider() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cognitoidentityprovider"))
}

func (e endpointsAttributes) Cognitoidp() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cognitoidp"))
}

func (e endpointsAttributes) Comprehend() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("comprehend"))
}

func (e endpointsAttributes) Computeoptimizer() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("computeoptimizer"))
}

func (e endpointsAttributes) Config() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("config"))
}

func (e endpointsAttributes) Configservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("configservice"))
}

func (e endpointsAttributes) Connect() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("connect"))
}

func (e endpointsAttributes) Connectcases() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("connectcases"))
}

func (e endpointsAttributes) Controltower() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("controltower"))
}

func (e endpointsAttributes) Costandusagereportservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("costandusagereportservice"))
}

func (e endpointsAttributes) Costexplorer() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("costexplorer"))
}

func (e endpointsAttributes) Costoptimizationhub() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("costoptimizationhub"))
}

func (e endpointsAttributes) Cur() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cur"))
}

func (e endpointsAttributes) Customerprofiles() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("customerprofiles"))
}

func (e endpointsAttributes) Databasemigration() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("databasemigration"))
}

func (e endpointsAttributes) Databasemigrationservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("databasemigrationservice"))
}

func (e endpointsAttributes) Dataexchange() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("dataexchange"))
}

func (e endpointsAttributes) Datapipeline() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("datapipeline"))
}

func (e endpointsAttributes) Datasync() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("datasync"))
}

func (e endpointsAttributes) Datazone() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("datazone"))
}

func (e endpointsAttributes) Dax() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("dax"))
}

func (e endpointsAttributes) Deploy() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("deploy"))
}

func (e endpointsAttributes) Detective() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("detective"))
}

func (e endpointsAttributes) Devicefarm() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("devicefarm"))
}

func (e endpointsAttributes) Devopsguru() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("devopsguru"))
}

func (e endpointsAttributes) Directconnect() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("directconnect"))
}

func (e endpointsAttributes) Directoryservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("directoryservice"))
}

func (e endpointsAttributes) Dlm() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("dlm"))
}

func (e endpointsAttributes) Dms() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("dms"))
}

func (e endpointsAttributes) Docdb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("docdb"))
}

func (e endpointsAttributes) Docdbelastic() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("docdbelastic"))
}

func (e endpointsAttributes) Ds() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ds"))
}

func (e endpointsAttributes) Dynamodb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("dynamodb"))
}

func (e endpointsAttributes) Ec2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ec2"))
}

func (e endpointsAttributes) Ecr() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ecr"))
}

func (e endpointsAttributes) Ecrpublic() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ecrpublic"))
}

func (e endpointsAttributes) Ecs() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ecs"))
}

func (e endpointsAttributes) Efs() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("efs"))
}

func (e endpointsAttributes) Eks() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("eks"))
}

func (e endpointsAttributes) Elasticache() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elasticache"))
}

func (e endpointsAttributes) Elasticbeanstalk() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elasticbeanstalk"))
}

func (e endpointsAttributes) Elasticloadbalancing() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elasticloadbalancing"))
}

func (e endpointsAttributes) Elasticloadbalancingv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elasticloadbalancingv2"))
}

func (e endpointsAttributes) Elasticsearch() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elasticsearch"))
}

func (e endpointsAttributes) Elasticsearchservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elasticsearchservice"))
}

func (e endpointsAttributes) Elastictranscoder() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elastictranscoder"))
}

func (e endpointsAttributes) Elb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elb"))
}

func (e endpointsAttributes) Elbv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("elbv2"))
}

func (e endpointsAttributes) Emr() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("emr"))
}

func (e endpointsAttributes) Emrcontainers() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("emrcontainers"))
}

func (e endpointsAttributes) Emrserverless() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("emrserverless"))
}

func (e endpointsAttributes) Es() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("es"))
}

func (e endpointsAttributes) Eventbridge() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("eventbridge"))
}

func (e endpointsAttributes) Events() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("events"))
}

func (e endpointsAttributes) Evidently() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("evidently"))
}

func (e endpointsAttributes) Finspace() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("finspace"))
}

func (e endpointsAttributes) Firehose() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("firehose"))
}

func (e endpointsAttributes) Fis() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("fis"))
}

func (e endpointsAttributes) Fms() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("fms"))
}

func (e endpointsAttributes) Fsx() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("fsx"))
}

func (e endpointsAttributes) Gamelift() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("gamelift"))
}

func (e endpointsAttributes) Glacier() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("glacier"))
}

func (e endpointsAttributes) Globalaccelerator() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("globalaccelerator"))
}

func (e endpointsAttributes) Glue() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("glue"))
}

func (e endpointsAttributes) Grafana() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("grafana"))
}

func (e endpointsAttributes) Greengrass() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("greengrass"))
}

func (e endpointsAttributes) Groundstation() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("groundstation"))
}

func (e endpointsAttributes) Guardduty() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("guardduty"))
}

func (e endpointsAttributes) Healthlake() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("healthlake"))
}

func (e endpointsAttributes) Iam() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("iam"))
}

func (e endpointsAttributes) Identitystore() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("identitystore"))
}

func (e endpointsAttributes) Imagebuilder() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("imagebuilder"))
}

func (e endpointsAttributes) Inspector() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("inspector"))
}

func (e endpointsAttributes) Inspector2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("inspector2"))
}

func (e endpointsAttributes) Inspectorv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("inspectorv2"))
}

func (e endpointsAttributes) Internetmonitor() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("internetmonitor"))
}

func (e endpointsAttributes) Iot() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("iot"))
}

func (e endpointsAttributes) Iotanalytics() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("iotanalytics"))
}

func (e endpointsAttributes) Iotevents() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("iotevents"))
}

func (e endpointsAttributes) Ivs() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ivs"))
}

func (e endpointsAttributes) Ivschat() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ivschat"))
}

func (e endpointsAttributes) Kafka() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kafka"))
}

func (e endpointsAttributes) Kafkaconnect() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kafkaconnect"))
}

func (e endpointsAttributes) Kendra() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kendra"))
}

func (e endpointsAttributes) Keyspaces() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("keyspaces"))
}

func (e endpointsAttributes) Kinesis() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kinesis"))
}

func (e endpointsAttributes) Kinesisanalytics() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kinesisanalytics"))
}

func (e endpointsAttributes) Kinesisanalyticsv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kinesisanalyticsv2"))
}

func (e endpointsAttributes) Kinesisvideo() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kinesisvideo"))
}

func (e endpointsAttributes) Kms() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kms"))
}

func (e endpointsAttributes) Lakeformation() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lakeformation"))
}

func (e endpointsAttributes) Lambda() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lambda"))
}

func (e endpointsAttributes) Launchwizard() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("launchwizard"))
}

func (e endpointsAttributes) Lex() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lex"))
}

func (e endpointsAttributes) Lexmodelbuilding() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lexmodelbuilding"))
}

func (e endpointsAttributes) Lexmodelbuildingservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lexmodelbuildingservice"))
}

func (e endpointsAttributes) Lexmodels() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lexmodels"))
}

func (e endpointsAttributes) Lexmodelsv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lexmodelsv2"))
}

func (e endpointsAttributes) Lexv2Models() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lexv2models"))
}

func (e endpointsAttributes) Licensemanager() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("licensemanager"))
}

func (e endpointsAttributes) Lightsail() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lightsail"))
}

func (e endpointsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("location"))
}

func (e endpointsAttributes) Locationservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("locationservice"))
}

func (e endpointsAttributes) Logs() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("logs"))
}

func (e endpointsAttributes) Lookoutmetrics() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("lookoutmetrics"))
}

func (e endpointsAttributes) M2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("m2"))
}

func (e endpointsAttributes) Macie2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("macie2"))
}

func (e endpointsAttributes) Managedgrafana() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("managedgrafana"))
}

func (e endpointsAttributes) Mediaconnect() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mediaconnect"))
}

func (e endpointsAttributes) Mediaconvert() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mediaconvert"))
}

func (e endpointsAttributes) Medialive() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("medialive"))
}

func (e endpointsAttributes) Mediapackage() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mediapackage"))
}

func (e endpointsAttributes) Mediapackagev2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mediapackagev2"))
}

func (e endpointsAttributes) Mediastore() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mediastore"))
}

func (e endpointsAttributes) Memorydb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("memorydb"))
}

func (e endpointsAttributes) Mq() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mq"))
}

func (e endpointsAttributes) Msk() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("msk"))
}

func (e endpointsAttributes) Mwaa() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("mwaa"))
}

func (e endpointsAttributes) Neptune() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("neptune"))
}

func (e endpointsAttributes) Networkfirewall() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("networkfirewall"))
}

func (e endpointsAttributes) Networkmanager() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("networkmanager"))
}

func (e endpointsAttributes) Oam() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("oam"))
}

func (e endpointsAttributes) Opensearch() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("opensearch"))
}

func (e endpointsAttributes) Opensearchingestion() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("opensearchingestion"))
}

func (e endpointsAttributes) Opensearchserverless() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("opensearchserverless"))
}

func (e endpointsAttributes) Opensearchservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("opensearchservice"))
}

func (e endpointsAttributes) Opsworks() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("opsworks"))
}

func (e endpointsAttributes) Organizations() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("organizations"))
}

func (e endpointsAttributes) Osis() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("osis"))
}

func (e endpointsAttributes) Outposts() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("outposts"))
}

func (e endpointsAttributes) Paymentcryptography() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("paymentcryptography"))
}

func (e endpointsAttributes) Pcaconnectorad() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("pcaconnectorad"))
}

func (e endpointsAttributes) Pinpoint() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("pinpoint"))
}

func (e endpointsAttributes) Pipes() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("pipes"))
}

func (e endpointsAttributes) Polly() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("polly"))
}

func (e endpointsAttributes) Pricing() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("pricing"))
}

func (e endpointsAttributes) Prometheus() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("prometheus"))
}

func (e endpointsAttributes) Prometheusservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("prometheusservice"))
}

func (e endpointsAttributes) Qbusiness() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("qbusiness"))
}

func (e endpointsAttributes) Qldb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("qldb"))
}

func (e endpointsAttributes) Quicksight() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("quicksight"))
}

func (e endpointsAttributes) Ram() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ram"))
}

func (e endpointsAttributes) Rbin() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("rbin"))
}

func (e endpointsAttributes) Rds() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("rds"))
}

func (e endpointsAttributes) Recyclebin() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("recyclebin"))
}

func (e endpointsAttributes) Redshift() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("redshift"))
}

func (e endpointsAttributes) Redshiftdata() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("redshiftdata"))
}

func (e endpointsAttributes) Redshiftdataapiservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("redshiftdataapiservice"))
}

func (e endpointsAttributes) Redshiftserverless() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("redshiftserverless"))
}

func (e endpointsAttributes) Rekognition() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("rekognition"))
}

func (e endpointsAttributes) Resourceexplorer2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("resourceexplorer2"))
}

func (e endpointsAttributes) Resourcegroups() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("resourcegroups"))
}

func (e endpointsAttributes) Resourcegroupstagging() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("resourcegroupstagging"))
}

func (e endpointsAttributes) Resourcegroupstaggingapi() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("resourcegroupstaggingapi"))
}

func (e endpointsAttributes) Rolesanywhere() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("rolesanywhere"))
}

func (e endpointsAttributes) Route53() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("route53"))
}

func (e endpointsAttributes) Route53Domains() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("route53domains"))
}

func (e endpointsAttributes) Route53Recoverycontrolconfig() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("route53recoverycontrolconfig"))
}

func (e endpointsAttributes) Route53Recoveryreadiness() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("route53recoveryreadiness"))
}

func (e endpointsAttributes) Route53Resolver() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("route53resolver"))
}

func (e endpointsAttributes) Rum() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("rum"))
}

func (e endpointsAttributes) S3() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("s3"))
}

func (e endpointsAttributes) S3Api() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("s3api"))
}

func (e endpointsAttributes) S3Control() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("s3control"))
}

func (e endpointsAttributes) S3Outposts() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("s3outposts"))
}

func (e endpointsAttributes) Sagemaker() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sagemaker"))
}

func (e endpointsAttributes) Scheduler() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("scheduler"))
}

func (e endpointsAttributes) Schemas() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("schemas"))
}

func (e endpointsAttributes) Sdb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sdb"))
}

func (e endpointsAttributes) Secretsmanager() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("secretsmanager"))
}

func (e endpointsAttributes) Securityhub() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("securityhub"))
}

func (e endpointsAttributes) Securitylake() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("securitylake"))
}

func (e endpointsAttributes) Serverlessapplicationrepository() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("serverlessapplicationrepository"))
}

func (e endpointsAttributes) Serverlessapprepo() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("serverlessapprepo"))
}

func (e endpointsAttributes) Serverlessrepo() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("serverlessrepo"))
}

func (e endpointsAttributes) Servicecatalog() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("servicecatalog"))
}

func (e endpointsAttributes) Servicecatalogappregistry() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("servicecatalogappregistry"))
}

func (e endpointsAttributes) Servicediscovery() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("servicediscovery"))
}

func (e endpointsAttributes) Servicequotas() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("servicequotas"))
}

func (e endpointsAttributes) Ses() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ses"))
}

func (e endpointsAttributes) Sesv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sesv2"))
}

func (e endpointsAttributes) Sfn() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sfn"))
}

func (e endpointsAttributes) Shield() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("shield"))
}

func (e endpointsAttributes) Signer() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("signer"))
}

func (e endpointsAttributes) Simpledb() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("simpledb"))
}

func (e endpointsAttributes) Sns() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sns"))
}

func (e endpointsAttributes) Sqs() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sqs"))
}

func (e endpointsAttributes) Ssm() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ssm"))
}

func (e endpointsAttributes) Ssmcontacts() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ssmcontacts"))
}

func (e endpointsAttributes) Ssmincidents() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ssmincidents"))
}

func (e endpointsAttributes) Ssmsap() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ssmsap"))
}

func (e endpointsAttributes) Sso() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sso"))
}

func (e endpointsAttributes) Ssoadmin() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ssoadmin"))
}

func (e endpointsAttributes) Stepfunctions() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("stepfunctions"))
}

func (e endpointsAttributes) Storagegateway() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("storagegateway"))
}

func (e endpointsAttributes) Sts() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("sts"))
}

func (e endpointsAttributes) Swf() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("swf"))
}

func (e endpointsAttributes) Synthetics() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("synthetics"))
}

func (e endpointsAttributes) Timestreamwrite() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("timestreamwrite"))
}

func (e endpointsAttributes) Transcribe() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("transcribe"))
}

func (e endpointsAttributes) Transcribeservice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("transcribeservice"))
}

func (e endpointsAttributes) Transfer() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("transfer"))
}

func (e endpointsAttributes) Verifiedpermissions() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("verifiedpermissions"))
}

func (e endpointsAttributes) Vpclattice() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("vpclattice"))
}

func (e endpointsAttributes) Waf() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("waf"))
}

func (e endpointsAttributes) Wafregional() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("wafregional"))
}

func (e endpointsAttributes) Wafv2() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("wafv2"))
}

func (e endpointsAttributes) Wellarchitected() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("wellarchitected"))
}

func (e endpointsAttributes) Worklink() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("worklink"))
}

func (e endpointsAttributes) Workspaces() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("workspaces"))
}

func (e endpointsAttributes) Xray() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("xray"))
}

type ignoreTagsAttributes struct {
	ref terra.Reference
}

func (it ignoreTagsAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it ignoreTagsAttributes) InternalWithRef(ref terra.Reference) ignoreTagsAttributes {
	return ignoreTagsAttributes{ref: ref}
}

func (it ignoreTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it ignoreTagsAttributes) KeyPrefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](it.ref.Append("key_prefixes"))
}

func (it ignoreTagsAttributes) Keys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](it.ref.Append("keys"))
}

type AssumeRoleState struct {
	Duration          string            `json:"duration"`
	ExternalId        string            `json:"external_id"`
	Policy            string            `json:"policy"`
	PolicyArns        []string          `json:"policy_arns"`
	RoleArn           string            `json:"role_arn"`
	SessionName       string            `json:"session_name"`
	SourceIdentity    string            `json:"source_identity"`
	Tags              map[string]string `json:"tags"`
	TransitiveTagKeys []string          `json:"transitive_tag_keys"`
}

type AssumeRoleWithWebIdentityState struct {
	Duration             string   `json:"duration"`
	Policy               string   `json:"policy"`
	PolicyArns           []string `json:"policy_arns"`
	RoleArn              string   `json:"role_arn"`
	SessionName          string   `json:"session_name"`
	WebIdentityToken     string   `json:"web_identity_token"`
	WebIdentityTokenFile string   `json:"web_identity_token_file"`
}

type DefaultTagsState struct {
	Tags map[string]string `json:"tags"`
}

type EndpointsState struct {
	Accessanalyzer                       string `json:"accessanalyzer"`
	Account                              string `json:"account"`
	Acm                                  string `json:"acm"`
	Acmpca                               string `json:"acmpca"`
	Amg                                  string `json:"amg"`
	Amp                                  string `json:"amp"`
	Amplify                              string `json:"amplify"`
	Apigateway                           string `json:"apigateway"`
	Apigatewayv2                         string `json:"apigatewayv2"`
	Appautoscaling                       string `json:"appautoscaling"`
	Appconfig                            string `json:"appconfig"`
	Appfabric                            string `json:"appfabric"`
	Appflow                              string `json:"appflow"`
	Appintegrations                      string `json:"appintegrations"`
	Appintegrationsservice               string `json:"appintegrationsservice"`
	Applicationautoscaling               string `json:"applicationautoscaling"`
	Applicationinsights                  string `json:"applicationinsights"`
	Appmesh                              string `json:"appmesh"`
	Appregistry                          string `json:"appregistry"`
	Apprunner                            string `json:"apprunner"`
	Appstream                            string `json:"appstream"`
	Appsync                              string `json:"appsync"`
	Athena                               string `json:"athena"`
	Auditmanager                         string `json:"auditmanager"`
	Autoscaling                          string `json:"autoscaling"`
	Autoscalingplans                     string `json:"autoscalingplans"`
	Backup                               string `json:"backup"`
	Batch                                string `json:"batch"`
	Beanstalk                            string `json:"beanstalk"`
	Bedrock                              string `json:"bedrock"`
	Bedrockagent                         string `json:"bedrockagent"`
	Budgets                              string `json:"budgets"`
	Ce                                   string `json:"ce"`
	Chime                                string `json:"chime"`
	Chimesdkmediapipelines               string `json:"chimesdkmediapipelines"`
	Chimesdkvoice                        string `json:"chimesdkvoice"`
	Cleanrooms                           string `json:"cleanrooms"`
	Cloud9                               string `json:"cloud9"`
	Cloudcontrol                         string `json:"cloudcontrol"`
	Cloudcontrolapi                      string `json:"cloudcontrolapi"`
	Cloudformation                       string `json:"cloudformation"`
	Cloudfront                           string `json:"cloudfront"`
	Cloudfrontkeyvaluestore              string `json:"cloudfrontkeyvaluestore"`
	Cloudhsm                             string `json:"cloudhsm"`
	Cloudhsmv2                           string `json:"cloudhsmv2"`
	Cloudsearch                          string `json:"cloudsearch"`
	Cloudtrail                           string `json:"cloudtrail"`
	Cloudwatch                           string `json:"cloudwatch"`
	Cloudwatchevents                     string `json:"cloudwatchevents"`
	Cloudwatchevidently                  string `json:"cloudwatchevidently"`
	Cloudwatchlog                        string `json:"cloudwatchlog"`
	Cloudwatchlogs                       string `json:"cloudwatchlogs"`
	Cloudwatchobservabilityaccessmanager string `json:"cloudwatchobservabilityaccessmanager"`
	Cloudwatchrum                        string `json:"cloudwatchrum"`
	Codeartifact                         string `json:"codeartifact"`
	Codebuild                            string `json:"codebuild"`
	Codecatalyst                         string `json:"codecatalyst"`
	Codecommit                           string `json:"codecommit"`
	Codedeploy                           string `json:"codedeploy"`
	Codeguruprofiler                     string `json:"codeguruprofiler"`
	Codegurureviewer                     string `json:"codegurureviewer"`
	Codepipeline                         string `json:"codepipeline"`
	Codestarconnections                  string `json:"codestarconnections"`
	Codestarnotifications                string `json:"codestarnotifications"`
	Cognitoidentity                      string `json:"cognitoidentity"`
	Cognitoidentityprovider              string `json:"cognitoidentityprovider"`
	Cognitoidp                           string `json:"cognitoidp"`
	Comprehend                           string `json:"comprehend"`
	Computeoptimizer                     string `json:"computeoptimizer"`
	Config                               string `json:"config"`
	Configservice                        string `json:"configservice"`
	Connect                              string `json:"connect"`
	Connectcases                         string `json:"connectcases"`
	Controltower                         string `json:"controltower"`
	Costandusagereportservice            string `json:"costandusagereportservice"`
	Costexplorer                         string `json:"costexplorer"`
	Costoptimizationhub                  string `json:"costoptimizationhub"`
	Cur                                  string `json:"cur"`
	Customerprofiles                     string `json:"customerprofiles"`
	Databasemigration                    string `json:"databasemigration"`
	Databasemigrationservice             string `json:"databasemigrationservice"`
	Dataexchange                         string `json:"dataexchange"`
	Datapipeline                         string `json:"datapipeline"`
	Datasync                             string `json:"datasync"`
	Datazone                             string `json:"datazone"`
	Dax                                  string `json:"dax"`
	Deploy                               string `json:"deploy"`
	Detective                            string `json:"detective"`
	Devicefarm                           string `json:"devicefarm"`
	Devopsguru                           string `json:"devopsguru"`
	Directconnect                        string `json:"directconnect"`
	Directoryservice                     string `json:"directoryservice"`
	Dlm                                  string `json:"dlm"`
	Dms                                  string `json:"dms"`
	Docdb                                string `json:"docdb"`
	Docdbelastic                         string `json:"docdbelastic"`
	Ds                                   string `json:"ds"`
	Dynamodb                             string `json:"dynamodb"`
	Ec2                                  string `json:"ec2"`
	Ecr                                  string `json:"ecr"`
	Ecrpublic                            string `json:"ecrpublic"`
	Ecs                                  string `json:"ecs"`
	Efs                                  string `json:"efs"`
	Eks                                  string `json:"eks"`
	Elasticache                          string `json:"elasticache"`
	Elasticbeanstalk                     string `json:"elasticbeanstalk"`
	Elasticloadbalancing                 string `json:"elasticloadbalancing"`
	Elasticloadbalancingv2               string `json:"elasticloadbalancingv2"`
	Elasticsearch                        string `json:"elasticsearch"`
	Elasticsearchservice                 string `json:"elasticsearchservice"`
	Elastictranscoder                    string `json:"elastictranscoder"`
	Elb                                  string `json:"elb"`
	Elbv2                                string `json:"elbv2"`
	Emr                                  string `json:"emr"`
	Emrcontainers                        string `json:"emrcontainers"`
	Emrserverless                        string `json:"emrserverless"`
	Es                                   string `json:"es"`
	Eventbridge                          string `json:"eventbridge"`
	Events                               string `json:"events"`
	Evidently                            string `json:"evidently"`
	Finspace                             string `json:"finspace"`
	Firehose                             string `json:"firehose"`
	Fis                                  string `json:"fis"`
	Fms                                  string `json:"fms"`
	Fsx                                  string `json:"fsx"`
	Gamelift                             string `json:"gamelift"`
	Glacier                              string `json:"glacier"`
	Globalaccelerator                    string `json:"globalaccelerator"`
	Glue                                 string `json:"glue"`
	Grafana                              string `json:"grafana"`
	Greengrass                           string `json:"greengrass"`
	Groundstation                        string `json:"groundstation"`
	Guardduty                            string `json:"guardduty"`
	Healthlake                           string `json:"healthlake"`
	Iam                                  string `json:"iam"`
	Identitystore                        string `json:"identitystore"`
	Imagebuilder                         string `json:"imagebuilder"`
	Inspector                            string `json:"inspector"`
	Inspector2                           string `json:"inspector2"`
	Inspectorv2                          string `json:"inspectorv2"`
	Internetmonitor                      string `json:"internetmonitor"`
	Iot                                  string `json:"iot"`
	Iotanalytics                         string `json:"iotanalytics"`
	Iotevents                            string `json:"iotevents"`
	Ivs                                  string `json:"ivs"`
	Ivschat                              string `json:"ivschat"`
	Kafka                                string `json:"kafka"`
	Kafkaconnect                         string `json:"kafkaconnect"`
	Kendra                               string `json:"kendra"`
	Keyspaces                            string `json:"keyspaces"`
	Kinesis                              string `json:"kinesis"`
	Kinesisanalytics                     string `json:"kinesisanalytics"`
	Kinesisanalyticsv2                   string `json:"kinesisanalyticsv2"`
	Kinesisvideo                         string `json:"kinesisvideo"`
	Kms                                  string `json:"kms"`
	Lakeformation                        string `json:"lakeformation"`
	Lambda                               string `json:"lambda"`
	Launchwizard                         string `json:"launchwizard"`
	Lex                                  string `json:"lex"`
	Lexmodelbuilding                     string `json:"lexmodelbuilding"`
	Lexmodelbuildingservice              string `json:"lexmodelbuildingservice"`
	Lexmodels                            string `json:"lexmodels"`
	Lexmodelsv2                          string `json:"lexmodelsv2"`
	Lexv2Models                          string `json:"lexv2models"`
	Licensemanager                       string `json:"licensemanager"`
	Lightsail                            string `json:"lightsail"`
	Location                             string `json:"location"`
	Locationservice                      string `json:"locationservice"`
	Logs                                 string `json:"logs"`
	Lookoutmetrics                       string `json:"lookoutmetrics"`
	M2                                   string `json:"m2"`
	Macie2                               string `json:"macie2"`
	Managedgrafana                       string `json:"managedgrafana"`
	Mediaconnect                         string `json:"mediaconnect"`
	Mediaconvert                         string `json:"mediaconvert"`
	Medialive                            string `json:"medialive"`
	Mediapackage                         string `json:"mediapackage"`
	Mediapackagev2                       string `json:"mediapackagev2"`
	Mediastore                           string `json:"mediastore"`
	Memorydb                             string `json:"memorydb"`
	Mq                                   string `json:"mq"`
	Msk                                  string `json:"msk"`
	Mwaa                                 string `json:"mwaa"`
	Neptune                              string `json:"neptune"`
	Networkfirewall                      string `json:"networkfirewall"`
	Networkmanager                       string `json:"networkmanager"`
	Oam                                  string `json:"oam"`
	Opensearch                           string `json:"opensearch"`
	Opensearchingestion                  string `json:"opensearchingestion"`
	Opensearchserverless                 string `json:"opensearchserverless"`
	Opensearchservice                    string `json:"opensearchservice"`
	Opsworks                             string `json:"opsworks"`
	Organizations                        string `json:"organizations"`
	Osis                                 string `json:"osis"`
	Outposts                             string `json:"outposts"`
	Paymentcryptography                  string `json:"paymentcryptography"`
	Pcaconnectorad                       string `json:"pcaconnectorad"`
	Pinpoint                             string `json:"pinpoint"`
	Pipes                                string `json:"pipes"`
	Polly                                string `json:"polly"`
	Pricing                              string `json:"pricing"`
	Prometheus                           string `json:"prometheus"`
	Prometheusservice                    string `json:"prometheusservice"`
	Qbusiness                            string `json:"qbusiness"`
	Qldb                                 string `json:"qldb"`
	Quicksight                           string `json:"quicksight"`
	Ram                                  string `json:"ram"`
	Rbin                                 string `json:"rbin"`
	Rds                                  string `json:"rds"`
	Recyclebin                           string `json:"recyclebin"`
	Redshift                             string `json:"redshift"`
	Redshiftdata                         string `json:"redshiftdata"`
	Redshiftdataapiservice               string `json:"redshiftdataapiservice"`
	Redshiftserverless                   string `json:"redshiftserverless"`
	Rekognition                          string `json:"rekognition"`
	Resourceexplorer2                    string `json:"resourceexplorer2"`
	Resourcegroups                       string `json:"resourcegroups"`
	Resourcegroupstagging                string `json:"resourcegroupstagging"`
	Resourcegroupstaggingapi             string `json:"resourcegroupstaggingapi"`
	Rolesanywhere                        string `json:"rolesanywhere"`
	Route53                              string `json:"route53"`
	Route53Domains                       string `json:"route53domains"`
	Route53Recoverycontrolconfig         string `json:"route53recoverycontrolconfig"`
	Route53Recoveryreadiness             string `json:"route53recoveryreadiness"`
	Route53Resolver                      string `json:"route53resolver"`
	Rum                                  string `json:"rum"`
	S3                                   string `json:"s3"`
	S3Api                                string `json:"s3api"`
	S3Control                            string `json:"s3control"`
	S3Outposts                           string `json:"s3outposts"`
	Sagemaker                            string `json:"sagemaker"`
	Scheduler                            string `json:"scheduler"`
	Schemas                              string `json:"schemas"`
	Sdb                                  string `json:"sdb"`
	Secretsmanager                       string `json:"secretsmanager"`
	Securityhub                          string `json:"securityhub"`
	Securitylake                         string `json:"securitylake"`
	Serverlessapplicationrepository      string `json:"serverlessapplicationrepository"`
	Serverlessapprepo                    string `json:"serverlessapprepo"`
	Serverlessrepo                       string `json:"serverlessrepo"`
	Servicecatalog                       string `json:"servicecatalog"`
	Servicecatalogappregistry            string `json:"servicecatalogappregistry"`
	Servicediscovery                     string `json:"servicediscovery"`
	Servicequotas                        string `json:"servicequotas"`
	Ses                                  string `json:"ses"`
	Sesv2                                string `json:"sesv2"`
	Sfn                                  string `json:"sfn"`
	Shield                               string `json:"shield"`
	Signer                               string `json:"signer"`
	Simpledb                             string `json:"simpledb"`
	Sns                                  string `json:"sns"`
	Sqs                                  string `json:"sqs"`
	Ssm                                  string `json:"ssm"`
	Ssmcontacts                          string `json:"ssmcontacts"`
	Ssmincidents                         string `json:"ssmincidents"`
	Ssmsap                               string `json:"ssmsap"`
	Sso                                  string `json:"sso"`
	Ssoadmin                             string `json:"ssoadmin"`
	Stepfunctions                        string `json:"stepfunctions"`
	Storagegateway                       string `json:"storagegateway"`
	Sts                                  string `json:"sts"`
	Swf                                  string `json:"swf"`
	Synthetics                           string `json:"synthetics"`
	Timestreamwrite                      string `json:"timestreamwrite"`
	Transcribe                           string `json:"transcribe"`
	Transcribeservice                    string `json:"transcribeservice"`
	Transfer                             string `json:"transfer"`
	Verifiedpermissions                  string `json:"verifiedpermissions"`
	Vpclattice                           string `json:"vpclattice"`
	Waf                                  string `json:"waf"`
	Wafregional                          string `json:"wafregional"`
	Wafv2                                string `json:"wafv2"`
	Wellarchitected                      string `json:"wellarchitected"`
	Worklink                             string `json:"worklink"`
	Workspaces                           string `json:"workspaces"`
	Xray                                 string `json:"xray"`
}

type IgnoreTagsState struct {
	KeyPrefixes []string `json:"key_prefixes"`
	Keys        []string `json:"keys"`
}
-- out/aws_securitylake_subscriber/aws_securitylake_subscriber.go --
// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securitylake_subscriber

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_securitylake_subscriber.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.44.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsSecuritylakeSubscriberState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ass *Resource) Type() string {
	return "aws_securitylake_subscriber"
}

// LocalName returns the local name for [Resource].
func (ass *Resource) LocalName() string {
	return ass.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ass *Resource) Configuration() interface{} {
	return ass.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ass *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ass)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ass *Resource) Dependencies() terra.Dependencies {
	return ass.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ass *Resource) LifecycleManagement() *terra.Lifecycle {
	return ass.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ass *Resource) Attributes() awsSecuritylakeSubscriberAttributes {
	return awsSecuritylakeSubscriberAttributes{ref: terra.ReferenceResource(ass)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ass *Resource) ImportState(state io.Reader) error {
	ass.state = &awsSecuritylakeSubscriberState{}
	if err := json.NewDecoder(state).Decode(ass.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ass.Type(), ass.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ass *Resource) State() (*awsSecuritylakeSubscriberState, bool) {
	return ass.state, ass.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ass *Resource) StateMust() *awsSecuritylakeSubscriberState {
	if ass.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ass.Type(), ass.LocalName()))
	}
	return ass.state
}

// Args contains the configurations for aws_securitylake_subscriber.
type Args struct {
	// AccessType is optional.
	AccessType terra.StringValue `hcl:"access_type,attr"`
	// SubscriberDescription is optional.
	SubscriberDescription terra.StringValue `hcl:"subscriber_description,attr"`
	// SubscriberName is optional.
	SubscriberName terra.StringValue `hcl:"subscriber_name,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Source is min=0.
	Source []Source `hcl:"source,block" validate:"min=0"`
	// SubscriberIdentity is min=0.
	SubscriberIdentity []SubscriberIdentity `hcl:"subscriber_identity,block" validate:"min=0"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsSecuritylakeSubscriberAttributes struct {
	ref terra.Reference
}

// AccessType returns a reference to field access_type of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) AccessType() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("access_type"))
}

// Arn returns a reference to field arn of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("arn"))
}

// Id returns a reference to field id of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("id"))
}

// ResourceShareArn returns a reference to field resource_share_arn of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) ResourceShareArn() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("resource_share_arn"))
}

// ResourceShareName returns a reference to field resource_share_name of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) ResourceShareName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("resource_share_name"))
}

// RoleArn returns a reference to field role_arn of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("role_arn"))
}

// S3BucketArn returns a reference to field s3_bucket_arn of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) S3BucketArn() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("s3_bucket_arn"))
}

// SubscriberDescription returns a reference to field subscriber_description of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) SubscriberDescription() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("subscriber_description"))
}

// SubscriberEndpoint returns a reference to field subscriber_endpoint of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) SubscriberEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("subscriber_endpoint"))
}

// SubscriberName returns a reference to field subscriber_name of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) SubscriberName() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("subscriber_name"))
}

// SubscriberStatus returns a reference to field subscriber_status of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) SubscriberStatus() terra.StringValue {
	return terra.ReferenceAsString(ass.ref.Append("subscriber_status"))
}

// Tags returns a reference to field tags of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ass.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_securitylake_subscriber.
func (ass awsSecuritylakeSubscriberAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ass.ref.Append("tags_all"))
}

func (ass awsSecuritylakeSubscriberAttributes) Source() terra.ListValue[sourceAttributes] {
	return terra.ReferenceAsList[sourceAttributes](ass.ref.Append("source"))
}

func (ass awsSecuritylakeSubscriberAttributes) SubscriberIdentity() terra.ListValue[subscriberIdentityAttributes] {
	return terra.ReferenceAsList[subscriberIdentityAttributes](ass.ref.Append("subscriber_identity"))
}

func (ass awsSecuritylakeSubscriberAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](ass.ref.Append("timeouts"))
}

type awsSecuritylakeSubscriberState struct {
	AccessType            string                    `json:"access_type"`
	Arn                   string                    `json:"arn"`
	Id                    string                    `json:"id"`
	ResourceShareArn      string                    `json:"resource_share_arn"`
	ResourceShareName     string                    `json:"resource_share_name"`
	RoleArn               string                    `json:"role_arn"`
	S3BucketArn           string                    `json:"s3_bucket_arn"`
	SubscriberDescription string                    `json:"subscriber_description"`
	SubscriberEndpoint    string                    `json:"subscriber_endpoint"`
	SubscriberName        string                    `json:"subscriber_name"`
	SubscriberStatus      string                    `json:"subscriber_status"`
	Tags                  map[string]string         `json:"tags"`
	TagsAll               map[string]string         `json:"tags_all"`
	Source                []SourceState             `json:"source"`
	SubscriberIdentity    []SubscriberIdentityState `json:"subscriber_identity"`
	Timeouts              *TimeoutsState            `json:"timeouts"`
}
-- out/aws_securitylake_subscriber/aws_securitylake_subscriber_types.go --
// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_securitylake_subscriber

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Source struct {
	// SourceAwsLogSourceResource is min=0.
	AwsLogSourceResource []SourceAwsLogSourceResource `hcl:"aws_log_source_resource,block" validate:"min=0"`
	// SourceCustomLogSourceResource is min=0.
	CustomLogSourceResource []SourceCustomLogSourceResource `hcl:"custom_log_source_resource,block" validate:"min=0"`
}

type SourceAwsLogSourceResource struct {
	// SourceName is optional.
	SourceName terra.StringValue `hcl:"source_name,attr"`
	// SourceVersion is optional.
	SourceVersion terra.StringValue `hcl:"source_version,attr"`
}

type SourceCustomLogSourceResource struct {
	// SourceName is optional.
	SourceName terra.StringValue `hcl:"source_name,attr"`
	// SourceVersion is optional.
	SourceVersion terra.StringValue `hcl:"source_version,attr"`
}

type SubscriberIdentity struct {
	// ExternalId is required.
	ExternalId terra.StringValue `hcl:"external_id,attr" validate:"required"`
	// Principal is required.
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional. A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional. A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional. A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update terra.StringValue `hcl:"update,attr"`
}

type sourceAttributes struct {
	ref terra.Reference
}

func (s sourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s sourceAttributes) InternalWithRef(ref terra.Reference) sourceAttributes {
	return sourceAttributes{ref: ref}
}

func (s sourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s sourceAttributes) AwsLogSourceResource() terra.ListValue[sourceAwsLogSourceResourceAttributes] {
	return terra.ReferenceAsList[sourceAwsLogSourceResourceAttributes](s.ref.Append("aws_log_source_resource"))
}

func (s sourceAttributes) CustomLogSourceResource() terra.ListValue[sourceCustomLogSourceResourceAttributes] {
	return terra.ReferenceAsList[sourceCustomLogSourceResourceAttributes](s.ref.Append("custom_log_source_resource"))
}

type sourceAwsLogSourceResourceAttributes struct {
	ref terra.Reference
}

func (alsr sourceAwsLogSourceResourceAttributes) InternalRef() (terra.Reference, error) {
	return alsr.ref, nil
}

func (alsr sourceAwsLogSourceResourceAttributes) InternalWithRef(ref terra.Reference) sourceAwsLogSourceResourceAttributes {
	return sourceAwsLogSourceResourceAttributes{ref: ref}
}

func (alsr sourceAwsLogSourceResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alsr.ref.InternalTokens()
}

func (alsr sourceAwsLogSourceResourceAttributes) SourceName() terra.StringValue {
	return terra.ReferenceAsString(alsr.ref.Append("source_name"))
}

func (alsr sourceAwsLogSourceResourceAttributes) SourceVersion() terra.StringValue {
	return terra.ReferenceAsString(alsr.ref.Append("source_version"))
}

type sourceCustomLogSourceResourceAttributes struct {
	ref terra.Reference
}

func (clsr sourceCustomLogSourceResourceAttributes) InternalRef() (terra.Reference, error) {
	return clsr.ref, nil
}

func (clsr sourceCustomLogSourceResourceAttributes) InternalWithRef(ref terra.Reference) sourceCustomLogSourceResourceAttributes {
	return sourceCustomLogSourceResourceAttributes{ref: ref}
}

func (clsr sourceCustomLogSourceResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clsr.ref.InternalTokens()
}

func (clsr sourceCustomLogSourceResourceAttributes) SourceName() terra.StringValue {
	return terra.ReferenceAsString(clsr.ref.Append("source_name"))
}

func (clsr sourceCustomLogSourceResourceAttributes) SourceVersion() terra.StringValue {
	return terra.ReferenceAsString(clsr.ref.Append("source_version"))
}

func (clsr sourceCustomLogSourceResourceAttributes) Attributes() terra.ListValue[sourceCustomLogSourceResourceAttributesAttributes] {
	return terra.ReferenceAsList[sourceCustomLogSourceResourceAttributesAttributes](clsr.ref.Append("attributes"))
}

func (clsr sourceCustomLogSourceResourceAttributes) Provider() terra.ListValue[sourceCustomLogSourceResourceProviderAttributes] {
	return terra.ReferenceAsList[sourceCustomLogSourceResourceProviderAttributes](clsr.ref.Append("provider"))
}

type sourceCustomLogSourceResourceAttributesAttributes struct {
	ref terra.Reference
}

func (a sourceCustomLogSourceResourceAttributesAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a sourceCustomLogSourceResourceAttributesAttributes) InternalWithRef(ref terra.Reference) sourceCustomLogSourceResourceAttributesAttributes {
	return sourceCustomLogSourceResourceAttributesAttributes{ref: ref}
}

func (a sourceCustomLogSourceResourceAttributesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a sourceCustomLogSourceResourceAttributesAttributes) CrawlerArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("crawler_arn"))
}

func (a sourceCustomLogSourceResourceAttributesAttributes) DatabaseArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("database_arn"))
}

func (a sourceCustomLogSourceResourceAttributesAttributes) TableArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("table_arn"))
}

type sourceCustomLogSourceResourceProviderAttributes struct {
	ref terra.Reference
}

func (p sourceCustomLogSourceResourceProviderAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p sourceCustomLogSourceResourceProviderAttributes) InternalWithRef(ref terra.Reference) sourceCustomLogSourceResourceProviderAttributes {
	return sourceCustomLogSourceResourceProviderAttributes{ref: ref}
}

func (p sourceCustomLogSourceResourceProviderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p sourceCustomLogSourceResourceProviderAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("location"))
}

func (p sourceCustomLogSourceResourceProviderAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("role_arn"))
}

type subscriberIdentityAttributes struct {
	ref terra.Reference
}

func (si subscriberIdentityAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si subscriberIdentityAttributes) InternalWithRef(ref terra.Reference) subscriberIdentityAttributes {
	return subscriberIdentityAttributes{ref: ref}
}

func (si subscriberIdentityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si subscriberIdentityAttributes) ExternalId() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("external_id"))
}

func (si subscriberIdentityAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("principal"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type SourceState struct {
	AwsLogSourceResource    []SourceAwsLogSourceResourceState    `json:"aws_log_source_resource"`
	CustomLogSourceResource []SourceCustomLogSourceResourceState `json:"custom_log_source_resource"`
}

type SourceAwsLogSourceResourceState struct {
	SourceName    string `json:"source_name"`
	SourceVersion string `json:"source_version"`
}

type SourceCustomLogSourceResourceState struct {
	SourceName    string                                         `json:"source_name"`
	SourceVersion string                                         `json:"source_version"`
	Attributes    []SourceCustomLogSourceResourceAttributesState `json:"attributes"`
	Provider      []SourceCustomLogSourceResourceProviderState   `json:"provider"`
}

type SourceCustomLogSourceResourceAttributesState struct {
	CrawlerArn  string `json:"crawler_arn"`
	DatabaseArn string `json:"database_arn"`
	TableArn    string `json:"table_arn"`
}

type SourceCustomLogSourceResourceProviderState struct {
	Location string `json:"location"`
	RoleArn  string `json:"role_arn"`
}

type SubscriberIdentityState struct {
	ExternalId string `json:"external_id"`
	Principal  string `json:"principal"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
